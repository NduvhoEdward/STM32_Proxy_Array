
ProxyArray.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a98  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004ba4  08004ba4  00005ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bd0  08004bd0  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004bd0  08004bd0  00005bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bd8  08004bd8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bd8  08004bd8  00005bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bdc  08004bdc  00005bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004be0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000010  08004bec  00006010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08004bec  0000618c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abc3  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000184f  00000000  00000000  00010bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00012448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009a0  00000000  00000000  00013080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ace  00000000  00000000  00013a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbc7  00000000  00000000  0002a4ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086c2e  00000000  00000000  000380b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bece3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000368c  00000000  00000000  000bed28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000c23b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b8c 	.word	0x08004b8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08004b8c 	.word	0x08004b8c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__gedf2>:
 80008e8:	f04f 3cff 	mov.w	ip, #4294967295
 80008ec:	e006      	b.n	80008fc <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__ledf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	e002      	b.n	80008fc <__cmpdf2+0x4>
 80008f6:	bf00      	nop

080008f8 <__cmpdf2>:
 80008f8:	f04f 0c01 	mov.w	ip, #1
 80008fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800090c:	bf18      	it	ne
 800090e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000912:	d01b      	beq.n	800094c <__cmpdf2+0x54>
 8000914:	b001      	add	sp, #4
 8000916:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091a:	bf0c      	ite	eq
 800091c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000920:	ea91 0f03 	teqne	r1, r3
 8000924:	bf02      	ittt	eq
 8000926:	ea90 0f02 	teqeq	r0, r2
 800092a:	2000      	moveq	r0, #0
 800092c:	4770      	bxeq	lr
 800092e:	f110 0f00 	cmn.w	r0, #0
 8000932:	ea91 0f03 	teq	r1, r3
 8000936:	bf58      	it	pl
 8000938:	4299      	cmppl	r1, r3
 800093a:	bf08      	it	eq
 800093c:	4290      	cmpeq	r0, r2
 800093e:	bf2c      	ite	cs
 8000940:	17d8      	asrcs	r0, r3, #31
 8000942:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000946:	f040 0001 	orr.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	d102      	bne.n	800095c <__cmpdf2+0x64>
 8000956:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095a:	d107      	bne.n	800096c <__cmpdf2+0x74>
 800095c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d1d6      	bne.n	8000914 <__cmpdf2+0x1c>
 8000966:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096a:	d0d3      	beq.n	8000914 <__cmpdf2+0x1c>
 800096c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <__aeabi_cdrcmple>:
 8000974:	4684      	mov	ip, r0
 8000976:	4610      	mov	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	468c      	mov	ip, r1
 800097c:	4619      	mov	r1, r3
 800097e:	4663      	mov	r3, ip
 8000980:	e000      	b.n	8000984 <__aeabi_cdcmpeq>
 8000982:	bf00      	nop

08000984 <__aeabi_cdcmpeq>:
 8000984:	b501      	push	{r0, lr}
 8000986:	f7ff ffb7 	bl	80008f8 <__cmpdf2>
 800098a:	2800      	cmp	r0, #0
 800098c:	bf48      	it	mi
 800098e:	f110 0f00 	cmnmi.w	r0, #0
 8000992:	bd01      	pop	{r0, pc}

08000994 <__aeabi_dcmpeq>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff fff4 	bl	8000984 <__aeabi_cdcmpeq>
 800099c:	bf0c      	ite	eq
 800099e:	2001      	moveq	r0, #1
 80009a0:	2000      	movne	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmplt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffea 	bl	8000984 <__aeabi_cdcmpeq>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmple>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffe0 	bl	8000984 <__aeabi_cdcmpeq>
 80009c4:	bf94      	ite	ls
 80009c6:	2001      	movls	r0, #1
 80009c8:	2000      	movhi	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmpge>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffce 	bl	8000974 <__aeabi_cdrcmple>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpgt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffc4 	bl	8000974 <__aeabi_cdrcmple>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_d2f>:
 80009f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a00:	bf24      	itt	cs
 8000a02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a0a:	d90d      	bls.n	8000a28 <__aeabi_d2f+0x30>
 8000a0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a20:	bf08      	it	eq
 8000a22:	f020 0001 	biceq.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a2c:	d121      	bne.n	8000a72 <__aeabi_d2f+0x7a>
 8000a2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a32:	bfbc      	itt	lt
 8000a34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a38:	4770      	bxlt	lr
 8000a3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a42:	f1c2 0218 	rsb	r2, r2, #24
 8000a46:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a52:	bf18      	it	ne
 8000a54:	f040 0001 	orrne.w	r0, r0, #1
 8000a58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a64:	ea40 000c 	orr.w	r0, r0, ip
 8000a68:	fa23 f302 	lsr.w	r3, r3, r2
 8000a6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a70:	e7cc      	b.n	8000a0c <__aeabi_d2f+0x14>
 8000a72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a76:	d107      	bne.n	8000a88 <__aeabi_d2f+0x90>
 8000a78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a7c:	bf1e      	ittt	ne
 8000a7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a86:	4770      	bxne	lr
 8000a88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_ldivmod>:
 8000a98:	b97b      	cbnz	r3, 8000aba <__aeabi_ldivmod+0x22>
 8000a9a:	b972      	cbnz	r2, 8000aba <__aeabi_ldivmod+0x22>
 8000a9c:	2900      	cmp	r1, #0
 8000a9e:	bfbe      	ittt	lt
 8000aa0:	2000      	movlt	r0, #0
 8000aa2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000aa6:	e006      	blt.n	8000ab6 <__aeabi_ldivmod+0x1e>
 8000aa8:	bf08      	it	eq
 8000aaa:	2800      	cmpeq	r0, #0
 8000aac:	bf1c      	itt	ne
 8000aae:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ab2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab6:	f000 b99b 	b.w	8000df0 <__aeabi_idiv0>
 8000aba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000abe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac2:	2900      	cmp	r1, #0
 8000ac4:	db09      	blt.n	8000ada <__aeabi_ldivmod+0x42>
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	db1a      	blt.n	8000b00 <__aeabi_ldivmod+0x68>
 8000aca:	f000 f835 	bl	8000b38 <__udivmoddi4>
 8000ace:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad6:	b004      	add	sp, #16
 8000ad8:	4770      	bx	lr
 8000ada:	4240      	negs	r0, r0
 8000adc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	db1b      	blt.n	8000b1c <__aeabi_ldivmod+0x84>
 8000ae4:	f000 f828 	bl	8000b38 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4240      	negs	r0, r0
 8000af4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af8:	4252      	negs	r2, r2
 8000afa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000afe:	4770      	bx	lr
 8000b00:	4252      	negs	r2, r2
 8000b02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b06:	f000 f817 	bl	8000b38 <__udivmoddi4>
 8000b0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b12:	b004      	add	sp, #16
 8000b14:	4240      	negs	r0, r0
 8000b16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b1a:	4770      	bx	lr
 8000b1c:	4252      	negs	r2, r2
 8000b1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b22:	f000 f809 	bl	8000b38 <__udivmoddi4>
 8000b26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2e:	b004      	add	sp, #16
 8000b30:	4252      	negs	r2, r2
 8000b32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b36:	4770      	bx	lr

08000b38 <__udivmoddi4>:
 8000b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b3c:	9d08      	ldr	r5, [sp, #32]
 8000b3e:	460c      	mov	r4, r1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d14e      	bne.n	8000be2 <__udivmoddi4+0xaa>
 8000b44:	4694      	mov	ip, r2
 8000b46:	458c      	cmp	ip, r1
 8000b48:	4686      	mov	lr, r0
 8000b4a:	fab2 f282 	clz	r2, r2
 8000b4e:	d962      	bls.n	8000c16 <__udivmoddi4+0xde>
 8000b50:	b14a      	cbz	r2, 8000b66 <__udivmoddi4+0x2e>
 8000b52:	f1c2 0320 	rsb	r3, r2, #32
 8000b56:	4091      	lsls	r1, r2
 8000b58:	fa20 f303 	lsr.w	r3, r0, r3
 8000b5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b60:	4319      	orrs	r1, r3
 8000b62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b6e:	fb07 1114 	mls	r1, r7, r4, r1
 8000b72:	fa1f f68c 	uxth.w	r6, ip
 8000b76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b7e:	fb04 f106 	mul.w	r1, r4, r6
 8000b82:	4299      	cmp	r1, r3
 8000b84:	d90a      	bls.n	8000b9c <__udivmoddi4+0x64>
 8000b86:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b8e:	f080 8110 	bcs.w	8000db2 <__udivmoddi4+0x27a>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 810d 	bls.w	8000db2 <__udivmoddi4+0x27a>
 8000b98:	3c02      	subs	r4, #2
 8000b9a:	4463      	add	r3, ip
 8000b9c:	1a59      	subs	r1, r3, r1
 8000b9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ba2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ba6:	fb00 f606 	mul.w	r6, r0, r6
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb2:	429e      	cmp	r6, r3
 8000bb4:	d90a      	bls.n	8000bcc <__udivmoddi4+0x94>
 8000bb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bba:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bbe:	f080 80fa 	bcs.w	8000db6 <__udivmoddi4+0x27e>
 8000bc2:	429e      	cmp	r6, r3
 8000bc4:	f240 80f7 	bls.w	8000db6 <__udivmoddi4+0x27e>
 8000bc8:	4463      	add	r3, ip
 8000bca:	3802      	subs	r0, #2
 8000bcc:	2100      	movs	r1, #0
 8000bce:	1b9b      	subs	r3, r3, r6
 8000bd0:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bd4:	b11d      	cbz	r5, 8000bde <__udivmoddi4+0xa6>
 8000bd6:	40d3      	lsrs	r3, r2
 8000bd8:	2200      	movs	r2, #0
 8000bda:	e9c5 3200 	strd	r3, r2, [r5]
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d905      	bls.n	8000bf2 <__udivmoddi4+0xba>
 8000be6:	b10d      	cbz	r5, 8000bec <__udivmoddi4+0xb4>
 8000be8:	e9c5 0100 	strd	r0, r1, [r5]
 8000bec:	2100      	movs	r1, #0
 8000bee:	4608      	mov	r0, r1
 8000bf0:	e7f5      	b.n	8000bde <__udivmoddi4+0xa6>
 8000bf2:	fab3 f183 	clz	r1, r3
 8000bf6:	2900      	cmp	r1, #0
 8000bf8:	d146      	bne.n	8000c88 <__udivmoddi4+0x150>
 8000bfa:	42a3      	cmp	r3, r4
 8000bfc:	d302      	bcc.n	8000c04 <__udivmoddi4+0xcc>
 8000bfe:	4290      	cmp	r0, r2
 8000c00:	f0c0 80ee 	bcc.w	8000de0 <__udivmoddi4+0x2a8>
 8000c04:	1a86      	subs	r6, r0, r2
 8000c06:	eb64 0303 	sbc.w	r3, r4, r3
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	2d00      	cmp	r5, #0
 8000c0e:	d0e6      	beq.n	8000bde <__udivmoddi4+0xa6>
 8000c10:	e9c5 6300 	strd	r6, r3, [r5]
 8000c14:	e7e3      	b.n	8000bde <__udivmoddi4+0xa6>
 8000c16:	2a00      	cmp	r2, #0
 8000c18:	f040 808f 	bne.w	8000d3a <__udivmoddi4+0x202>
 8000c1c:	eba1 040c 	sub.w	r4, r1, ip
 8000c20:	2101      	movs	r1, #1
 8000c22:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c26:	fa1f f78c 	uxth.w	r7, ip
 8000c2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c32:	fb07 f006 	mul.w	r0, r7, r6
 8000c36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c3e:	4298      	cmp	r0, r3
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x11c>
 8000c42:	eb1c 0303 	adds.w	r3, ip, r3
 8000c46:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x11a>
 8000c4c:	4298      	cmp	r0, r3
 8000c4e:	f200 80cb 	bhi.w	8000de8 <__udivmoddi4+0x2b0>
 8000c52:	4626      	mov	r6, r4
 8000c54:	1a1c      	subs	r4, r3, r0
 8000c56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c5e:	fb00 f707 	mul.w	r7, r0, r7
 8000c62:	fa1f f38e 	uxth.w	r3, lr
 8000c66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c6a:	429f      	cmp	r7, r3
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x148>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x146>
 8000c78:	429f      	cmp	r7, r3
 8000c7a:	f200 80ae 	bhi.w	8000dda <__udivmoddi4+0x2a2>
 8000c7e:	4620      	mov	r0, r4
 8000c80:	1bdb      	subs	r3, r3, r7
 8000c82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c86:	e7a5      	b.n	8000bd4 <__udivmoddi4+0x9c>
 8000c88:	f1c1 0720 	rsb	r7, r1, #32
 8000c8c:	408b      	lsls	r3, r1
 8000c8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c96:	fa24 f607 	lsr.w	r6, r4, r7
 8000c9a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c9e:	fbb6 f8f9 	udiv	r8, r6, r9
 8000ca2:	fa1f fe8c 	uxth.w	lr, ip
 8000ca6:	fb09 6618 	mls	r6, r9, r8, r6
 8000caa:	fa20 f307 	lsr.w	r3, r0, r7
 8000cae:	408c      	lsls	r4, r1
 8000cb0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000cb4:	fb08 f00e 	mul.w	r0, r8, lr
 8000cb8:	431c      	orrs	r4, r3
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc0:	4298      	cmp	r0, r3
 8000cc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cc6:	d90a      	bls.n	8000cde <__udivmoddi4+0x1a6>
 8000cc8:	eb1c 0303 	adds.w	r3, ip, r3
 8000ccc:	f108 36ff 	add.w	r6, r8, #4294967295
 8000cd0:	f080 8081 	bcs.w	8000dd6 <__udivmoddi4+0x29e>
 8000cd4:	4298      	cmp	r0, r3
 8000cd6:	d97e      	bls.n	8000dd6 <__udivmoddi4+0x29e>
 8000cd8:	f1a8 0802 	sub.w	r8, r8, #2
 8000cdc:	4463      	add	r3, ip
 8000cde:	1a1e      	subs	r6, r3, r0
 8000ce0:	fbb6 f3f9 	udiv	r3, r6, r9
 8000ce4:	fb09 6613 	mls	r6, r9, r3, r6
 8000ce8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x1d0>
 8000cf6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfa:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cfe:	d266      	bcs.n	8000dce <__udivmoddi4+0x296>
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d964      	bls.n	8000dce <__udivmoddi4+0x296>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4464      	add	r4, ip
 8000d08:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000d0c:	fba0 8302 	umull	r8, r3, r0, r2
 8000d10:	eba4 040e 	sub.w	r4, r4, lr
 8000d14:	429c      	cmp	r4, r3
 8000d16:	46c6      	mov	lr, r8
 8000d18:	461e      	mov	r6, r3
 8000d1a:	d350      	bcc.n	8000dbe <__udivmoddi4+0x286>
 8000d1c:	d04d      	beq.n	8000dba <__udivmoddi4+0x282>
 8000d1e:	b155      	cbz	r5, 8000d36 <__udivmoddi4+0x1fe>
 8000d20:	ebba 030e 	subs.w	r3, sl, lr
 8000d24:	eb64 0406 	sbc.w	r4, r4, r6
 8000d28:	fa04 f707 	lsl.w	r7, r4, r7
 8000d2c:	40cb      	lsrs	r3, r1
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	40cc      	lsrs	r4, r1
 8000d32:	e9c5 7400 	strd	r7, r4, [r5]
 8000d36:	2100      	movs	r1, #0
 8000d38:	e751      	b.n	8000bde <__udivmoddi4+0xa6>
 8000d3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	40d9      	lsrs	r1, r3
 8000d44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d50:	fbb1 f0f8 	udiv	r0, r1, r8
 8000d54:	fb08 1110 	mls	r1, r8, r0, r1
 8000d58:	4094      	lsls	r4, r2
 8000d5a:	431c      	orrs	r4, r3
 8000d5c:	fa1f f78c 	uxth.w	r7, ip
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d66:	fb00 f107 	mul.w	r1, r0, r7
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x248>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d76:	d22c      	bcs.n	8000dd2 <__udivmoddi4+0x29a>
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d92a      	bls.n	8000dd2 <__udivmoddi4+0x29a>
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	4463      	add	r3, ip
 8000d80:	1a5b      	subs	r3, r3, r1
 8000d82:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d86:	fb08 3311 	mls	r3, r8, r1, r3
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d90:	fb01 f307 	mul.w	r3, r1, r7
 8000d94:	42a3      	cmp	r3, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x272>
 8000d98:	eb1c 0404 	adds.w	r4, ip, r4
 8000d9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000da0:	d213      	bcs.n	8000dca <__udivmoddi4+0x292>
 8000da2:	42a3      	cmp	r3, r4
 8000da4:	d911      	bls.n	8000dca <__udivmoddi4+0x292>
 8000da6:	3902      	subs	r1, #2
 8000da8:	4464      	add	r4, ip
 8000daa:	1ae4      	subs	r4, r4, r3
 8000dac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000db0:	e73b      	b.n	8000c2a <__udivmoddi4+0xf2>
 8000db2:	4604      	mov	r4, r0
 8000db4:	e6f2      	b.n	8000b9c <__udivmoddi4+0x64>
 8000db6:	4608      	mov	r0, r1
 8000db8:	e708      	b.n	8000bcc <__udivmoddi4+0x94>
 8000dba:	45c2      	cmp	sl, r8
 8000dbc:	d2af      	bcs.n	8000d1e <__udivmoddi4+0x1e6>
 8000dbe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dc2:	eb63 060c 	sbc.w	r6, r3, ip
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	e7a9      	b.n	8000d1e <__udivmoddi4+0x1e6>
 8000dca:	4631      	mov	r1, r6
 8000dcc:	e7ed      	b.n	8000daa <__udivmoddi4+0x272>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	e79a      	b.n	8000d08 <__udivmoddi4+0x1d0>
 8000dd2:	4630      	mov	r0, r6
 8000dd4:	e7d4      	b.n	8000d80 <__udivmoddi4+0x248>
 8000dd6:	46b0      	mov	r8, r6
 8000dd8:	e781      	b.n	8000cde <__udivmoddi4+0x1a6>
 8000dda:	4463      	add	r3, ip
 8000ddc:	3802      	subs	r0, #2
 8000dde:	e74f      	b.n	8000c80 <__udivmoddi4+0x148>
 8000de0:	4606      	mov	r6, r0
 8000de2:	4623      	mov	r3, r4
 8000de4:	4608      	mov	r0, r1
 8000de6:	e711      	b.n	8000c0c <__udivmoddi4+0xd4>
 8000de8:	3e02      	subs	r6, #2
 8000dea:	4463      	add	r3, ip
 8000dec:	e732      	b.n	8000c54 <__udivmoddi4+0x11c>
 8000dee:	bf00      	nop

08000df0 <__aeabi_idiv0>:
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <Read_DataXbits>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
int32_t Read_DataXbits(uint8_t msb_addr, uint8_t lsb_addr){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af04      	add	r7, sp, #16
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	460a      	mov	r2, r1
 8000dfe:	71fb      	strb	r3, [r7, #7]
 8000e00:	4613      	mov	r3, r2
 8000e02:	71bb      	strb	r3, [r7, #6]
	int32_t f_sensor;

	hal_status = HAL_I2C_Mem_Read(&hi2c1, LDC_I2C_ADDR, msb_addr, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 8000e04:	2354      	movs	r3, #84	@ 0x54
 8000e06:	4619      	mov	r1, r3
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e10:	9302      	str	r3, [sp, #8]
 8000e12:	2302      	movs	r3, #2
 8000e14:	9301      	str	r3, [sp, #4]
 8000e16:	4b23      	ldr	r3, [pc, #140]	@ (8000ea4 <Read_DataXbits+0xb0>)
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	4822      	ldr	r0, [pc, #136]	@ (8000ea8 <Read_DataXbits+0xb4>)
 8000e1e:	f001 ff19 	bl	8002c54 <HAL_I2C_Mem_Read>
 8000e22:	4603      	mov	r3, r0
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b21      	ldr	r3, [pc, #132]	@ (8000eac <Read_DataXbits+0xb8>)
 8000e28:	701a      	strb	r2, [r3, #0]
	if (hal_status == HAL_OK) {
 8000e2a:	4b20      	ldr	r3, [pc, #128]	@ (8000eac <Read_DataXbits+0xb8>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d108      	bne.n	8000e44 <Read_DataXbits+0x50>
	  f_sensor = (int32_t)buf[0] << 24 | (int32_t)buf[1] << 16;
 8000e32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea4 <Read_DataXbits+0xb0>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	061a      	lsls	r2, r3, #24
 8000e38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea4 <Read_DataXbits+0xb0>)
 8000e3a:	785b      	ldrb	r3, [r3, #1]
 8000e3c:	041b      	lsls	r3, r3, #16
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	e002      	b.n	8000e4a <Read_DataXbits+0x56>
	} else {read_error = 1;}
 8000e44:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb0 <Read_DataXbits+0xbc>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	601a      	str	r2, [r3, #0]

	hal_status = HAL_I2C_Mem_Read(&hi2c1, LDC_I2C_ADDR, lsb_addr, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 8000e4a:	2354      	movs	r3, #84	@ 0x54
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	79bb      	ldrb	r3, [r7, #6]
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
 8000e56:	9302      	str	r3, [sp, #8]
 8000e58:	2302      	movs	r3, #2
 8000e5a:	9301      	str	r3, [sp, #4]
 8000e5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <Read_DataXbits+0xb0>)
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	2301      	movs	r3, #1
 8000e62:	4811      	ldr	r0, [pc, #68]	@ (8000ea8 <Read_DataXbits+0xb4>)
 8000e64:	f001 fef6 	bl	8002c54 <HAL_I2C_Mem_Read>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <Read_DataXbits+0xb8>)
 8000e6e:	701a      	strb	r2, [r3, #0]
	if (hal_status == HAL_OK) {
 8000e70:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <Read_DataXbits+0xb8>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d109      	bne.n	8000e8c <Read_DataXbits+0x98>
		f_sensor |= (int32_t)buf[0] << 8 | (int32_t)buf[1] << 0;
 8000e78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <Read_DataXbits+0xb0>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	021b      	lsls	r3, r3, #8
 8000e7e:	4a09      	ldr	r2, [pc, #36]	@ (8000ea4 <Read_DataXbits+0xb0>)
 8000e80:	7852      	ldrb	r2, [r2, #1]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	e002      	b.n	8000e92 <Read_DataXbits+0x9e>
	} else {read_error = 1;}
 8000e8c:	4b08      	ldr	r3, [pc, #32]	@ (8000eb0 <Read_DataXbits+0xbc>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	601a      	str	r2, [r3, #0]
	f_sensor &= 0x0FFFFFFF;  // Masking out the error bits
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000e98:	60fb      	str	r3, [r7, #12]

	return f_sensor;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000114 	.word	0x20000114
 8000ea8:	2000002c 	.word	0x2000002c
 8000eac:	20000110 	.word	0x20000110
 8000eb0:	2000011c 	.word	0x2000011c

08000eb4 <calibrate>:

void calibrate(){
 8000eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000eb8:	b098      	sub	sp, #96	@ 0x60
 8000eba:	af04      	add	r7, sp, #16

	int baselineReadings = 50;
 8000ebc:	2332      	movs	r3, #50	@ 0x32
 8000ebe:	64bb      	str	r3, [r7, #72]	@ 0x48
	int iterations = baselineReadings;
 8000ec0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000ec2:	64fb      	str	r3, [r7, #76]	@ 0x4c

	while(iterations>0){
 8000ec4:	e087      	b.n	8000fd6 <calibrate+0x122>
		__NOP();
 8000ec6:	bf00      	nop
		if(data_ready){
 8000ec8:	4b67      	ldr	r3, [pc, #412]	@ (8001068 <calibrate+0x1b4>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f000 8082 	beq.w	8000fd6 <calibrate+0x122>

			f_sensor0_baseline += Read_DataXbits(DATA0_MSB, DATA0_LSB);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4610      	mov	r0, r2
 8000eda:	f7ff ff8b 	bl	8000df4 <Read_DataXbits>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	17da      	asrs	r2, r3, #31
 8000ee2:	643b      	str	r3, [r7, #64]	@ 0x40
 8000ee4:	647a      	str	r2, [r7, #68]	@ 0x44
 8000ee6:	4b61      	ldr	r3, [pc, #388]	@ (800106c <calibrate+0x1b8>)
 8000ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000eee:	1889      	adds	r1, r1, r2
 8000ef0:	6339      	str	r1, [r7, #48]	@ 0x30
 8000ef2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000ef4:	eb41 0303 	adc.w	r3, r1, r3
 8000ef8:	637b      	str	r3, [r7, #52]	@ 0x34
 8000efa:	4b5c      	ldr	r3, [pc, #368]	@ (800106c <calibrate+0x1b8>)
 8000efc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8000f00:	e9c3 1200 	strd	r1, r2, [r3]
			f_sensor1_baseline += Read_DataXbits(DATA1_MSB, DATA1_LSB);
 8000f04:	2202      	movs	r2, #2
 8000f06:	2303      	movs	r3, #3
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	f7ff ff72 	bl	8000df4 <Read_DataXbits>
 8000f10:	4603      	mov	r3, r0
 8000f12:	17da      	asrs	r2, r3, #31
 8000f14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000f16:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000f18:	4b55      	ldr	r3, [pc, #340]	@ (8001070 <calibrate+0x1bc>)
 8000f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000f20:	1889      	adds	r1, r1, r2
 8000f22:	62b9      	str	r1, [r7, #40]	@ 0x28
 8000f24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000f26:	eb41 0303 	adc.w	r3, r1, r3
 8000f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f2c:	4b50      	ldr	r3, [pc, #320]	@ (8001070 <calibrate+0x1bc>)
 8000f2e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8000f32:	e9c3 1200 	strd	r1, r2, [r3]
			f_sensor2_baseline += Read_DataXbits(DATA2_MSB, DATA2_LSB);
 8000f36:	2204      	movs	r2, #4
 8000f38:	2305      	movs	r3, #5
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	f7ff ff59 	bl	8000df4 <Read_DataXbits>
 8000f42:	4603      	mov	r3, r0
 8000f44:	17da      	asrs	r2, r3, #31
 8000f46:	469a      	mov	sl, r3
 8000f48:	4693      	mov	fp, r2
 8000f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8001074 <calibrate+0x1c0>)
 8000f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f50:	eb1a 0102 	adds.w	r1, sl, r2
 8000f54:	6239      	str	r1, [r7, #32]
 8000f56:	eb4b 0303 	adc.w	r3, fp, r3
 8000f5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f5c:	4b45      	ldr	r3, [pc, #276]	@ (8001074 <calibrate+0x1c0>)
 8000f5e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8000f62:	e9c3 1200 	strd	r1, r2, [r3]
			f_sensor3_baseline += Read_DataXbits(DATA3_MSB, DATA3_LSB);
 8000f66:	2206      	movs	r2, #6
 8000f68:	2307      	movs	r3, #7
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	f7ff ff41 	bl	8000df4 <Read_DataXbits>
 8000f72:	4603      	mov	r3, r0
 8000f74:	17da      	asrs	r2, r3, #31
 8000f76:	461c      	mov	r4, r3
 8000f78:	4615      	mov	r5, r2
 8000f7a:	4b3f      	ldr	r3, [pc, #252]	@ (8001078 <calibrate+0x1c4>)
 8000f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f80:	eb14 0802 	adds.w	r8, r4, r2
 8000f84:	eb45 0903 	adc.w	r9, r5, r3
 8000f88:	4b3b      	ldr	r3, [pc, #236]	@ (8001078 <calibrate+0x1c4>)
 8000f8a:	e9c3 8900 	strd	r8, r9, [r3]
			// HAL_Delay(10); // For how long is the controller on before the readings are needed???.

			// Read the "STATUS" address to de-assert the interrupt on the LDC side.
			data_ready = 0;
 8000f8e:	4a36      	ldr	r2, [pc, #216]	@ (8001068 <calibrate+0x1b4>)
 8000f90:	2300      	movs	r3, #0
 8000f92:	6013      	str	r3, [r2, #0]
			hal_status = HAL_I2C_Mem_Read(&hi2c1, LDC_I2C_ADDR, STATUS, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 8000f94:	2354      	movs	r3, #84	@ 0x54
 8000f96:	4619      	mov	r1, r3
 8000f98:	2318      	movs	r3, #24
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa0:	9302      	str	r3, [sp, #8]
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	4b35      	ldr	r3, [pc, #212]	@ (800107c <calibrate+0x1c8>)
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2301      	movs	r3, #1
 8000fac:	4834      	ldr	r0, [pc, #208]	@ (8001080 <calibrate+0x1cc>)
 8000fae:	f001 fe51 	bl	8002c54 <HAL_I2C_Mem_Read>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4a33      	ldr	r2, [pc, #204]	@ (8001084 <calibrate+0x1d0>)
 8000fb6:	7013      	strb	r3, [r2, #0]
			status_reg_read = (uint16_t)buf[0] << 8 | (buf[1]);
 8000fb8:	4b30      	ldr	r3, [pc, #192]	@ (800107c <calibrate+0x1c8>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	b21a      	sxth	r2, r3
 8000fc0:	4b2e      	ldr	r3, [pc, #184]	@ (800107c <calibrate+0x1c8>)
 8000fc2:	785b      	ldrb	r3, [r3, #1]
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	4a2e      	ldr	r2, [pc, #184]	@ (8001088 <calibrate+0x1d4>)
 8000fce:	8013      	strh	r3, [r2, #0]

			iterations--;
 8000fd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	while(iterations>0){
 8000fd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f73f af74 	bgt.w	8000ec6 <calibrate+0x12>
		}
	}

	f_sensor0_baseline /= baselineReadings;
 8000fde:	4b23      	ldr	r3, [pc, #140]	@ (800106c <calibrate+0x1b8>)
 8000fe0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000fe6:	17da      	asrs	r2, r3, #31
 8000fe8:	61bb      	str	r3, [r7, #24]
 8000fea:	61fa      	str	r2, [r7, #28]
 8000fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000ff0:	f7ff fd52 	bl	8000a98 <__aeabi_ldivmod>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	491c      	ldr	r1, [pc, #112]	@ (800106c <calibrate+0x1b8>)
 8000ffa:	e9c1 2300 	strd	r2, r3, [r1]
	f_sensor1_baseline /= baselineReadings;
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8001070 <calibrate+0x1bc>)
 8001000:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001004:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001006:	17da      	asrs	r2, r3, #31
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	617a      	str	r2, [r7, #20]
 800100c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001010:	f7ff fd42 	bl	8000a98 <__aeabi_ldivmod>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4915      	ldr	r1, [pc, #84]	@ (8001070 <calibrate+0x1bc>)
 800101a:	e9c1 2300 	strd	r2, r3, [r1]
	f_sensor2_baseline /= baselineReadings;
 800101e:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <calibrate+0x1c0>)
 8001020:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001024:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001026:	17da      	asrs	r2, r3, #31
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	60fa      	str	r2, [r7, #12]
 800102c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001030:	f7ff fd32 	bl	8000a98 <__aeabi_ldivmod>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	490e      	ldr	r1, [pc, #56]	@ (8001074 <calibrate+0x1c0>)
 800103a:	e9c1 2300 	strd	r2, r3, [r1]
	f_sensor3_baseline /= baselineReadings;
 800103e:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <calibrate+0x1c4>)
 8001040:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001044:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001046:	17da      	asrs	r2, r3, #31
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001050:	f7ff fd22 	bl	8000a98 <__aeabi_ldivmod>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4907      	ldr	r1, [pc, #28]	@ (8001078 <calibrate+0x1c4>)
 800105a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800105e:	bf00      	nop
 8001060:	3750      	adds	r7, #80	@ 0x50
 8001062:	46bd      	mov	sp, r7
 8001064:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001068:	20000174 	.word	0x20000174
 800106c:	20000120 	.word	0x20000120
 8001070:	20000128 	.word	0x20000128
 8001074:	20000130 	.word	0x20000130
 8001078:	20000138 	.word	0x20000138
 800107c:	20000114 	.word	0x20000114
 8001080:	2000002c 	.word	0x2000002c
 8001084:	20000110 	.word	0x20000110
 8001088:	20000182 	.word	0x20000182

0800108c <correct_neg_f>:

double correct_neg_f(double f){
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	e9c7 0100 	strd	r0, r1, [r7]
	if(f<0)
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	f04f 0300 	mov.w	r3, #0
 800109e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010a2:	f7ff fc81 	bl	80009a8 <__aeabi_dcmplt>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d004      	beq.n	80010b6 <correct_neg_f+0x2a>
		return 0;
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	e001      	b.n	80010ba <correct_neg_f+0x2e>
	else
		return f;
 80010b6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <position_decoder>:

void position_decoder(double f0, double f1, double f2, double f3, int direction){
 80010c4:	b5b0      	push	{r4, r5, r7, lr}
 80010c6:	b092      	sub	sp, #72	@ 0x48
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80010ce:	e9c7 2300 	strd	r2, r3, [r7]

	// The right-most case is not resolved yet, when the metal goes beyond the
	// last coil, and the values starts decreasing...

	double right_most = correct_neg_f(f3);
 80010d2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80010d6:	f7ff ffd9 	bl	800108c <correct_neg_f>
 80010da:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
	double right_mid = correct_neg_f(f1);
 80010de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010e2:	f7ff ffd3 	bl	800108c <correct_neg_f>
 80010e6:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
	double left_mid = correct_neg_f(f2);
 80010ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80010ee:	f7ff ffcd 	bl	800108c <correct_neg_f>
 80010f2:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
	double left_most = correct_neg_f(f0);
 80010f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010fa:	f7ff ffc7 	bl	800108c <correct_neg_f>
 80010fe:	e9c7 0108 	strd	r0, r1, [r7, #32]

	// Differences in coils (in mm) as measured on the eagle PCB.
	float p0=0.0, p1=0+21.0, p2=0+21+21.0, p3=0+21+21+20.0;
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
 8001108:	4b3e      	ldr	r3, [pc, #248]	@ (8001204 <position_decoder+0x140>)
 800110a:	61bb      	str	r3, [r7, #24]
 800110c:	4b3e      	ldr	r3, [pc, #248]	@ (8001208 <position_decoder+0x144>)
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	4b3e      	ldr	r3, [pc, #248]	@ (800120c <position_decoder+0x148>)
 8001112:	613b      	str	r3, [r7, #16]

	double totalWeight = right_most + right_mid + left_mid + left_most;
 8001114:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001118:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800111c:	f7ff f81c 	bl	8000158 <__adddf3>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800112c:	f7ff f814 	bl	8000158 <__adddf3>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001138:	f7ff f80e 	bl	8000158 <__adddf3>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	if (totalWeight == 0)
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	f04f 0300 	mov.w	r3, #0
 800114c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001150:	f7ff fc20 	bl	8000994 <__aeabi_dcmpeq>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d004      	beq.n	8001164 <position_decoder+0xa0>
		totalWeight = 1;
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	4b2c      	ldr	r3, [pc, #176]	@ (8001210 <position_decoder+0x14c>)
 8001160:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	current_position = (right_most * p0 + right_mid * p1 + left_mid * p2 + left_most * p3) / totalWeight;
 8001164:	69f8      	ldr	r0, [r7, #28]
 8001166:	f7ff f955 	bl	8000414 <__aeabi_f2d>
 800116a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800116e:	f7ff f9a9 	bl	80004c4 <__aeabi_dmul>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4614      	mov	r4, r2
 8001178:	461d      	mov	r5, r3
 800117a:	69b8      	ldr	r0, [r7, #24]
 800117c:	f7ff f94a 	bl	8000414 <__aeabi_f2d>
 8001180:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001184:	f7ff f99e 	bl	80004c4 <__aeabi_dmul>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4620      	mov	r0, r4
 800118e:	4629      	mov	r1, r5
 8001190:	f7fe ffe2 	bl	8000158 <__adddf3>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4614      	mov	r4, r2
 800119a:	461d      	mov	r5, r3
 800119c:	6978      	ldr	r0, [r7, #20]
 800119e:	f7ff f939 	bl	8000414 <__aeabi_f2d>
 80011a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80011a6:	f7ff f98d 	bl	80004c4 <__aeabi_dmul>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4620      	mov	r0, r4
 80011b0:	4629      	mov	r1, r5
 80011b2:	f7fe ffd1 	bl	8000158 <__adddf3>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4614      	mov	r4, r2
 80011bc:	461d      	mov	r5, r3
 80011be:	6938      	ldr	r0, [r7, #16]
 80011c0:	f7ff f928 	bl	8000414 <__aeabi_f2d>
 80011c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011c8:	f7ff f97c 	bl	80004c4 <__aeabi_dmul>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4620      	mov	r0, r4
 80011d2:	4629      	mov	r1, r5
 80011d4:	f7fe ffc0 	bl	8000158 <__adddf3>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80011e4:	f7ff fa98 	bl	8000718 <__aeabi_ddiv>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fc02 	bl	80009f8 <__aeabi_d2f>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a07      	ldr	r2, [pc, #28]	@ (8001214 <position_decoder+0x150>)
 80011f8:	6013      	str	r3, [r2, #0]
}
 80011fa:	bf00      	nop
 80011fc:	3748      	adds	r7, #72	@ 0x48
 80011fe:	46bd      	mov	sp, r7
 8001200:	bdb0      	pop	{r4, r5, r7, pc}
 8001202:	bf00      	nop
 8001204:	41a80000 	.word	0x41a80000
 8001208:	42280000 	.word	0x42280000
 800120c:	42780000 	.word	0x42780000
 8001210:	3ff00000 	.word	0x3ff00000
 8001214:	20000170 	.word	0x20000170

08001218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800121c:	b091      	sub	sp, #68	@ 0x44
 800121e:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001220:	f000 ffb6 	bl	8002190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001224:	f000 fc0e 	bl	8001a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001228:	f000 fd90 	bl	8001d4c <MX_GPIO_Init>
  MX_I2C1_Init();
 800122c:	f000 fc46 	bl	8001abc <MX_I2C1_Init>
  MX_TIM2_Init();
 8001230:	f000 fd12 	bl	8001c58 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001234:	f000 fc70 	bl	8001b18 <MX_TIM1_Init>
	  uint16_t byte;
  };
  */

  /* Mux Config register configuration */
  uint16_t AUTOSCAN_EN = 0b1 << 15;
 8001238:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800123c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t RR_SEQUENCE = 0b10 << 13;
 800123e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001242:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint16_t RESERVED = 0b0001000001 << 3;
 8001244:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8001248:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t DEGLITCH = 0b101 << 0;
 800124a:	2305      	movs	r3, #5
 800124c:	843b      	strh	r3, [r7, #32]

  mux_config_reg = AUTOSCAN_EN | RR_SEQUENCE | RESERVED | DEGLITCH;
 800124e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001250:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001252:	4313      	orrs	r3, r2
 8001254:	b29a      	uxth	r2, r3
 8001256:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001258:	4313      	orrs	r3, r2
 800125a:	b29a      	uxth	r2, r3
 800125c:	8c3b      	ldrh	r3, [r7, #32]
 800125e:	4313      	orrs	r3, r2
 8001260:	b29a      	uxth	r2, r3
 8001262:	4bb8      	ldr	r3, [pc, #736]	@ (8001544 <main+0x32c>)
 8001264:	801a      	strh	r2, [r3, #0]

  // Store it in the buffer for transmission
  buf[0] = (mux_config_reg >> 8) & 0xFF;
 8001266:	4bb7      	ldr	r3, [pc, #732]	@ (8001544 <main+0x32c>)
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	0a1b      	lsrs	r3, r3, #8
 800126c:	b29b      	uxth	r3, r3
 800126e:	b2da      	uxtb	r2, r3
 8001270:	4bb5      	ldr	r3, [pc, #724]	@ (8001548 <main+0x330>)
 8001272:	701a      	strb	r2, [r3, #0]
  buf[1] = mux_config_reg & 0xFF;
 8001274:	4bb3      	ldr	r3, [pc, #716]	@ (8001544 <main+0x32c>)
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4bb3      	ldr	r3, [pc, #716]	@ (8001548 <main+0x330>)
 800127c:	705a      	strb	r2, [r3, #1]
  // Send the buffer over
  hal_status = HAL_I2C_Mem_Write(&hi2c1, LDC_I2C_ADDR, MUX_CONFIG_ADDR, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 800127e:	2354      	movs	r3, #84	@ 0x54
 8001280:	4619      	mov	r1, r3
 8001282:	231b      	movs	r3, #27
 8001284:	461a      	mov	r2, r3
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	2302      	movs	r3, #2
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	4bad      	ldr	r3, [pc, #692]	@ (8001548 <main+0x330>)
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2301      	movs	r3, #1
 8001296:	48ad      	ldr	r0, [pc, #692]	@ (800154c <main+0x334>)
 8001298:	f001 fbe2 	bl	8002a60 <HAL_I2C_Mem_Write>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	4bab      	ldr	r3, [pc, #684]	@ (8001550 <main+0x338>)
 80012a2:	701a      	strb	r2, [r3, #0]

  /* Resolution configuration */
  uint16_t max_res = 0xFFFF;
 80012a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012a8:	83fb      	strh	r3, [r7, #30]
  buf[0] = (max_res >> 8) & 0xFF;
 80012aa:	8bfb      	ldrh	r3, [r7, #30]
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4ba5      	ldr	r3, [pc, #660]	@ (8001548 <main+0x330>)
 80012b4:	701a      	strb	r2, [r3, #0]
  buf[1] = max_res & 0xFF;
 80012b6:	8bfb      	ldrh	r3, [r7, #30]
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4ba3      	ldr	r3, [pc, #652]	@ (8001548 <main+0x330>)
 80012bc:	705a      	strb	r2, [r3, #1]
  hal_status = HAL_I2C_Mem_Write(&hi2c1, LDC_I2C_ADDR, RCOUNT0, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 80012be:	2354      	movs	r3, #84	@ 0x54
 80012c0:	4619      	mov	r1, r3
 80012c2:	2308      	movs	r3, #8
 80012c4:	461a      	mov	r2, r3
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	2302      	movs	r3, #2
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	4b9d      	ldr	r3, [pc, #628]	@ (8001548 <main+0x330>)
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2301      	movs	r3, #1
 80012d6:	489d      	ldr	r0, [pc, #628]	@ (800154c <main+0x334>)
 80012d8:	f001 fbc2 	bl	8002a60 <HAL_I2C_Mem_Write>
 80012dc:	4603      	mov	r3, r0
 80012de:	461a      	mov	r2, r3
 80012e0:	4b9b      	ldr	r3, [pc, #620]	@ (8001550 <main+0x338>)
 80012e2:	701a      	strb	r2, [r3, #0]
  hal_status = HAL_I2C_Mem_Write(&hi2c1, LDC_I2C_ADDR, RCOUNT1, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 80012e4:	2354      	movs	r3, #84	@ 0x54
 80012e6:	4619      	mov	r1, r3
 80012e8:	2309      	movs	r3, #9
 80012ea:	461a      	mov	r2, r3
 80012ec:	f04f 33ff 	mov.w	r3, #4294967295
 80012f0:	9302      	str	r3, [sp, #8]
 80012f2:	2302      	movs	r3, #2
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	4b94      	ldr	r3, [pc, #592]	@ (8001548 <main+0x330>)
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2301      	movs	r3, #1
 80012fc:	4893      	ldr	r0, [pc, #588]	@ (800154c <main+0x334>)
 80012fe:	f001 fbaf 	bl	8002a60 <HAL_I2C_Mem_Write>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	4b92      	ldr	r3, [pc, #584]	@ (8001550 <main+0x338>)
 8001308:	701a      	strb	r2, [r3, #0]
  hal_status = HAL_I2C_Mem_Write(&hi2c1, LDC_I2C_ADDR, RCOUNT2, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 800130a:	2354      	movs	r3, #84	@ 0x54
 800130c:	4619      	mov	r1, r3
 800130e:	230a      	movs	r3, #10
 8001310:	461a      	mov	r2, r3
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
 8001316:	9302      	str	r3, [sp, #8]
 8001318:	2302      	movs	r3, #2
 800131a:	9301      	str	r3, [sp, #4]
 800131c:	4b8a      	ldr	r3, [pc, #552]	@ (8001548 <main+0x330>)
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2301      	movs	r3, #1
 8001322:	488a      	ldr	r0, [pc, #552]	@ (800154c <main+0x334>)
 8001324:	f001 fb9c 	bl	8002a60 <HAL_I2C_Mem_Write>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	4b88      	ldr	r3, [pc, #544]	@ (8001550 <main+0x338>)
 800132e:	701a      	strb	r2, [r3, #0]
  hal_status = HAL_I2C_Mem_Write(&hi2c1, LDC_I2C_ADDR, RCOUNT3, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 8001330:	2354      	movs	r3, #84	@ 0x54
 8001332:	4619      	mov	r1, r3
 8001334:	230b      	movs	r3, #11
 8001336:	461a      	mov	r2, r3
 8001338:	f04f 33ff 	mov.w	r3, #4294967295
 800133c:	9302      	str	r3, [sp, #8]
 800133e:	2302      	movs	r3, #2
 8001340:	9301      	str	r3, [sp, #4]
 8001342:	4b81      	ldr	r3, [pc, #516]	@ (8001548 <main+0x330>)
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	2301      	movs	r3, #1
 8001348:	4880      	ldr	r0, [pc, #512]	@ (800154c <main+0x334>)
 800134a:	f001 fb89 	bl	8002a60 <HAL_I2C_Mem_Write>
 800134e:	4603      	mov	r3, r0
 8001350:	461a      	mov	r2, r3
 8001352:	4b7f      	ldr	r3, [pc, #508]	@ (8001550 <main+0x338>)
 8001354:	701a      	strb	r2, [r3, #0]


  /* Setting the Settling Time */
  uint16_t settling_time = 0x0014;
 8001356:	2314      	movs	r3, #20
 8001358:	83bb      	strh	r3, [r7, #28]
  buf[0] = (settling_time >> 8) & 0xFF;
 800135a:	8bbb      	ldrh	r3, [r7, #28]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	b29b      	uxth	r3, r3
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4b79      	ldr	r3, [pc, #484]	@ (8001548 <main+0x330>)
 8001364:	701a      	strb	r2, [r3, #0]
  buf[1] = settling_time & 0xFF;
 8001366:	8bbb      	ldrh	r3, [r7, #28]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4b77      	ldr	r3, [pc, #476]	@ (8001548 <main+0x330>)
 800136c:	705a      	strb	r2, [r3, #1]
  hal_status = HAL_I2C_Mem_Write(&hi2c1, LDC_I2C_ADDR, SETTLECOUNT0, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 800136e:	2354      	movs	r3, #84	@ 0x54
 8001370:	4619      	mov	r1, r3
 8001372:	2310      	movs	r3, #16
 8001374:	461a      	mov	r2, r3
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	9302      	str	r3, [sp, #8]
 800137c:	2302      	movs	r3, #2
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	4b71      	ldr	r3, [pc, #452]	@ (8001548 <main+0x330>)
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2301      	movs	r3, #1
 8001386:	4871      	ldr	r0, [pc, #452]	@ (800154c <main+0x334>)
 8001388:	f001 fb6a 	bl	8002a60 <HAL_I2C_Mem_Write>
 800138c:	4603      	mov	r3, r0
 800138e:	461a      	mov	r2, r3
 8001390:	4b6f      	ldr	r3, [pc, #444]	@ (8001550 <main+0x338>)
 8001392:	701a      	strb	r2, [r3, #0]
  hal_status = HAL_I2C_Mem_Write(&hi2c1, LDC_I2C_ADDR, SETTLECOUNT1, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 8001394:	2354      	movs	r3, #84	@ 0x54
 8001396:	4619      	mov	r1, r3
 8001398:	2311      	movs	r3, #17
 800139a:	461a      	mov	r2, r3
 800139c:	f04f 33ff 	mov.w	r3, #4294967295
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	2302      	movs	r3, #2
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	4b68      	ldr	r3, [pc, #416]	@ (8001548 <main+0x330>)
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2301      	movs	r3, #1
 80013ac:	4867      	ldr	r0, [pc, #412]	@ (800154c <main+0x334>)
 80013ae:	f001 fb57 	bl	8002a60 <HAL_I2C_Mem_Write>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b66      	ldr	r3, [pc, #408]	@ (8001550 <main+0x338>)
 80013b8:	701a      	strb	r2, [r3, #0]
  hal_status = HAL_I2C_Mem_Write(&hi2c1, LDC_I2C_ADDR, SETTLECOUNT2, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 80013ba:	2354      	movs	r3, #84	@ 0x54
 80013bc:	4619      	mov	r1, r3
 80013be:	2312      	movs	r3, #18
 80013c0:	461a      	mov	r2, r3
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	2302      	movs	r3, #2
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	4b5e      	ldr	r3, [pc, #376]	@ (8001548 <main+0x330>)
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2301      	movs	r3, #1
 80013d2:	485e      	ldr	r0, [pc, #376]	@ (800154c <main+0x334>)
 80013d4:	f001 fb44 	bl	8002a60 <HAL_I2C_Mem_Write>
 80013d8:	4603      	mov	r3, r0
 80013da:	461a      	mov	r2, r3
 80013dc:	4b5c      	ldr	r3, [pc, #368]	@ (8001550 <main+0x338>)
 80013de:	701a      	strb	r2, [r3, #0]
  hal_status = HAL_I2C_Mem_Write(&hi2c1, LDC_I2C_ADDR, SETTLECOUNT3, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 80013e0:	2354      	movs	r3, #84	@ 0x54
 80013e2:	4619      	mov	r1, r3
 80013e4:	2313      	movs	r3, #19
 80013e6:	461a      	mov	r2, r3
 80013e8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ec:	9302      	str	r3, [sp, #8]
 80013ee:	2302      	movs	r3, #2
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	4b55      	ldr	r3, [pc, #340]	@ (8001548 <main+0x330>)
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	2301      	movs	r3, #1
 80013f8:	4854      	ldr	r0, [pc, #336]	@ (800154c <main+0x334>)
 80013fa:	f001 fb31 	bl	8002a60 <HAL_I2C_Mem_Write>
 80013fe:	4603      	mov	r3, r0
 8001400:	461a      	mov	r2, r3
 8001402:	4b53      	ldr	r3, [pc, #332]	@ (8001550 <main+0x338>)
 8001404:	701a      	strb	r2, [r3, #0]

  /* CLOCK_DIVIDERS configuration */
  uint16_t clock_divider = 0x1001;
 8001406:	f241 0301 	movw	r3, #4097	@ 0x1001
 800140a:	837b      	strh	r3, [r7, #26]
  buf[0] = (clock_divider >> 8) & 0xFF;
 800140c:	8b7b      	ldrh	r3, [r7, #26]
 800140e:	0a1b      	lsrs	r3, r3, #8
 8001410:	b29b      	uxth	r3, r3
 8001412:	b2da      	uxtb	r2, r3
 8001414:	4b4c      	ldr	r3, [pc, #304]	@ (8001548 <main+0x330>)
 8001416:	701a      	strb	r2, [r3, #0]
  buf[1] = clock_divider & 0xFF;
 8001418:	8b7b      	ldrh	r3, [r7, #26]
 800141a:	b2da      	uxtb	r2, r3
 800141c:	4b4a      	ldr	r3, [pc, #296]	@ (8001548 <main+0x330>)
 800141e:	705a      	strb	r2, [r3, #1]
  hal_status = HAL_I2C_Mem_Write(&hi2c1, LDC_I2C_ADDR, CLOCK_DIVIDERS0, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 8001420:	2354      	movs	r3, #84	@ 0x54
 8001422:	4619      	mov	r1, r3
 8001424:	2314      	movs	r3, #20
 8001426:	461a      	mov	r2, r3
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
 800142c:	9302      	str	r3, [sp, #8]
 800142e:	2302      	movs	r3, #2
 8001430:	9301      	str	r3, [sp, #4]
 8001432:	4b45      	ldr	r3, [pc, #276]	@ (8001548 <main+0x330>)
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	2301      	movs	r3, #1
 8001438:	4844      	ldr	r0, [pc, #272]	@ (800154c <main+0x334>)
 800143a:	f001 fb11 	bl	8002a60 <HAL_I2C_Mem_Write>
 800143e:	4603      	mov	r3, r0
 8001440:	461a      	mov	r2, r3
 8001442:	4b43      	ldr	r3, [pc, #268]	@ (8001550 <main+0x338>)
 8001444:	701a      	strb	r2, [r3, #0]
  hal_status = HAL_I2C_Mem_Write(&hi2c1, LDC_I2C_ADDR, CLOCK_DIVIDERS1, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 8001446:	2354      	movs	r3, #84	@ 0x54
 8001448:	4619      	mov	r1, r3
 800144a:	2315      	movs	r3, #21
 800144c:	461a      	mov	r2, r3
 800144e:	f04f 33ff 	mov.w	r3, #4294967295
 8001452:	9302      	str	r3, [sp, #8]
 8001454:	2302      	movs	r3, #2
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	4b3b      	ldr	r3, [pc, #236]	@ (8001548 <main+0x330>)
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2301      	movs	r3, #1
 800145e:	483b      	ldr	r0, [pc, #236]	@ (800154c <main+0x334>)
 8001460:	f001 fafe 	bl	8002a60 <HAL_I2C_Mem_Write>
 8001464:	4603      	mov	r3, r0
 8001466:	461a      	mov	r2, r3
 8001468:	4b39      	ldr	r3, [pc, #228]	@ (8001550 <main+0x338>)
 800146a:	701a      	strb	r2, [r3, #0]
  hal_status = HAL_I2C_Mem_Write(&hi2c1, LDC_I2C_ADDR, CLOCK_DIVIDERS2, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 800146c:	2354      	movs	r3, #84	@ 0x54
 800146e:	4619      	mov	r1, r3
 8001470:	2316      	movs	r3, #22
 8001472:	461a      	mov	r2, r3
 8001474:	f04f 33ff 	mov.w	r3, #4294967295
 8001478:	9302      	str	r3, [sp, #8]
 800147a:	2302      	movs	r3, #2
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	4b32      	ldr	r3, [pc, #200]	@ (8001548 <main+0x330>)
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2301      	movs	r3, #1
 8001484:	4831      	ldr	r0, [pc, #196]	@ (800154c <main+0x334>)
 8001486:	f001 faeb 	bl	8002a60 <HAL_I2C_Mem_Write>
 800148a:	4603      	mov	r3, r0
 800148c:	461a      	mov	r2, r3
 800148e:	4b30      	ldr	r3, [pc, #192]	@ (8001550 <main+0x338>)
 8001490:	701a      	strb	r2, [r3, #0]
  hal_status = HAL_I2C_Mem_Write(&hi2c1, LDC_I2C_ADDR, CLOCK_DIVIDERS3, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 8001492:	2354      	movs	r3, #84	@ 0x54
 8001494:	4619      	mov	r1, r3
 8001496:	2317      	movs	r3, #23
 8001498:	461a      	mov	r2, r3
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	9302      	str	r3, [sp, #8]
 80014a0:	2302      	movs	r3, #2
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	4b28      	ldr	r3, [pc, #160]	@ (8001548 <main+0x330>)
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2301      	movs	r3, #1
 80014aa:	4828      	ldr	r0, [pc, #160]	@ (800154c <main+0x334>)
 80014ac:	f001 fad8 	bl	8002a60 <HAL_I2C_Mem_Write>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b26      	ldr	r3, [pc, #152]	@ (8001550 <main+0x338>)
 80014b6:	701a      	strb	r2, [r3, #0]

  /* DRIVE CURRENT configuration */
  uint16_t IDRIVE = 0b11011 << 11;
 80014b8:	f44f 4358 	mov.w	r3, #55296	@ 0xd800
 80014bc:	833b      	strh	r3, [r7, #24]
  uint16_t INIT_IDRIVE = 0b00000 << 6;
 80014be:	2300      	movs	r3, #0
 80014c0:	82fb      	strh	r3, [r7, #22]
  uint16_t DR_RESERVED = 0b000000 << 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	82bb      	strh	r3, [r7, #20]

  uint16_t drive_cur_reg = drive_cur_reg = IDRIVE | INIT_IDRIVE | DR_RESERVED;
 80014c6:	8b3a      	ldrh	r2, [r7, #24]
 80014c8:	8afb      	ldrh	r3, [r7, #22]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	8abb      	ldrh	r3, [r7, #20]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	827b      	strh	r3, [r7, #18]

  buf[0] = (drive_cur_reg >> 8) & 0xFF;
 80014d4:	8a7b      	ldrh	r3, [r7, #18]
 80014d6:	0a1b      	lsrs	r3, r3, #8
 80014d8:	b29b      	uxth	r3, r3
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <main+0x330>)
 80014de:	701a      	strb	r2, [r3, #0]
  buf[1] = drive_cur_reg & 0xFF;
 80014e0:	8a7b      	ldrh	r3, [r7, #18]
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <main+0x330>)
 80014e6:	705a      	strb	r2, [r3, #1]
  hal_status = HAL_I2C_Mem_Write(&hi2c1, LDC_I2C_ADDR, DRIVE_CURRENT0, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 80014e8:	2354      	movs	r3, #84	@ 0x54
 80014ea:	4619      	mov	r1, r3
 80014ec:	231e      	movs	r3, #30
 80014ee:	461a      	mov	r2, r3
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295
 80014f4:	9302      	str	r3, [sp, #8]
 80014f6:	2302      	movs	r3, #2
 80014f8:	9301      	str	r3, [sp, #4]
 80014fa:	4b13      	ldr	r3, [pc, #76]	@ (8001548 <main+0x330>)
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	2301      	movs	r3, #1
 8001500:	4812      	ldr	r0, [pc, #72]	@ (800154c <main+0x334>)
 8001502:	f001 faad 	bl	8002a60 <HAL_I2C_Mem_Write>
 8001506:	4603      	mov	r3, r0
 8001508:	461a      	mov	r2, r3
 800150a:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <main+0x338>)
 800150c:	701a      	strb	r2, [r3, #0]
  hal_status = HAL_I2C_Mem_Write(&hi2c1, LDC_I2C_ADDR, DRIVE_CURRENT1, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 800150e:	2354      	movs	r3, #84	@ 0x54
 8001510:	4619      	mov	r1, r3
 8001512:	231f      	movs	r3, #31
 8001514:	461a      	mov	r2, r3
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 800151a:	9302      	str	r3, [sp, #8]
 800151c:	2302      	movs	r3, #2
 800151e:	9301      	str	r3, [sp, #4]
 8001520:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <main+0x330>)
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	2301      	movs	r3, #1
 8001526:	4809      	ldr	r0, [pc, #36]	@ (800154c <main+0x334>)
 8001528:	f001 fa9a 	bl	8002a60 <HAL_I2C_Mem_Write>
 800152c:	4603      	mov	r3, r0
 800152e:	461a      	mov	r2, r3
 8001530:	4b07      	ldr	r3, [pc, #28]	@ (8001550 <main+0x338>)
 8001532:	701a      	strb	r2, [r3, #0]
  hal_status = HAL_I2C_Mem_Write(&hi2c1, LDC_I2C_ADDR, DRIVE_CURRENT2, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 8001534:	2354      	movs	r3, #84	@ 0x54
 8001536:	4619      	mov	r1, r3
 8001538:	2320      	movs	r3, #32
 800153a:	461a      	mov	r2, r3
 800153c:	f04f 33ff 	mov.w	r3, #4294967295
 8001540:	e008      	b.n	8001554 <main+0x33c>
 8001542:	bf00      	nop
 8001544:	2000017a 	.word	0x2000017a
 8001548:	20000114 	.word	0x20000114
 800154c:	2000002c 	.word	0x2000002c
 8001550:	20000110 	.word	0x20000110
 8001554:	9302      	str	r3, [sp, #8]
 8001556:	2302      	movs	r3, #2
 8001558:	9301      	str	r3, [sp, #4]
 800155a:	4ba8      	ldr	r3, [pc, #672]	@ (80017fc <main+0x5e4>)
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	2301      	movs	r3, #1
 8001560:	48a7      	ldr	r0, [pc, #668]	@ (8001800 <main+0x5e8>)
 8001562:	f001 fa7d 	bl	8002a60 <HAL_I2C_Mem_Write>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	4ba6      	ldr	r3, [pc, #664]	@ (8001804 <main+0x5ec>)
 800156c:	701a      	strb	r2, [r3, #0]
  hal_status = HAL_I2C_Mem_Write(&hi2c1, LDC_I2C_ADDR, DRIVE_CURRENT3, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 800156e:	2354      	movs	r3, #84	@ 0x54
 8001570:	4619      	mov	r1, r3
 8001572:	2321      	movs	r3, #33	@ 0x21
 8001574:	461a      	mov	r2, r3
 8001576:	f04f 33ff 	mov.w	r3, #4294967295
 800157a:	9302      	str	r3, [sp, #8]
 800157c:	2302      	movs	r3, #2
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	4b9e      	ldr	r3, [pc, #632]	@ (80017fc <main+0x5e4>)
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2301      	movs	r3, #1
 8001586:	489e      	ldr	r0, [pc, #632]	@ (8001800 <main+0x5e8>)
 8001588:	f001 fa6a 	bl	8002a60 <HAL_I2C_Mem_Write>
 800158c:	4603      	mov	r3, r0
 800158e:	461a      	mov	r2, r3
 8001590:	4b9c      	ldr	r3, [pc, #624]	@ (8001804 <main+0x5ec>)
 8001592:	701a      	strb	r2, [r3, #0]

  /* Config register configuration */
  uint16_t SLEEP_MODE_EN = 0b1 << 13;
 8001594:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001598:	823b      	strh	r3, [r7, #16]
  uint16_t RP_OVERRIDE_EN = 0b1 << 12;
 800159a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800159e:	81fb      	strh	r3, [r7, #14]
  uint16_t SENSOR_ACTIVATE_SEL = 0b1 << 11;
 80015a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015a4:	81bb      	strh	r3, [r7, #12]

  // read register
  hal_status = HAL_I2C_Mem_Read(&hi2c1, LDC_I2C_ADDR, CONFIG_ADDR, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 80015a6:	2354      	movs	r3, #84	@ 0x54
 80015a8:	4619      	mov	r1, r3
 80015aa:	231a      	movs	r3, #26
 80015ac:	461a      	mov	r2, r3
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
 80015b2:	9302      	str	r3, [sp, #8]
 80015b4:	2302      	movs	r3, #2
 80015b6:	9301      	str	r3, [sp, #4]
 80015b8:	4b90      	ldr	r3, [pc, #576]	@ (80017fc <main+0x5e4>)
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	2301      	movs	r3, #1
 80015be:	4890      	ldr	r0, [pc, #576]	@ (8001800 <main+0x5e8>)
 80015c0:	f001 fb48 	bl	8002c54 <HAL_I2C_Mem_Read>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b8e      	ldr	r3, [pc, #568]	@ (8001804 <main+0x5ec>)
 80015ca:	701a      	strb	r2, [r3, #0]
  if (hal_status == HAL_OK) {
 80015cc:	4b8d      	ldr	r3, [pc, #564]	@ (8001804 <main+0x5ec>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10b      	bne.n	80015ec <main+0x3d4>
	  config_reg = (uint16_t)buf[0] << 8 | (buf[1]);
 80015d4:	4b89      	ldr	r3, [pc, #548]	@ (80017fc <main+0x5e4>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	b21a      	sxth	r2, r3
 80015dc:	4b87      	ldr	r3, [pc, #540]	@ (80017fc <main+0x5e4>)
 80015de:	785b      	ldrb	r3, [r3, #1]
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	4313      	orrs	r3, r2
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	4b87      	ldr	r3, [pc, #540]	@ (8001808 <main+0x5f0>)
 80015ea:	801a      	strh	r2, [r3, #0]
  } else {}
  // Store it in the buffer for transmission
  CLEAR_BIT(config_reg, SENSOR_ACTIVATE_SEL);
 80015ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	b21a      	sxth	r2, r3
 80015f4:	4b84      	ldr	r3, [pc, #528]	@ (8001808 <main+0x5f0>)
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	4013      	ands	r3, r2
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	b29a      	uxth	r2, r3
 8001600:	4b81      	ldr	r3, [pc, #516]	@ (8001808 <main+0x5f0>)
 8001602:	801a      	strh	r2, [r3, #0]
  CLEAR_BIT(config_reg, SLEEP_MODE_EN);
 8001604:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001608:	43db      	mvns	r3, r3
 800160a:	b21a      	sxth	r2, r3
 800160c:	4b7e      	ldr	r3, [pc, #504]	@ (8001808 <main+0x5f0>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	b21b      	sxth	r3, r3
 8001612:	4013      	ands	r3, r2
 8001614:	b21b      	sxth	r3, r3
 8001616:	b29a      	uxth	r2, r3
 8001618:	4b7b      	ldr	r3, [pc, #492]	@ (8001808 <main+0x5f0>)
 800161a:	801a      	strh	r2, [r3, #0]
  SET_BIT(config_reg, RP_OVERRIDE_EN);
 800161c:	4b7a      	ldr	r3, [pc, #488]	@ (8001808 <main+0x5f0>)
 800161e:	881a      	ldrh	r2, [r3, #0]
 8001620:	89fb      	ldrh	r3, [r7, #14]
 8001622:	4313      	orrs	r3, r2
 8001624:	b29a      	uxth	r2, r3
 8001626:	4b78      	ldr	r3, [pc, #480]	@ (8001808 <main+0x5f0>)
 8001628:	801a      	strh	r2, [r3, #0]

  buf[0] = (config_reg >> 8) & 0xFF;
 800162a:	4b77      	ldr	r3, [pc, #476]	@ (8001808 <main+0x5f0>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	0a1b      	lsrs	r3, r3, #8
 8001630:	b29b      	uxth	r3, r3
 8001632:	b2da      	uxtb	r2, r3
 8001634:	4b71      	ldr	r3, [pc, #452]	@ (80017fc <main+0x5e4>)
 8001636:	701a      	strb	r2, [r3, #0]
  buf[1] = config_reg & 0xFF;
 8001638:	4b73      	ldr	r3, [pc, #460]	@ (8001808 <main+0x5f0>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4b6f      	ldr	r3, [pc, #444]	@ (80017fc <main+0x5e4>)
 8001640:	705a      	strb	r2, [r3, #1]

  hal_status = HAL_I2C_Mem_Write(&hi2c1, LDC_I2C_ADDR, CONFIG_ADDR, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 8001642:	2354      	movs	r3, #84	@ 0x54
 8001644:	4619      	mov	r1, r3
 8001646:	231a      	movs	r3, #26
 8001648:	461a      	mov	r2, r3
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
 800164e:	9302      	str	r3, [sp, #8]
 8001650:	2302      	movs	r3, #2
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	4b69      	ldr	r3, [pc, #420]	@ (80017fc <main+0x5e4>)
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2301      	movs	r3, #1
 800165a:	4869      	ldr	r0, [pc, #420]	@ (8001800 <main+0x5e8>)
 800165c:	f001 fa00 	bl	8002a60 <HAL_I2C_Mem_Write>
 8001660:	4603      	mov	r3, r0
 8001662:	461a      	mov	r2, r3
 8001664:	4b67      	ldr	r3, [pc, #412]	@ (8001804 <main+0x5ec>)
 8001666:	701a      	strb	r2, [r3, #0]

  /* Interrupt Setup */
  uint16_t DRDY_2INT = 0b1 << 0;
 8001668:	2301      	movs	r3, #1
 800166a:	817b      	strh	r3, [r7, #10]
  uint16_t error_config_reg = DRDY_2INT;
 800166c:	897b      	ldrh	r3, [r7, #10]
 800166e:	813b      	strh	r3, [r7, #8]
  buf[0] = (error_config_reg >> 8) & 0xFF;
 8001670:	893b      	ldrh	r3, [r7, #8]
 8001672:	0a1b      	lsrs	r3, r3, #8
 8001674:	b29b      	uxth	r3, r3
 8001676:	b2da      	uxtb	r2, r3
 8001678:	4b60      	ldr	r3, [pc, #384]	@ (80017fc <main+0x5e4>)
 800167a:	701a      	strb	r2, [r3, #0]
  buf[1] = error_config_reg & 0xFF;
 800167c:	893b      	ldrh	r3, [r7, #8]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	4b5e      	ldr	r3, [pc, #376]	@ (80017fc <main+0x5e4>)
 8001682:	705a      	strb	r2, [r3, #1]
  hal_status = HAL_I2C_Mem_Write(&hi2c1, LDC_I2C_ADDR, ERROR_CONFIG, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 8001684:	2354      	movs	r3, #84	@ 0x54
 8001686:	4619      	mov	r1, r3
 8001688:	2319      	movs	r3, #25
 800168a:	461a      	mov	r2, r3
 800168c:	f04f 33ff 	mov.w	r3, #4294967295
 8001690:	9302      	str	r3, [sp, #8]
 8001692:	2302      	movs	r3, #2
 8001694:	9301      	str	r3, [sp, #4]
 8001696:	4b59      	ldr	r3, [pc, #356]	@ (80017fc <main+0x5e4>)
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	2301      	movs	r3, #1
 800169c:	4858      	ldr	r0, [pc, #352]	@ (8001800 <main+0x5e8>)
 800169e:	f001 f9df 	bl	8002a60 <HAL_I2C_Mem_Write>
 80016a2:	4603      	mov	r3, r0
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b57      	ldr	r3, [pc, #348]	@ (8001804 <main+0x5ec>)
 80016a8:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* Read registers before looping */
  hal_status = HAL_I2C_Mem_Read(&hi2c1, LDC_I2C_ADDR, MUX_CONFIG_ADDR, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 80016aa:	2354      	movs	r3, #84	@ 0x54
 80016ac:	4619      	mov	r1, r3
 80016ae:	231b      	movs	r3, #27
 80016b0:	461a      	mov	r2, r3
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	9302      	str	r3, [sp, #8]
 80016b8:	2302      	movs	r3, #2
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	4b4f      	ldr	r3, [pc, #316]	@ (80017fc <main+0x5e4>)
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	2301      	movs	r3, #1
 80016c2:	484f      	ldr	r0, [pc, #316]	@ (8001800 <main+0x5e8>)
 80016c4:	f001 fac6 	bl	8002c54 <HAL_I2C_Mem_Read>
 80016c8:	4603      	mov	r3, r0
 80016ca:	461a      	mov	r2, r3
 80016cc:	4b4d      	ldr	r3, [pc, #308]	@ (8001804 <main+0x5ec>)
 80016ce:	701a      	strb	r2, [r3, #0]
  mux_config_reg = (uint16_t)buf[0] << 8 | (buf[1]);
 80016d0:	4b4a      	ldr	r3, [pc, #296]	@ (80017fc <main+0x5e4>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	b21a      	sxth	r2, r3
 80016d8:	4b48      	ldr	r3, [pc, #288]	@ (80017fc <main+0x5e4>)
 80016da:	785b      	ldrb	r3, [r3, #1]
 80016dc:	b21b      	sxth	r3, r3
 80016de:	4313      	orrs	r3, r2
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	4b49      	ldr	r3, [pc, #292]	@ (800180c <main+0x5f4>)
 80016e6:	801a      	strh	r2, [r3, #0]
  hal_status = HAL_I2C_Mem_Read(&hi2c1, LDC_I2C_ADDR, CONFIG_ADDR, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 80016e8:	2354      	movs	r3, #84	@ 0x54
 80016ea:	4619      	mov	r1, r3
 80016ec:	231a      	movs	r3, #26
 80016ee:	461a      	mov	r2, r3
 80016f0:	f04f 33ff 	mov.w	r3, #4294967295
 80016f4:	9302      	str	r3, [sp, #8]
 80016f6:	2302      	movs	r3, #2
 80016f8:	9301      	str	r3, [sp, #4]
 80016fa:	4b40      	ldr	r3, [pc, #256]	@ (80017fc <main+0x5e4>)
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	2301      	movs	r3, #1
 8001700:	483f      	ldr	r0, [pc, #252]	@ (8001800 <main+0x5e8>)
 8001702:	f001 faa7 	bl	8002c54 <HAL_I2C_Mem_Read>
 8001706:	4603      	mov	r3, r0
 8001708:	461a      	mov	r2, r3
 800170a:	4b3e      	ldr	r3, [pc, #248]	@ (8001804 <main+0x5ec>)
 800170c:	701a      	strb	r2, [r3, #0]
  config_reg = (uint16_t)buf[0] << 8 | (buf[1]);
 800170e:	4b3b      	ldr	r3, [pc, #236]	@ (80017fc <main+0x5e4>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	b21a      	sxth	r2, r3
 8001716:	4b39      	ldr	r3, [pc, #228]	@ (80017fc <main+0x5e4>)
 8001718:	785b      	ldrb	r3, [r3, #1]
 800171a:	b21b      	sxth	r3, r3
 800171c:	4313      	orrs	r3, r2
 800171e:	b21b      	sxth	r3, r3
 8001720:	b29a      	uxth	r2, r3
 8001722:	4b39      	ldr	r3, [pc, #228]	@ (8001808 <main+0x5f0>)
 8001724:	801a      	strh	r2, [r3, #0]
  hal_status = HAL_I2C_Mem_Read(&hi2c1, LDC_I2C_ADDR, RCOUNT0, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 8001726:	2354      	movs	r3, #84	@ 0x54
 8001728:	4619      	mov	r1, r3
 800172a:	2308      	movs	r3, #8
 800172c:	461a      	mov	r2, r3
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	9302      	str	r3, [sp, #8]
 8001734:	2302      	movs	r3, #2
 8001736:	9301      	str	r3, [sp, #4]
 8001738:	4b30      	ldr	r3, [pc, #192]	@ (80017fc <main+0x5e4>)
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	2301      	movs	r3, #1
 800173e:	4830      	ldr	r0, [pc, #192]	@ (8001800 <main+0x5e8>)
 8001740:	f001 fa88 	bl	8002c54 <HAL_I2C_Mem_Read>
 8001744:	4603      	mov	r3, r0
 8001746:	461a      	mov	r2, r3
 8001748:	4b2e      	ldr	r3, [pc, #184]	@ (8001804 <main+0x5ec>)
 800174a:	701a      	strb	r2, [r3, #0]
  rcountX = (uint16_t)buf[0] << 8 | (buf[1]);
 800174c:	4b2b      	ldr	r3, [pc, #172]	@ (80017fc <main+0x5e4>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	b21a      	sxth	r2, r3
 8001754:	4b29      	ldr	r3, [pc, #164]	@ (80017fc <main+0x5e4>)
 8001756:	785b      	ldrb	r3, [r3, #1]
 8001758:	b21b      	sxth	r3, r3
 800175a:	4313      	orrs	r3, r2
 800175c:	b21b      	sxth	r3, r3
 800175e:	b29a      	uxth	r2, r3
 8001760:	4b2b      	ldr	r3, [pc, #172]	@ (8001810 <main+0x5f8>)
 8001762:	801a      	strh	r2, [r3, #0]
  hal_status = HAL_I2C_Mem_Read(&hi2c1, LDC_I2C_ADDR, CLOCK_DIVIDERS0, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 8001764:	2354      	movs	r3, #84	@ 0x54
 8001766:	4619      	mov	r1, r3
 8001768:	2314      	movs	r3, #20
 800176a:	461a      	mov	r2, r3
 800176c:	f04f 33ff 	mov.w	r3, #4294967295
 8001770:	9302      	str	r3, [sp, #8]
 8001772:	2302      	movs	r3, #2
 8001774:	9301      	str	r3, [sp, #4]
 8001776:	4b21      	ldr	r3, [pc, #132]	@ (80017fc <main+0x5e4>)
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	2301      	movs	r3, #1
 800177c:	4820      	ldr	r0, [pc, #128]	@ (8001800 <main+0x5e8>)
 800177e:	f001 fa69 	bl	8002c54 <HAL_I2C_Mem_Read>
 8001782:	4603      	mov	r3, r0
 8001784:	461a      	mov	r2, r3
 8001786:	4b1f      	ldr	r3, [pc, #124]	@ (8001804 <main+0x5ec>)
 8001788:	701a      	strb	r2, [r3, #0]
  clock_dividerX = (uint16_t)buf[0] << 8 | (buf[1]);
 800178a:	4b1c      	ldr	r3, [pc, #112]	@ (80017fc <main+0x5e4>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	b21a      	sxth	r2, r3
 8001792:	4b1a      	ldr	r3, [pc, #104]	@ (80017fc <main+0x5e4>)
 8001794:	785b      	ldrb	r3, [r3, #1]
 8001796:	b21b      	sxth	r3, r3
 8001798:	4313      	orrs	r3, r2
 800179a:	b21b      	sxth	r3, r3
 800179c:	b29a      	uxth	r2, r3
 800179e:	4b1d      	ldr	r3, [pc, #116]	@ (8001814 <main+0x5fc>)
 80017a0:	801a      	strh	r2, [r3, #0]
  hal_status = HAL_I2C_Mem_Read(&hi2c1, LDC_I2C_ADDR, DRIVE_CURRENT0, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 80017a2:	2354      	movs	r3, #84	@ 0x54
 80017a4:	4619      	mov	r1, r3
 80017a6:	231e      	movs	r3, #30
 80017a8:	461a      	mov	r2, r3
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	9302      	str	r3, [sp, #8]
 80017b0:	2302      	movs	r3, #2
 80017b2:	9301      	str	r3, [sp, #4]
 80017b4:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <main+0x5e4>)
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	2301      	movs	r3, #1
 80017ba:	4811      	ldr	r0, [pc, #68]	@ (8001800 <main+0x5e8>)
 80017bc:	f001 fa4a 	bl	8002c54 <HAL_I2C_Mem_Read>
 80017c0:	4603      	mov	r3, r0
 80017c2:	461a      	mov	r2, r3
 80017c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <main+0x5ec>)
 80017c6:	701a      	strb	r2, [r3, #0]
  drive_currentX = (uint16_t)buf[0] << 8 | (buf[1]);
 80017c8:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <main+0x5e4>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	b21a      	sxth	r2, r3
 80017d0:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <main+0x5e4>)
 80017d2:	785b      	ldrb	r3, [r3, #1]
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	4313      	orrs	r3, r2
 80017d8:	b21b      	sxth	r3, r3
 80017da:	b29a      	uxth	r2, r3
 80017dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <main+0x600>)
 80017de:	801a      	strh	r2, [r3, #0]

  hal_status = HAL_I2C_Mem_Read(&hi2c1, LDC_I2C_ADDR, STATUS, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 80017e0:	2354      	movs	r3, #84	@ 0x54
 80017e2:	4619      	mov	r1, r3
 80017e4:	2318      	movs	r3, #24
 80017e6:	461a      	mov	r2, r3
 80017e8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ec:	9302      	str	r3, [sp, #8]
 80017ee:	2302      	movs	r3, #2
 80017f0:	9301      	str	r3, [sp, #4]
 80017f2:	4b02      	ldr	r3, [pc, #8]	@ (80017fc <main+0x5e4>)
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	2301      	movs	r3, #1
 80017f8:	e010      	b.n	800181c <main+0x604>
 80017fa:	bf00      	nop
 80017fc:	20000114 	.word	0x20000114
 8001800:	2000002c 	.word	0x2000002c
 8001804:	20000110 	.word	0x20000110
 8001808:	20000178 	.word	0x20000178
 800180c:	2000017a 	.word	0x2000017a
 8001810:	2000017c 	.word	0x2000017c
 8001814:	2000017e 	.word	0x2000017e
 8001818:	20000180 	.word	0x20000180
 800181c:	4876      	ldr	r0, [pc, #472]	@ (80019f8 <main+0x7e0>)
 800181e:	f001 fa19 	bl	8002c54 <HAL_I2C_Mem_Read>
 8001822:	4603      	mov	r3, r0
 8001824:	461a      	mov	r2, r3
 8001826:	4b75      	ldr	r3, [pc, #468]	@ (80019fc <main+0x7e4>)
 8001828:	701a      	strb	r2, [r3, #0]
  status_reg_read = (uint16_t)buf[0] << 8 | (buf[1]);
 800182a:	4b75      	ldr	r3, [pc, #468]	@ (8001a00 <main+0x7e8>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	b21a      	sxth	r2, r3
 8001832:	4b73      	ldr	r3, [pc, #460]	@ (8001a00 <main+0x7e8>)
 8001834:	785b      	ldrb	r3, [r3, #1]
 8001836:	b21b      	sxth	r3, r3
 8001838:	4313      	orrs	r3, r2
 800183a:	b21b      	sxth	r3, r3
 800183c:	b29a      	uxth	r2, r3
 800183e:	4b71      	ldr	r3, [pc, #452]	@ (8001a04 <main+0x7ec>)
 8001840:	801a      	strh	r2, [r3, #0]
  hal_status = HAL_I2C_Mem_Read(&hi2c1, LDC_I2C_ADDR, ERROR_CONFIG, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 8001842:	2354      	movs	r3, #84	@ 0x54
 8001844:	4619      	mov	r1, r3
 8001846:	2319      	movs	r3, #25
 8001848:	461a      	mov	r2, r3
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
 800184e:	9302      	str	r3, [sp, #8]
 8001850:	2302      	movs	r3, #2
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	4b6a      	ldr	r3, [pc, #424]	@ (8001a00 <main+0x7e8>)
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	2301      	movs	r3, #1
 800185a:	4867      	ldr	r0, [pc, #412]	@ (80019f8 <main+0x7e0>)
 800185c:	f001 f9fa 	bl	8002c54 <HAL_I2C_Mem_Read>
 8001860:	4603      	mov	r3, r0
 8001862:	461a      	mov	r2, r3
 8001864:	4b65      	ldr	r3, [pc, #404]	@ (80019fc <main+0x7e4>)
 8001866:	701a      	strb	r2, [r3, #0]
  error_config_read = (uint16_t)buf[0] << 8 | (buf[1]);
 8001868:	4b65      	ldr	r3, [pc, #404]	@ (8001a00 <main+0x7e8>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	021b      	lsls	r3, r3, #8
 800186e:	b21a      	sxth	r2, r3
 8001870:	4b63      	ldr	r3, [pc, #396]	@ (8001a00 <main+0x7e8>)
 8001872:	785b      	ldrb	r3, [r3, #1]
 8001874:	b21b      	sxth	r3, r3
 8001876:	4313      	orrs	r3, r2
 8001878:	b21b      	sxth	r3, r3
 800187a:	b29a      	uxth	r2, r3
 800187c:	4b62      	ldr	r3, [pc, #392]	@ (8001a08 <main+0x7f0>)
 800187e:	801a      	strh	r2, [r3, #0]

  calibrate();
 8001880:	f7ff fb18 	bl	8000eb4 <calibrate>

  while (1)
  {
	  __NOP();
 8001884:	bf00      	nop
	  __NOP();
 8001886:	bf00      	nop
	  if(data_ready){
 8001888:	4b60      	ldr	r3, [pc, #384]	@ (8001a0c <main+0x7f4>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f9      	beq.n	8001884 <main+0x66c>
		  __NOP();
 8001890:	bf00      	nop
		  __NOP();
 8001892:	bf00      	nop
		  // Read "STATUS" to de-assert the interrupt
		  data_ready = 0;
 8001894:	4b5d      	ldr	r3, [pc, #372]	@ (8001a0c <main+0x7f4>)
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
		  hal_status = HAL_I2C_Mem_Read(&hi2c1, LDC_I2C_ADDR, STATUS, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 800189a:	2354      	movs	r3, #84	@ 0x54
 800189c:	4619      	mov	r1, r3
 800189e:	2318      	movs	r3, #24
 80018a0:	461a      	mov	r2, r3
 80018a2:	f04f 33ff 	mov.w	r3, #4294967295
 80018a6:	9302      	str	r3, [sp, #8]
 80018a8:	2302      	movs	r3, #2
 80018aa:	9301      	str	r3, [sp, #4]
 80018ac:	4b54      	ldr	r3, [pc, #336]	@ (8001a00 <main+0x7e8>)
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	2301      	movs	r3, #1
 80018b2:	4851      	ldr	r0, [pc, #324]	@ (80019f8 <main+0x7e0>)
 80018b4:	f001 f9ce 	bl	8002c54 <HAL_I2C_Mem_Read>
 80018b8:	4603      	mov	r3, r0
 80018ba:	461a      	mov	r2, r3
 80018bc:	4b4f      	ldr	r3, [pc, #316]	@ (80019fc <main+0x7e4>)
 80018be:	701a      	strb	r2, [r3, #0]
		  status_reg_read = (uint16_t)buf[0] << 8 | (buf[1]);
 80018c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001a00 <main+0x7e8>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	b21a      	sxth	r2, r3
 80018c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001a00 <main+0x7e8>)
 80018ca:	785b      	ldrb	r3, [r3, #1]
 80018cc:	b21b      	sxth	r3, r3
 80018ce:	4313      	orrs	r3, r2
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001a04 <main+0x7ec>)
 80018d6:	801a      	strh	r2, [r3, #0]

		  f_sensor0 = Read_DataXbits(DATA0_MSB, DATA0_LSB) - (int32_t)f_sensor0_baseline;
 80018d8:	2300      	movs	r3, #0
 80018da:	2201      	movs	r2, #1
 80018dc:	4611      	mov	r1, r2
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fa88 	bl	8000df4 <Read_DataXbits>
 80018e4:	4601      	mov	r1, r0
 80018e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001a10 <main+0x7f8>)
 80018e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ec:	4613      	mov	r3, r2
 80018ee:	1acb      	subs	r3, r1, r3
 80018f0:	4a48      	ldr	r2, [pc, #288]	@ (8001a14 <main+0x7fc>)
 80018f2:	6013      	str	r3, [r2, #0]
		  f_sensor1 = Read_DataXbits(DATA1_MSB, DATA1_LSB) - (int32_t)f_sensor1_baseline;
 80018f4:	2302      	movs	r3, #2
 80018f6:	2203      	movs	r2, #3
 80018f8:	4611      	mov	r1, r2
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fa7a 	bl	8000df4 <Read_DataXbits>
 8001900:	4601      	mov	r1, r0
 8001902:	4b45      	ldr	r3, [pc, #276]	@ (8001a18 <main+0x800>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	4613      	mov	r3, r2
 800190a:	1acb      	subs	r3, r1, r3
 800190c:	4a43      	ldr	r2, [pc, #268]	@ (8001a1c <main+0x804>)
 800190e:	6013      	str	r3, [r2, #0]
		  f_sensor2 = Read_DataXbits(DATA2_MSB, DATA2_LSB) - (int32_t)f_sensor2_baseline;
 8001910:	2304      	movs	r3, #4
 8001912:	2205      	movs	r2, #5
 8001914:	4611      	mov	r1, r2
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fa6c 	bl	8000df4 <Read_DataXbits>
 800191c:	4601      	mov	r1, r0
 800191e:	4b40      	ldr	r3, [pc, #256]	@ (8001a20 <main+0x808>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	4613      	mov	r3, r2
 8001926:	1acb      	subs	r3, r1, r3
 8001928:	4a3e      	ldr	r2, [pc, #248]	@ (8001a24 <main+0x80c>)
 800192a:	6013      	str	r3, [r2, #0]
		  f_sensor3 = Read_DataXbits(DATA3_MSB, DATA3_LSB) - (int32_t)f_sensor3_baseline;
 800192c:	2306      	movs	r3, #6
 800192e:	2207      	movs	r2, #7
 8001930:	4611      	mov	r1, r2
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fa5e 	bl	8000df4 <Read_DataXbits>
 8001938:	4601      	mov	r1, r0
 800193a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a28 <main+0x810>)
 800193c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001940:	4613      	mov	r3, r2
 8001942:	1acb      	subs	r3, r1, r3
 8001944:	4a39      	ldr	r2, [pc, #228]	@ (8001a2c <main+0x814>)
 8001946:	6013      	str	r3, [r2, #0]

		  // Division (direct floating point div not working)
		  f0 = f_sensor0/400.0;
 8001948:	4b32      	ldr	r3, [pc, #200]	@ (8001a14 <main+0x7fc>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fd4f 	bl	80003f0 <__aeabi_i2d>
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	4b36      	ldr	r3, [pc, #216]	@ (8001a30 <main+0x818>)
 8001958:	f7fe fede 	bl	8000718 <__aeabi_ddiv>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4934      	ldr	r1, [pc, #208]	@ (8001a34 <main+0x81c>)
 8001962:	e9c1 2300 	strd	r2, r3, [r1]
		  f1 = f_sensor1/400.0;
 8001966:	4b2d      	ldr	r3, [pc, #180]	@ (8001a1c <main+0x804>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fd40 	bl	80003f0 <__aeabi_i2d>
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	4b2e      	ldr	r3, [pc, #184]	@ (8001a30 <main+0x818>)
 8001976:	f7fe fecf 	bl	8000718 <__aeabi_ddiv>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	492e      	ldr	r1, [pc, #184]	@ (8001a38 <main+0x820>)
 8001980:	e9c1 2300 	strd	r2, r3, [r1]
		  f2 = f_sensor2/400.0;
 8001984:	4b27      	ldr	r3, [pc, #156]	@ (8001a24 <main+0x80c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fd31 	bl	80003f0 <__aeabi_i2d>
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	4b27      	ldr	r3, [pc, #156]	@ (8001a30 <main+0x818>)
 8001994:	f7fe fec0 	bl	8000718 <__aeabi_ddiv>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4927      	ldr	r1, [pc, #156]	@ (8001a3c <main+0x824>)
 800199e:	e9c1 2300 	strd	r2, r3, [r1]
		  f3 = f_sensor3/400.0;
 80019a2:	4b22      	ldr	r3, [pc, #136]	@ (8001a2c <main+0x814>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fd22 	bl	80003f0 <__aeabi_i2d>
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a30 <main+0x818>)
 80019b2:	f7fe feb1 	bl	8000718 <__aeabi_ddiv>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4921      	ldr	r1, [pc, #132]	@ (8001a40 <main+0x828>)
 80019bc:	e9c1 2300 	strd	r2, r3, [r1]

		  int direction = -1; // -1=>left, 1=>right
 80019c0:	f04f 33ff 	mov.w	r3, #4294967295
 80019c4:	607b      	str	r3, [r7, #4]
		  // region identification.
		  position_decoder(f0,f1,f2,f3,direction);
 80019c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a34 <main+0x81c>)
 80019c8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80019cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <main+0x820>)
 80019ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80019d2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a3c <main+0x824>)
 80019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d8:	4919      	ldr	r1, [pc, #100]	@ (8001a40 <main+0x828>)
 80019da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019de:	687e      	ldr	r6, [r7, #4]
 80019e0:	9604      	str	r6, [sp, #16]
 80019e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80019e6:	e9cd 2300 	strd	r2, r3, [sp]
 80019ea:	4642      	mov	r2, r8
 80019ec:	464b      	mov	r3, r9
 80019ee:	4620      	mov	r0, r4
 80019f0:	4629      	mov	r1, r5
 80019f2:	f7ff fb67 	bl	80010c4 <position_decoder>
	  __NOP();
 80019f6:	e745      	b.n	8001884 <main+0x66c>
 80019f8:	2000002c 	.word	0x2000002c
 80019fc:	20000110 	.word	0x20000110
 8001a00:	20000114 	.word	0x20000114
 8001a04:	20000182 	.word	0x20000182
 8001a08:	20000184 	.word	0x20000184
 8001a0c:	20000174 	.word	0x20000174
 8001a10:	20000120 	.word	0x20000120
 8001a14:	20000140 	.word	0x20000140
 8001a18:	20000128 	.word	0x20000128
 8001a1c:	20000144 	.word	0x20000144
 8001a20:	20000130 	.word	0x20000130
 8001a24:	20000148 	.word	0x20000148
 8001a28:	20000138 	.word	0x20000138
 8001a2c:	2000014c 	.word	0x2000014c
 8001a30:	40790000 	.word	0x40790000
 8001a34:	20000150 	.word	0x20000150
 8001a38:	20000158 	.word	0x20000158
 8001a3c:	20000160 	.word	0x20000160
 8001a40:	20000168 	.word	0x20000168

08001a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b090      	sub	sp, #64	@ 0x40
 8001a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a4a:	f107 0318 	add.w	r3, r7, #24
 8001a4e:	2228      	movs	r2, #40	@ 0x28
 8001a50:	2100      	movs	r1, #0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f003 f86d 	bl	8004b32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a66:	2302      	movs	r3, #2
 8001a68:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a6e:	2310      	movs	r3, #16
 8001a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a76:	f107 0318 	add.w	r3, r7, #24
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f001 ff06 	bl	800388c <HAL_RCC_OscConfig>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001a86:	f000 fa21 	bl	8001ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a8a:	230f      	movs	r3, #15
 8001a8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f002 f974 	bl	8003d90 <HAL_RCC_ClockConfig>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001aae:	f000 fa0d 	bl	8001ecc <Error_Handler>
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	3740      	adds	r7, #64	@ 0x40
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ac0:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001ac2:	4a13      	ldr	r2, [pc, #76]	@ (8001b10 <MX_I2C1_Init+0x54>)
 8001ac4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001ac6:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001ac8:	4a12      	ldr	r2, [pc, #72]	@ (8001b14 <MX_I2C1_Init+0x58>)
 8001aca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001acc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001ada:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ade:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ae6:	4b09      	ldr	r3, [pc, #36]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aec:	4b07      	ldr	r3, [pc, #28]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001af2:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001af8:	4804      	ldr	r0, [pc, #16]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001afa:	f000 fe6d 	bl	80027d8 <HAL_I2C_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b04:	f000 f9e2 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	2000002c 	.word	0x2000002c
 8001b10:	40005400 	.word	0x40005400
 8001b14:	00061a80 	.word	0x00061a80

08001b18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b096      	sub	sp, #88	@ 0x58
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b1e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b2c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
 8001b44:	611a      	str	r2, [r3, #16]
 8001b46:	615a      	str	r2, [r3, #20]
 8001b48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f002 ffee 	bl	8004b32 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b56:	4b3e      	ldr	r3, [pc, #248]	@ (8001c50 <MX_TIM1_Init+0x138>)
 8001b58:	4a3e      	ldr	r2, [pc, #248]	@ (8001c54 <MX_TIM1_Init+0x13c>)
 8001b5a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b5c:	4b3c      	ldr	r3, [pc, #240]	@ (8001c50 <MX_TIM1_Init+0x138>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b62:	4b3b      	ldr	r3, [pc, #236]	@ (8001c50 <MX_TIM1_Init+0x138>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 800;
 8001b68:	4b39      	ldr	r3, [pc, #228]	@ (8001c50 <MX_TIM1_Init+0x138>)
 8001b6a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001b6e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b70:	4b37      	ldr	r3, [pc, #220]	@ (8001c50 <MX_TIM1_Init+0x138>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b76:	4b36      	ldr	r3, [pc, #216]	@ (8001c50 <MX_TIM1_Init+0x138>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b7c:	4b34      	ldr	r3, [pc, #208]	@ (8001c50 <MX_TIM1_Init+0x138>)
 8001b7e:	2280      	movs	r2, #128	@ 0x80
 8001b80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b82:	4833      	ldr	r0, [pc, #204]	@ (8001c50 <MX_TIM1_Init+0x138>)
 8001b84:	f002 fa7e 	bl	8004084 <HAL_TIM_Base_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001b8e:	f000 f99d 	bl	8001ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b96:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b98:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	482c      	ldr	r0, [pc, #176]	@ (8001c50 <MX_TIM1_Init+0x138>)
 8001ba0:	f002 fbd0 	bl	8004344 <HAL_TIM_ConfigClockSource>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001baa:	f000 f98f 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bae:	4828      	ldr	r0, [pc, #160]	@ (8001c50 <MX_TIM1_Init+0x138>)
 8001bb0:	f002 fab7 	bl	8004122 <HAL_TIM_PWM_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001bba:	f000 f987 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bc6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4820      	ldr	r0, [pc, #128]	@ (8001c50 <MX_TIM1_Init+0x138>)
 8001bce:	f002 ff01 	bl	80049d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001bd8:	f000 f978 	bl	8001ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bdc:	2360      	movs	r3, #96	@ 0x60
 8001bde:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001be8:	2300      	movs	r3, #0
 8001bea:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4813      	ldr	r0, [pc, #76]	@ (8001c50 <MX_TIM1_Init+0x138>)
 8001c02:	f002 fadd 	bl	80041c0 <HAL_TIM_PWM_ConfigChannel>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001c0c:	f000 f95e 	bl	8001ecc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c28:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	4619      	mov	r1, r3
 8001c32:	4807      	ldr	r0, [pc, #28]	@ (8001c50 <MX_TIM1_Init+0x138>)
 8001c34:	f002 ff2c 	bl	8004a90 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001c3e:	f000 f945 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c42:	4803      	ldr	r0, [pc, #12]	@ (8001c50 <MX_TIM1_Init+0x138>)
 8001c44:	f000 f9f2 	bl	800202c <HAL_TIM_MspPostInit>

}
 8001c48:	bf00      	nop
 8001c4a:	3758      	adds	r7, #88	@ 0x58
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000080 	.word	0x20000080
 8001c54:	40012c00 	.word	0x40012c00

08001c58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08a      	sub	sp, #40	@ 0x28
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c5e:	f107 0320 	add.w	r3, r7, #32
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
 8001c74:	611a      	str	r2, [r3, #16]
 8001c76:	615a      	str	r2, [r3, #20]
 8001c78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c7a:	4b33      	ldr	r3, [pc, #204]	@ (8001d48 <MX_TIM2_Init+0xf0>)
 8001c7c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c80:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c82:	4b31      	ldr	r3, [pc, #196]	@ (8001d48 <MX_TIM2_Init+0xf0>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c88:	4b2f      	ldr	r3, [pc, #188]	@ (8001d48 <MX_TIM2_Init+0xf0>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001c8e:	4b2e      	ldr	r3, [pc, #184]	@ (8001d48 <MX_TIM2_Init+0xf0>)
 8001c90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c96:	4b2c      	ldr	r3, [pc, #176]	@ (8001d48 <MX_TIM2_Init+0xf0>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001d48 <MX_TIM2_Init+0xf0>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ca2:	4829      	ldr	r0, [pc, #164]	@ (8001d48 <MX_TIM2_Init+0xf0>)
 8001ca4:	f002 fa3d 	bl	8004122 <HAL_TIM_PWM_Init>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001cae:	f000 f90d 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cba:	f107 0320 	add.w	r3, r7, #32
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4821      	ldr	r0, [pc, #132]	@ (8001d48 <MX_TIM2_Init+0xf0>)
 8001cc2:	f002 fe87 	bl	80049d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001ccc:	f000 f8fe 	bl	8001ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cd0:	2360      	movs	r3, #96	@ 0x60
 8001cd2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4818      	ldr	r0, [pc, #96]	@ (8001d48 <MX_TIM2_Init+0xf0>)
 8001ce8:	f002 fa6a 	bl	80041c0 <HAL_TIM_PWM_ConfigChannel>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001cf2:	f000 f8eb 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	2204      	movs	r2, #4
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4812      	ldr	r0, [pc, #72]	@ (8001d48 <MX_TIM2_Init+0xf0>)
 8001cfe:	f002 fa5f 	bl	80041c0 <HAL_TIM_PWM_ConfigChannel>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001d08:	f000 f8e0 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d0c:	1d3b      	adds	r3, r7, #4
 8001d0e:	2208      	movs	r2, #8
 8001d10:	4619      	mov	r1, r3
 8001d12:	480d      	ldr	r0, [pc, #52]	@ (8001d48 <MX_TIM2_Init+0xf0>)
 8001d14:	f002 fa54 	bl	80041c0 <HAL_TIM_PWM_ConfigChannel>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001d1e:	f000 f8d5 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	220c      	movs	r2, #12
 8001d26:	4619      	mov	r1, r3
 8001d28:	4807      	ldr	r0, [pc, #28]	@ (8001d48 <MX_TIM2_Init+0xf0>)
 8001d2a:	f002 fa49 	bl	80041c0 <HAL_TIM_PWM_ConfigChannel>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001d34:	f000 f8ca 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d38:	4803      	ldr	r0, [pc, #12]	@ (8001d48 <MX_TIM2_Init+0xf0>)
 8001d3a:	f000 f977 	bl	800202c <HAL_TIM_MspPostInit>

}
 8001d3e:	bf00      	nop
 8001d40:	3728      	adds	r7, #40	@ 0x28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200000c8 	.word	0x200000c8

08001d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	@ 0x28
 8001d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d60:	4b49      	ldr	r3, [pc, #292]	@ (8001e88 <MX_GPIO_Init+0x13c>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a48      	ldr	r2, [pc, #288]	@ (8001e88 <MX_GPIO_Init+0x13c>)
 8001d66:	f043 0310 	orr.w	r3, r3, #16
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b46      	ldr	r3, [pc, #280]	@ (8001e88 <MX_GPIO_Init+0x13c>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d78:	4b43      	ldr	r3, [pc, #268]	@ (8001e88 <MX_GPIO_Init+0x13c>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	4a42      	ldr	r2, [pc, #264]	@ (8001e88 <MX_GPIO_Init+0x13c>)
 8001d7e:	f043 0320 	orr.w	r3, r3, #32
 8001d82:	6193      	str	r3, [r2, #24]
 8001d84:	4b40      	ldr	r3, [pc, #256]	@ (8001e88 <MX_GPIO_Init+0x13c>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f003 0320 	and.w	r3, r3, #32
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d90:	4b3d      	ldr	r3, [pc, #244]	@ (8001e88 <MX_GPIO_Init+0x13c>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	4a3c      	ldr	r2, [pc, #240]	@ (8001e88 <MX_GPIO_Init+0x13c>)
 8001d96:	f043 0304 	orr.w	r3, r3, #4
 8001d9a:	6193      	str	r3, [r2, #24]
 8001d9c:	4b3a      	ldr	r3, [pc, #232]	@ (8001e88 <MX_GPIO_Init+0x13c>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da8:	4b37      	ldr	r3, [pc, #220]	@ (8001e88 <MX_GPIO_Init+0x13c>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	4a36      	ldr	r2, [pc, #216]	@ (8001e88 <MX_GPIO_Init+0x13c>)
 8001dae:	f043 0308 	orr.w	r3, r3, #8
 8001db2:	6193      	str	r3, [r2, #24]
 8001db4:	4b34      	ldr	r3, [pc, #208]	@ (8001e88 <MX_GPIO_Init+0x13c>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2110      	movs	r1, #16
 8001dc4:	4831      	ldr	r0, [pc, #196]	@ (8001e8c <MX_GPIO_Init+0x140>)
 8001dc6:	f000 fcd7 	bl	8002778 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001dca:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	4619      	mov	r1, r3
 8001dda:	482d      	ldr	r0, [pc, #180]	@ (8001e90 <MX_GPIO_Init+0x144>)
 8001ddc:	f000 fb48 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001de0:	2303      	movs	r3, #3
 8001de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001de4:	2303      	movs	r3, #3
 8001de6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	4619      	mov	r1, r3
 8001dee:	4829      	ldr	r0, [pc, #164]	@ (8001e94 <MX_GPIO_Init+0x148>)
 8001df0:	f000 fb3e 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001df4:	f649 63f0 	movw	r3, #40688	@ 0x9ef0
 8001df8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfe:	f107 0314 	add.w	r3, r7, #20
 8001e02:	4619      	mov	r1, r3
 8001e04:	4824      	ldr	r0, [pc, #144]	@ (8001e98 <MX_GPIO_Init+0x14c>)
 8001e06:	f000 fb33 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001e0a:	f64f 730f 	movw	r3, #65295	@ 0xff0f
 8001e0e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e10:	2303      	movs	r3, #3
 8001e12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	4619      	mov	r1, r3
 8001e1a:	481c      	ldr	r0, [pc, #112]	@ (8001e8c <MX_GPIO_Init+0x140>)
 8001e1c:	f000 fb28 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e20:	2310      	movs	r3, #16
 8001e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e24:	2301      	movs	r3, #1
 8001e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	4619      	mov	r1, r3
 8001e36:	4815      	ldr	r0, [pc, #84]	@ (8001e8c <MX_GPIO_Init+0x140>)
 8001e38:	f000 fb1a 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e3c:	2320      	movs	r3, #32
 8001e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e40:	4b16      	ldr	r3, [pc, #88]	@ (8001e9c <MX_GPIO_Init+0x150>)
 8001e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	480f      	ldr	r0, [pc, #60]	@ (8001e8c <MX_GPIO_Init+0x140>)
 8001e50:	f000 fb0e 	bl	8002470 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8001e54:	4b12      	ldr	r3, [pc, #72]	@ (8001ea0 <MX_GPIO_Init+0x154>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001e60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e6a:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea0 <MX_GPIO_Init+0x154>)
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6e:	6053      	str	r3, [r2, #4]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001e70:	2200      	movs	r2, #0
 8001e72:	2100      	movs	r1, #0
 8001e74:	2017      	movs	r0, #23
 8001e76:	f000 fac4 	bl	8002402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e7a:	2017      	movs	r0, #23
 8001e7c:	f000 fadd 	bl	800243a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e80:	bf00      	nop
 8001e82:	3728      	adds	r7, #40	@ 0x28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40010c00 	.word	0x40010c00
 8001e90:	40011000 	.word	0x40011000
 8001e94:	40011400 	.word	0x40011400
 8001e98:	40010800 	.word	0x40010800
 8001e9c:	10210000 	.word	0x10210000
 8001ea0:	40010000 	.word	0x40010000

08001ea4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_5) {
 8001eae:	88fb      	ldrh	r3, [r7, #6]
 8001eb0:	2b20      	cmp	r3, #32
 8001eb2:	d103      	bne.n	8001ebc <HAL_GPIO_EXTI_Callback+0x18>
	  data_ready = 1;
 8001eb4:	4b04      	ldr	r3, [pc, #16]	@ (8001ec8 <HAL_GPIO_EXTI_Callback+0x24>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
  } else {
      __NOP();
  }
}
 8001eba:	e000      	b.n	8001ebe <HAL_GPIO_EXTI_Callback+0x1a>
      __NOP();
 8001ebc:	bf00      	nop
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	20000174 	.word	0x20000174

08001ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed0:	b672      	cpsid	i
}
 8001ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed4:	bf00      	nop
 8001ed6:	e7fd      	b.n	8001ed4 <Error_Handler+0x8>

08001ed8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ede:	4b15      	ldr	r3, [pc, #84]	@ (8001f34 <HAL_MspInit+0x5c>)
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	4a14      	ldr	r2, [pc, #80]	@ (8001f34 <HAL_MspInit+0x5c>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6193      	str	r3, [r2, #24]
 8001eea:	4b12      	ldr	r3, [pc, #72]	@ (8001f34 <HAL_MspInit+0x5c>)
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f34 <HAL_MspInit+0x5c>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	4a0e      	ldr	r2, [pc, #56]	@ (8001f34 <HAL_MspInit+0x5c>)
 8001efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f00:	61d3      	str	r3, [r2, #28]
 8001f02:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <HAL_MspInit+0x5c>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f38 <HAL_MspInit+0x60>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	4a04      	ldr	r2, [pc, #16]	@ (8001f38 <HAL_MspInit+0x60>)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40010000 	.word	0x40010000

08001f3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b088      	sub	sp, #32
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 0310 	add.w	r3, r7, #16
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a15      	ldr	r2, [pc, #84]	@ (8001fac <HAL_I2C_MspInit+0x70>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d123      	bne.n	8001fa4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5c:	4b14      	ldr	r3, [pc, #80]	@ (8001fb0 <HAL_I2C_MspInit+0x74>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	4a13      	ldr	r2, [pc, #76]	@ (8001fb0 <HAL_I2C_MspInit+0x74>)
 8001f62:	f043 0308 	orr.w	r3, r3, #8
 8001f66:	6193      	str	r3, [r2, #24]
 8001f68:	4b11      	ldr	r3, [pc, #68]	@ (8001fb0 <HAL_I2C_MspInit+0x74>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f74:	23c0      	movs	r3, #192	@ 0xc0
 8001f76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f78:	2312      	movs	r3, #18
 8001f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f80:	f107 0310 	add.w	r3, r7, #16
 8001f84:	4619      	mov	r1, r3
 8001f86:	480b      	ldr	r0, [pc, #44]	@ (8001fb4 <HAL_I2C_MspInit+0x78>)
 8001f88:	f000 fa72 	bl	8002470 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f8c:	4b08      	ldr	r3, [pc, #32]	@ (8001fb0 <HAL_I2C_MspInit+0x74>)
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	4a07      	ldr	r2, [pc, #28]	@ (8001fb0 <HAL_I2C_MspInit+0x74>)
 8001f92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f96:	61d3      	str	r3, [r2, #28]
 8001f98:	4b05      	ldr	r3, [pc, #20]	@ (8001fb0 <HAL_I2C_MspInit+0x74>)
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fa4:	bf00      	nop
 8001fa6:	3720      	adds	r7, #32
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40005400 	.word	0x40005400
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40010c00 	.word	0x40010c00

08001fb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a09      	ldr	r2, [pc, #36]	@ (8001fec <HAL_TIM_Base_MspInit+0x34>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d10b      	bne.n	8001fe2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fca:	4b09      	ldr	r3, [pc, #36]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x38>)
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	4a08      	ldr	r2, [pc, #32]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x38>)
 8001fd0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fd4:	6193      	str	r3, [r2, #24]
 8001fd6:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x38>)
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001fe2:	bf00      	nop
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr
 8001fec:	40012c00 	.word	0x40012c00
 8001ff0:	40021000 	.word	0x40021000

08001ff4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002004:	d10b      	bne.n	800201e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002006:	4b08      	ldr	r3, [pc, #32]	@ (8002028 <HAL_TIM_PWM_MspInit+0x34>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4a07      	ldr	r2, [pc, #28]	@ (8002028 <HAL_TIM_PWM_MspInit+0x34>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	61d3      	str	r3, [r2, #28]
 8002012:	4b05      	ldr	r3, [pc, #20]	@ (8002028 <HAL_TIM_PWM_MspInit+0x34>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800201e:	bf00      	nop
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	40021000 	.word	0x40021000

0800202c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	f107 0310 	add.w	r3, r7, #16
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a1f      	ldr	r2, [pc, #124]	@ (80020c4 <HAL_TIM_MspPostInit+0x98>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d119      	bne.n	8002080 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204c:	4b1e      	ldr	r3, [pc, #120]	@ (80020c8 <HAL_TIM_MspPostInit+0x9c>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	4a1d      	ldr	r2, [pc, #116]	@ (80020c8 <HAL_TIM_MspPostInit+0x9c>)
 8002052:	f043 0304 	orr.w	r3, r3, #4
 8002056:	6193      	str	r3, [r2, #24]
 8002058:	4b1b      	ldr	r3, [pc, #108]	@ (80020c8 <HAL_TIM_MspPostInit+0x9c>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002064:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002068:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206e:	2302      	movs	r3, #2
 8002070:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002072:	f107 0310 	add.w	r3, r7, #16
 8002076:	4619      	mov	r1, r3
 8002078:	4814      	ldr	r0, [pc, #80]	@ (80020cc <HAL_TIM_MspPostInit+0xa0>)
 800207a:	f000 f9f9 	bl	8002470 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800207e:	e01c      	b.n	80020ba <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002088:	d117      	bne.n	80020ba <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208a:	4b0f      	ldr	r3, [pc, #60]	@ (80020c8 <HAL_TIM_MspPostInit+0x9c>)
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	4a0e      	ldr	r2, [pc, #56]	@ (80020c8 <HAL_TIM_MspPostInit+0x9c>)
 8002090:	f043 0304 	orr.w	r3, r3, #4
 8002094:	6193      	str	r3, [r2, #24]
 8002096:	4b0c      	ldr	r3, [pc, #48]	@ (80020c8 <HAL_TIM_MspPostInit+0x9c>)
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80020a2:	230f      	movs	r3, #15
 80020a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a6:	2302      	movs	r3, #2
 80020a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020aa:	2302      	movs	r3, #2
 80020ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ae:	f107 0310 	add.w	r3, r7, #16
 80020b2:	4619      	mov	r1, r3
 80020b4:	4805      	ldr	r0, [pc, #20]	@ (80020cc <HAL_TIM_MspPostInit+0xa0>)
 80020b6:	f000 f9db 	bl	8002470 <HAL_GPIO_Init>
}
 80020ba:	bf00      	nop
 80020bc:	3720      	adds	r7, #32
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40012c00 	.word	0x40012c00
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40010800 	.word	0x40010800

080020d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020d4:	bf00      	nop
 80020d6:	e7fd      	b.n	80020d4 <NMI_Handler+0x4>

080020d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020dc:	bf00      	nop
 80020de:	e7fd      	b.n	80020dc <HardFault_Handler+0x4>

080020e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020e4:	bf00      	nop
 80020e6:	e7fd      	b.n	80020e4 <MemManage_Handler+0x4>

080020e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ec:	bf00      	nop
 80020ee:	e7fd      	b.n	80020ec <BusFault_Handler+0x4>

080020f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f4:	bf00      	nop
 80020f6:	e7fd      	b.n	80020f4 <UsageFault_Handler+0x4>

080020f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002120:	f000 f87c 	bl	800221c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}

08002128 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800212c:	2020      	movs	r0, #32
 800212e:	f000 fb3b 	bl	80027a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}

08002136 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800213a:	bf00      	nop
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr
	...

08002144 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002144:	f7ff fff7 	bl	8002136 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002148:	480b      	ldr	r0, [pc, #44]	@ (8002178 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800214a:	490c      	ldr	r1, [pc, #48]	@ (800217c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800214c:	4a0c      	ldr	r2, [pc, #48]	@ (8002180 <LoopFillZerobss+0x16>)
  movs r3, #0
 800214e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002150:	e002      	b.n	8002158 <LoopCopyDataInit>

08002152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002156:	3304      	adds	r3, #4

08002158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800215a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800215c:	d3f9      	bcc.n	8002152 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800215e:	4a09      	ldr	r2, [pc, #36]	@ (8002184 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002160:	4c09      	ldr	r4, [pc, #36]	@ (8002188 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002164:	e001      	b.n	800216a <LoopFillZerobss>

08002166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002168:	3204      	adds	r2, #4

0800216a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800216a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800216c:	d3fb      	bcc.n	8002166 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800216e:	f002 fce9 	bl	8004b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002172:	f7ff f851 	bl	8001218 <main>
  bx lr
 8002176:	4770      	bx	lr
  ldr r0, =_sdata
 8002178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800217c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002180:	08004be0 	.word	0x08004be0
  ldr r2, =_sbss
 8002184:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002188:	2000018c 	.word	0x2000018c

0800218c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800218c:	e7fe      	b.n	800218c <ADC1_2_IRQHandler>
	...

08002190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002194:	4b08      	ldr	r3, [pc, #32]	@ (80021b8 <HAL_Init+0x28>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a07      	ldr	r2, [pc, #28]	@ (80021b8 <HAL_Init+0x28>)
 800219a:	f043 0310 	orr.w	r3, r3, #16
 800219e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a0:	2003      	movs	r0, #3
 80021a2:	f000 f923 	bl	80023ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021a6:	200f      	movs	r0, #15
 80021a8:	f000 f808 	bl	80021bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021ac:	f7ff fe94 	bl	8001ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40022000 	.word	0x40022000

080021bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c4:	4b12      	ldr	r3, [pc, #72]	@ (8002210 <HAL_InitTick+0x54>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b12      	ldr	r3, [pc, #72]	@ (8002214 <HAL_InitTick+0x58>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	4619      	mov	r1, r3
 80021ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f93b 	bl	8002456 <HAL_SYSTICK_Config>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00e      	b.n	8002208 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b0f      	cmp	r3, #15
 80021ee:	d80a      	bhi.n	8002206 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f0:	2200      	movs	r2, #0
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	f04f 30ff 	mov.w	r0, #4294967295
 80021f8:	f000 f903 	bl	8002402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021fc:	4a06      	ldr	r2, [pc, #24]	@ (8002218 <HAL_InitTick+0x5c>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	e000      	b.n	8002208 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
}
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000000 	.word	0x20000000
 8002214:	20000008 	.word	0x20000008
 8002218:	20000004 	.word	0x20000004

0800221c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002220:	4b05      	ldr	r3, [pc, #20]	@ (8002238 <HAL_IncTick+0x1c>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	4b05      	ldr	r3, [pc, #20]	@ (800223c <HAL_IncTick+0x20>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4413      	add	r3, r2
 800222c:	4a03      	ldr	r2, [pc, #12]	@ (800223c <HAL_IncTick+0x20>)
 800222e:	6013      	str	r3, [r2, #0]
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	20000008 	.word	0x20000008
 800223c:	20000188 	.word	0x20000188

08002240 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return uwTick;
 8002244:	4b02      	ldr	r3, [pc, #8]	@ (8002250 <HAL_GetTick+0x10>)
 8002246:	681b      	ldr	r3, [r3, #0]
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	20000188 	.word	0x20000188

08002254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002264:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002270:	4013      	ands	r3, r2
 8002272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800227c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002286:	4a04      	ldr	r2, [pc, #16]	@ (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	60d3      	str	r3, [r2, #12]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a0:	4b04      	ldr	r3, [pc, #16]	@ (80022b4 <__NVIC_GetPriorityGrouping+0x18>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	0a1b      	lsrs	r3, r3, #8
 80022a6:	f003 0307 	and.w	r3, r3, #7
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	db0b      	blt.n	80022e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	f003 021f 	and.w	r2, r3, #31
 80022d0:	4906      	ldr	r1, [pc, #24]	@ (80022ec <__NVIC_EnableIRQ+0x34>)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	2001      	movs	r0, #1
 80022da:	fa00 f202 	lsl.w	r2, r0, r2
 80022de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr
 80022ec:	e000e100 	.word	0xe000e100

080022f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	6039      	str	r1, [r7, #0]
 80022fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002300:	2b00      	cmp	r3, #0
 8002302:	db0a      	blt.n	800231a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	b2da      	uxtb	r2, r3
 8002308:	490c      	ldr	r1, [pc, #48]	@ (800233c <__NVIC_SetPriority+0x4c>)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	0112      	lsls	r2, r2, #4
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	440b      	add	r3, r1
 8002314:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002318:	e00a      	b.n	8002330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4908      	ldr	r1, [pc, #32]	@ (8002340 <__NVIC_SetPriority+0x50>)
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	3b04      	subs	r3, #4
 8002328:	0112      	lsls	r2, r2, #4
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	440b      	add	r3, r1
 800232e:	761a      	strb	r2, [r3, #24]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	e000e100 	.word	0xe000e100
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002344:	b480      	push	{r7}
 8002346:	b089      	sub	sp, #36	@ 0x24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f1c3 0307 	rsb	r3, r3, #7
 800235e:	2b04      	cmp	r3, #4
 8002360:	bf28      	it	cs
 8002362:	2304      	movcs	r3, #4
 8002364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3304      	adds	r3, #4
 800236a:	2b06      	cmp	r3, #6
 800236c:	d902      	bls.n	8002374 <NVIC_EncodePriority+0x30>
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3b03      	subs	r3, #3
 8002372:	e000      	b.n	8002376 <NVIC_EncodePriority+0x32>
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002378:	f04f 32ff 	mov.w	r2, #4294967295
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43da      	mvns	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	401a      	ands	r2, r3
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800238c:	f04f 31ff 	mov.w	r1, #4294967295
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	43d9      	mvns	r1, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	4313      	orrs	r3, r2
         );
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3724      	adds	r7, #36	@ 0x24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023b8:	d301      	bcc.n	80023be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ba:	2301      	movs	r3, #1
 80023bc:	e00f      	b.n	80023de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023be:	4a0a      	ldr	r2, [pc, #40]	@ (80023e8 <SysTick_Config+0x40>)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023c6:	210f      	movs	r1, #15
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	f7ff ff90 	bl	80022f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d0:	4b05      	ldr	r3, [pc, #20]	@ (80023e8 <SysTick_Config+0x40>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023d6:	4b04      	ldr	r3, [pc, #16]	@ (80023e8 <SysTick_Config+0x40>)
 80023d8:	2207      	movs	r2, #7
 80023da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	e000e010 	.word	0xe000e010

080023ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ff2d 	bl	8002254 <__NVIC_SetPriorityGrouping>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	4603      	mov	r3, r0
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002414:	f7ff ff42 	bl	800229c <__NVIC_GetPriorityGrouping>
 8002418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	6978      	ldr	r0, [r7, #20]
 8002420:	f7ff ff90 	bl	8002344 <NVIC_EncodePriority>
 8002424:	4602      	mov	r2, r0
 8002426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff5f 	bl	80022f0 <__NVIC_SetPriority>
}
 8002432:	bf00      	nop
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff35 	bl	80022b8 <__NVIC_EnableIRQ>
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff ffa2 	bl	80023a8 <SysTick_Config>
 8002464:	4603      	mov	r3, r0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002470:	b480      	push	{r7}
 8002472:	b08b      	sub	sp, #44	@ 0x2c
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800247a:	2300      	movs	r3, #0
 800247c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800247e:	2300      	movs	r3, #0
 8002480:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002482:	e169      	b.n	8002758 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002484:	2201      	movs	r2, #1
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	69fa      	ldr	r2, [r7, #28]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	429a      	cmp	r2, r3
 800249e:	f040 8158 	bne.w	8002752 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	4a9a      	ldr	r2, [pc, #616]	@ (8002710 <HAL_GPIO_Init+0x2a0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d05e      	beq.n	800256a <HAL_GPIO_Init+0xfa>
 80024ac:	4a98      	ldr	r2, [pc, #608]	@ (8002710 <HAL_GPIO_Init+0x2a0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d875      	bhi.n	800259e <HAL_GPIO_Init+0x12e>
 80024b2:	4a98      	ldr	r2, [pc, #608]	@ (8002714 <HAL_GPIO_Init+0x2a4>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d058      	beq.n	800256a <HAL_GPIO_Init+0xfa>
 80024b8:	4a96      	ldr	r2, [pc, #600]	@ (8002714 <HAL_GPIO_Init+0x2a4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d86f      	bhi.n	800259e <HAL_GPIO_Init+0x12e>
 80024be:	4a96      	ldr	r2, [pc, #600]	@ (8002718 <HAL_GPIO_Init+0x2a8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d052      	beq.n	800256a <HAL_GPIO_Init+0xfa>
 80024c4:	4a94      	ldr	r2, [pc, #592]	@ (8002718 <HAL_GPIO_Init+0x2a8>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d869      	bhi.n	800259e <HAL_GPIO_Init+0x12e>
 80024ca:	4a94      	ldr	r2, [pc, #592]	@ (800271c <HAL_GPIO_Init+0x2ac>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d04c      	beq.n	800256a <HAL_GPIO_Init+0xfa>
 80024d0:	4a92      	ldr	r2, [pc, #584]	@ (800271c <HAL_GPIO_Init+0x2ac>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d863      	bhi.n	800259e <HAL_GPIO_Init+0x12e>
 80024d6:	4a92      	ldr	r2, [pc, #584]	@ (8002720 <HAL_GPIO_Init+0x2b0>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d046      	beq.n	800256a <HAL_GPIO_Init+0xfa>
 80024dc:	4a90      	ldr	r2, [pc, #576]	@ (8002720 <HAL_GPIO_Init+0x2b0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d85d      	bhi.n	800259e <HAL_GPIO_Init+0x12e>
 80024e2:	2b12      	cmp	r3, #18
 80024e4:	d82a      	bhi.n	800253c <HAL_GPIO_Init+0xcc>
 80024e6:	2b12      	cmp	r3, #18
 80024e8:	d859      	bhi.n	800259e <HAL_GPIO_Init+0x12e>
 80024ea:	a201      	add	r2, pc, #4	@ (adr r2, 80024f0 <HAL_GPIO_Init+0x80>)
 80024ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f0:	0800256b 	.word	0x0800256b
 80024f4:	08002545 	.word	0x08002545
 80024f8:	08002557 	.word	0x08002557
 80024fc:	08002599 	.word	0x08002599
 8002500:	0800259f 	.word	0x0800259f
 8002504:	0800259f 	.word	0x0800259f
 8002508:	0800259f 	.word	0x0800259f
 800250c:	0800259f 	.word	0x0800259f
 8002510:	0800259f 	.word	0x0800259f
 8002514:	0800259f 	.word	0x0800259f
 8002518:	0800259f 	.word	0x0800259f
 800251c:	0800259f 	.word	0x0800259f
 8002520:	0800259f 	.word	0x0800259f
 8002524:	0800259f 	.word	0x0800259f
 8002528:	0800259f 	.word	0x0800259f
 800252c:	0800259f 	.word	0x0800259f
 8002530:	0800259f 	.word	0x0800259f
 8002534:	0800254d 	.word	0x0800254d
 8002538:	08002561 	.word	0x08002561
 800253c:	4a79      	ldr	r2, [pc, #484]	@ (8002724 <HAL_GPIO_Init+0x2b4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d013      	beq.n	800256a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002542:	e02c      	b.n	800259e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	623b      	str	r3, [r7, #32]
          break;
 800254a:	e029      	b.n	80025a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	3304      	adds	r3, #4
 8002552:	623b      	str	r3, [r7, #32]
          break;
 8002554:	e024      	b.n	80025a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	3308      	adds	r3, #8
 800255c:	623b      	str	r3, [r7, #32]
          break;
 800255e:	e01f      	b.n	80025a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	330c      	adds	r3, #12
 8002566:	623b      	str	r3, [r7, #32]
          break;
 8002568:	e01a      	b.n	80025a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d102      	bne.n	8002578 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002572:	2304      	movs	r3, #4
 8002574:	623b      	str	r3, [r7, #32]
          break;
 8002576:	e013      	b.n	80025a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d105      	bne.n	800258c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002580:	2308      	movs	r3, #8
 8002582:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69fa      	ldr	r2, [r7, #28]
 8002588:	611a      	str	r2, [r3, #16]
          break;
 800258a:	e009      	b.n	80025a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800258c:	2308      	movs	r3, #8
 800258e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69fa      	ldr	r2, [r7, #28]
 8002594:	615a      	str	r2, [r3, #20]
          break;
 8002596:	e003      	b.n	80025a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002598:	2300      	movs	r3, #0
 800259a:	623b      	str	r3, [r7, #32]
          break;
 800259c:	e000      	b.n	80025a0 <HAL_GPIO_Init+0x130>
          break;
 800259e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	2bff      	cmp	r3, #255	@ 0xff
 80025a4:	d801      	bhi.n	80025aa <HAL_GPIO_Init+0x13a>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	e001      	b.n	80025ae <HAL_GPIO_Init+0x13e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3304      	adds	r3, #4
 80025ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	2bff      	cmp	r3, #255	@ 0xff
 80025b4:	d802      	bhi.n	80025bc <HAL_GPIO_Init+0x14c>
 80025b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	e002      	b.n	80025c2 <HAL_GPIO_Init+0x152>
 80025bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025be:	3b08      	subs	r3, #8
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	210f      	movs	r1, #15
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	fa01 f303 	lsl.w	r3, r1, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	401a      	ands	r2, r3
 80025d4:	6a39      	ldr	r1, [r7, #32]
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	fa01 f303 	lsl.w	r3, r1, r3
 80025dc:	431a      	orrs	r2, r3
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 80b1 	beq.w	8002752 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025f0:	4b4d      	ldr	r3, [pc, #308]	@ (8002728 <HAL_GPIO_Init+0x2b8>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	4a4c      	ldr	r2, [pc, #304]	@ (8002728 <HAL_GPIO_Init+0x2b8>)
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	6193      	str	r3, [r2, #24]
 80025fc:	4b4a      	ldr	r3, [pc, #296]	@ (8002728 <HAL_GPIO_Init+0x2b8>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002608:	4a48      	ldr	r2, [pc, #288]	@ (800272c <HAL_GPIO_Init+0x2bc>)
 800260a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260c:	089b      	lsrs	r3, r3, #2
 800260e:	3302      	adds	r3, #2
 8002610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002614:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	220f      	movs	r2, #15
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	4013      	ands	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a40      	ldr	r2, [pc, #256]	@ (8002730 <HAL_GPIO_Init+0x2c0>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d013      	beq.n	800265c <HAL_GPIO_Init+0x1ec>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a3f      	ldr	r2, [pc, #252]	@ (8002734 <HAL_GPIO_Init+0x2c4>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d00d      	beq.n	8002658 <HAL_GPIO_Init+0x1e8>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a3e      	ldr	r2, [pc, #248]	@ (8002738 <HAL_GPIO_Init+0x2c8>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d007      	beq.n	8002654 <HAL_GPIO_Init+0x1e4>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a3d      	ldr	r2, [pc, #244]	@ (800273c <HAL_GPIO_Init+0x2cc>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d101      	bne.n	8002650 <HAL_GPIO_Init+0x1e0>
 800264c:	2303      	movs	r3, #3
 800264e:	e006      	b.n	800265e <HAL_GPIO_Init+0x1ee>
 8002650:	2304      	movs	r3, #4
 8002652:	e004      	b.n	800265e <HAL_GPIO_Init+0x1ee>
 8002654:	2302      	movs	r3, #2
 8002656:	e002      	b.n	800265e <HAL_GPIO_Init+0x1ee>
 8002658:	2301      	movs	r3, #1
 800265a:	e000      	b.n	800265e <HAL_GPIO_Init+0x1ee>
 800265c:	2300      	movs	r3, #0
 800265e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002660:	f002 0203 	and.w	r2, r2, #3
 8002664:	0092      	lsls	r2, r2, #2
 8002666:	4093      	lsls	r3, r2
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	4313      	orrs	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800266e:	492f      	ldr	r1, [pc, #188]	@ (800272c <HAL_GPIO_Init+0x2bc>)
 8002670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002672:	089b      	lsrs	r3, r3, #2
 8002674:	3302      	adds	r3, #2
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d006      	beq.n	8002696 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002688:	4b2d      	ldr	r3, [pc, #180]	@ (8002740 <HAL_GPIO_Init+0x2d0>)
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	492c      	ldr	r1, [pc, #176]	@ (8002740 <HAL_GPIO_Init+0x2d0>)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	4313      	orrs	r3, r2
 8002692:	608b      	str	r3, [r1, #8]
 8002694:	e006      	b.n	80026a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002696:	4b2a      	ldr	r3, [pc, #168]	@ (8002740 <HAL_GPIO_Init+0x2d0>)
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	43db      	mvns	r3, r3
 800269e:	4928      	ldr	r1, [pc, #160]	@ (8002740 <HAL_GPIO_Init+0x2d0>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d006      	beq.n	80026be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026b0:	4b23      	ldr	r3, [pc, #140]	@ (8002740 <HAL_GPIO_Init+0x2d0>)
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	4922      	ldr	r1, [pc, #136]	@ (8002740 <HAL_GPIO_Init+0x2d0>)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60cb      	str	r3, [r1, #12]
 80026bc:	e006      	b.n	80026cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026be:	4b20      	ldr	r3, [pc, #128]	@ (8002740 <HAL_GPIO_Init+0x2d0>)
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	491e      	ldr	r1, [pc, #120]	@ (8002740 <HAL_GPIO_Init+0x2d0>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d006      	beq.n	80026e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026d8:	4b19      	ldr	r3, [pc, #100]	@ (8002740 <HAL_GPIO_Init+0x2d0>)
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	4918      	ldr	r1, [pc, #96]	@ (8002740 <HAL_GPIO_Init+0x2d0>)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
 80026e4:	e006      	b.n	80026f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026e6:	4b16      	ldr	r3, [pc, #88]	@ (8002740 <HAL_GPIO_Init+0x2d0>)
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	4914      	ldr	r1, [pc, #80]	@ (8002740 <HAL_GPIO_Init+0x2d0>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d021      	beq.n	8002744 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002700:	4b0f      	ldr	r3, [pc, #60]	@ (8002740 <HAL_GPIO_Init+0x2d0>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	490e      	ldr	r1, [pc, #56]	@ (8002740 <HAL_GPIO_Init+0x2d0>)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	600b      	str	r3, [r1, #0]
 800270c:	e021      	b.n	8002752 <HAL_GPIO_Init+0x2e2>
 800270e:	bf00      	nop
 8002710:	10320000 	.word	0x10320000
 8002714:	10310000 	.word	0x10310000
 8002718:	10220000 	.word	0x10220000
 800271c:	10210000 	.word	0x10210000
 8002720:	10120000 	.word	0x10120000
 8002724:	10110000 	.word	0x10110000
 8002728:	40021000 	.word	0x40021000
 800272c:	40010000 	.word	0x40010000
 8002730:	40010800 	.word	0x40010800
 8002734:	40010c00 	.word	0x40010c00
 8002738:	40011000 	.word	0x40011000
 800273c:	40011400 	.word	0x40011400
 8002740:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002744:	4b0b      	ldr	r3, [pc, #44]	@ (8002774 <HAL_GPIO_Init+0x304>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	43db      	mvns	r3, r3
 800274c:	4909      	ldr	r1, [pc, #36]	@ (8002774 <HAL_GPIO_Init+0x304>)
 800274e:	4013      	ands	r3, r2
 8002750:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002754:	3301      	adds	r3, #1
 8002756:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275e:	fa22 f303 	lsr.w	r3, r2, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	f47f ae8e 	bne.w	8002484 <HAL_GPIO_Init+0x14>
  }
}
 8002768:	bf00      	nop
 800276a:	bf00      	nop
 800276c:	372c      	adds	r7, #44	@ 0x2c
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	40010400 	.word	0x40010400

08002778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	807b      	strh	r3, [r7, #2]
 8002784:	4613      	mov	r3, r2
 8002786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002788:	787b      	ldrb	r3, [r7, #1]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800278e:	887a      	ldrh	r2, [r7, #2]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002794:	e003      	b.n	800279e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002796:	887b      	ldrh	r3, [r7, #2]
 8002798:	041a      	lsls	r2, r3, #16
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	611a      	str	r2, [r3, #16]
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr

080027a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027b2:	4b08      	ldr	r3, [pc, #32]	@ (80027d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027b4:	695a      	ldr	r2, [r3, #20]
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d006      	beq.n	80027cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027be:	4a05      	ldr	r2, [pc, #20]	@ (80027d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027c4:	88fb      	ldrh	r3, [r7, #6]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff fb6c 	bl	8001ea4 <HAL_GPIO_EXTI_Callback>
  }
}
 80027cc:	bf00      	nop
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40010400 	.word	0x40010400

080027d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e12b      	b.n	8002a42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d106      	bne.n	8002804 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff fb9c 	bl	8001f3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2224      	movs	r2, #36	@ 0x24
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0201 	bic.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800282a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800283a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800283c:	f001 fbf0 	bl	8004020 <HAL_RCC_GetPCLK1Freq>
 8002840:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4a81      	ldr	r2, [pc, #516]	@ (8002a4c <HAL_I2C_Init+0x274>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d807      	bhi.n	800285c <HAL_I2C_Init+0x84>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4a80      	ldr	r2, [pc, #512]	@ (8002a50 <HAL_I2C_Init+0x278>)
 8002850:	4293      	cmp	r3, r2
 8002852:	bf94      	ite	ls
 8002854:	2301      	movls	r3, #1
 8002856:	2300      	movhi	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	e006      	b.n	800286a <HAL_I2C_Init+0x92>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4a7d      	ldr	r2, [pc, #500]	@ (8002a54 <HAL_I2C_Init+0x27c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	bf94      	ite	ls
 8002864:	2301      	movls	r3, #1
 8002866:	2300      	movhi	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e0e7      	b.n	8002a42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4a78      	ldr	r2, [pc, #480]	@ (8002a58 <HAL_I2C_Init+0x280>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	0c9b      	lsrs	r3, r3, #18
 800287c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	430a      	orrs	r2, r1
 8002890:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	4a6a      	ldr	r2, [pc, #424]	@ (8002a4c <HAL_I2C_Init+0x274>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d802      	bhi.n	80028ac <HAL_I2C_Init+0xd4>
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	3301      	adds	r3, #1
 80028aa:	e009      	b.n	80028c0 <HAL_I2C_Init+0xe8>
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028b2:	fb02 f303 	mul.w	r3, r2, r3
 80028b6:	4a69      	ldr	r2, [pc, #420]	@ (8002a5c <HAL_I2C_Init+0x284>)
 80028b8:	fba2 2303 	umull	r2, r3, r2, r3
 80028bc:	099b      	lsrs	r3, r3, #6
 80028be:	3301      	adds	r3, #1
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	430b      	orrs	r3, r1
 80028c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80028d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	495c      	ldr	r1, [pc, #368]	@ (8002a4c <HAL_I2C_Init+0x274>)
 80028dc:	428b      	cmp	r3, r1
 80028de:	d819      	bhi.n	8002914 <HAL_I2C_Init+0x13c>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1e59      	subs	r1, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80028ee:	1c59      	adds	r1, r3, #1
 80028f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80028f4:	400b      	ands	r3, r1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <HAL_I2C_Init+0x138>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1e59      	subs	r1, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	fbb1 f3f3 	udiv	r3, r1, r3
 8002908:	3301      	adds	r3, #1
 800290a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800290e:	e051      	b.n	80029b4 <HAL_I2C_Init+0x1dc>
 8002910:	2304      	movs	r3, #4
 8002912:	e04f      	b.n	80029b4 <HAL_I2C_Init+0x1dc>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d111      	bne.n	8002940 <HAL_I2C_Init+0x168>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	1e58      	subs	r0, r3, #1
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6859      	ldr	r1, [r3, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	440b      	add	r3, r1
 800292a:	fbb0 f3f3 	udiv	r3, r0, r3
 800292e:	3301      	adds	r3, #1
 8002930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf0c      	ite	eq
 8002938:	2301      	moveq	r3, #1
 800293a:	2300      	movne	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	e012      	b.n	8002966 <HAL_I2C_Init+0x18e>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	1e58      	subs	r0, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6859      	ldr	r1, [r3, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	0099      	lsls	r1, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	fbb0 f3f3 	udiv	r3, r0, r3
 8002956:	3301      	adds	r3, #1
 8002958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295c:	2b00      	cmp	r3, #0
 800295e:	bf0c      	ite	eq
 8002960:	2301      	moveq	r3, #1
 8002962:	2300      	movne	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_I2C_Init+0x196>
 800296a:	2301      	movs	r3, #1
 800296c:	e022      	b.n	80029b4 <HAL_I2C_Init+0x1dc>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10e      	bne.n	8002994 <HAL_I2C_Init+0x1bc>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	1e58      	subs	r0, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6859      	ldr	r1, [r3, #4]
 800297e:	460b      	mov	r3, r1
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	440b      	add	r3, r1
 8002984:	fbb0 f3f3 	udiv	r3, r0, r3
 8002988:	3301      	adds	r3, #1
 800298a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800298e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002992:	e00f      	b.n	80029b4 <HAL_I2C_Init+0x1dc>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1e58      	subs	r0, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6859      	ldr	r1, [r3, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	0099      	lsls	r1, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029aa:	3301      	adds	r3, #1
 80029ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	6809      	ldr	r1, [r1, #0]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69da      	ldr	r2, [r3, #28]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80029e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6911      	ldr	r1, [r2, #16]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68d2      	ldr	r2, [r2, #12]
 80029ee:	4311      	orrs	r1, r2
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	430b      	orrs	r3, r1
 80029f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	695a      	ldr	r2, [r3, #20]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	000186a0 	.word	0x000186a0
 8002a50:	001e847f 	.word	0x001e847f
 8002a54:	003d08ff 	.word	0x003d08ff
 8002a58:	431bde83 	.word	0x431bde83
 8002a5c:	10624dd3 	.word	0x10624dd3

08002a60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af02      	add	r7, sp, #8
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	4608      	mov	r0, r1
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4603      	mov	r3, r0
 8002a70:	817b      	strh	r3, [r7, #10]
 8002a72:	460b      	mov	r3, r1
 8002a74:	813b      	strh	r3, [r7, #8]
 8002a76:	4613      	mov	r3, r2
 8002a78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a7a:	f7ff fbe1 	bl	8002240 <HAL_GetTick>
 8002a7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	f040 80d9 	bne.w	8002c40 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	2319      	movs	r3, #25
 8002a94:	2201      	movs	r2, #1
 8002a96:	496d      	ldr	r1, [pc, #436]	@ (8002c4c <HAL_I2C_Mem_Write+0x1ec>)
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 fcc1 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e0cc      	b.n	8002c42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_I2C_Mem_Write+0x56>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e0c5      	b.n	8002c42 <HAL_I2C_Mem_Write+0x1e2>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d007      	beq.n	8002adc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2221      	movs	r2, #33	@ 0x21
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2240      	movs	r2, #64	@ 0x40
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a3a      	ldr	r2, [r7, #32]
 8002b06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4a4d      	ldr	r2, [pc, #308]	@ (8002c50 <HAL_I2C_Mem_Write+0x1f0>)
 8002b1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b1e:	88f8      	ldrh	r0, [r7, #6]
 8002b20:	893a      	ldrh	r2, [r7, #8]
 8002b22:	8979      	ldrh	r1, [r7, #10]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	9301      	str	r3, [sp, #4]
 8002b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 faf8 	bl	8003124 <I2C_RequestMemoryWrite>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d052      	beq.n	8002be0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e081      	b.n	8002c42 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 fd86 	bl	8003654 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00d      	beq.n	8002b6a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d107      	bne.n	8002b66 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e06b      	b.n	8002c42 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6e:	781a      	ldrb	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d11b      	bne.n	8002be0 <HAL_I2C_Mem_Write+0x180>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d017      	beq.n	8002be0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb4:	781a      	ldrb	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1aa      	bne.n	8002b3e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 fd79 	bl	80036e4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00d      	beq.n	8002c14 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d107      	bne.n	8002c10 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e016      	b.n	8002c42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	e000      	b.n	8002c42 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c40:	2302      	movs	r3, #2
  }
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	00100002 	.word	0x00100002
 8002c50:	ffff0000 	.word	0xffff0000

08002c54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08c      	sub	sp, #48	@ 0x30
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	4608      	mov	r0, r1
 8002c5e:	4611      	mov	r1, r2
 8002c60:	461a      	mov	r2, r3
 8002c62:	4603      	mov	r3, r0
 8002c64:	817b      	strh	r3, [r7, #10]
 8002c66:	460b      	mov	r3, r1
 8002c68:	813b      	strh	r3, [r7, #8]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c72:	f7ff fae5 	bl	8002240 <HAL_GetTick>
 8002c76:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b20      	cmp	r3, #32
 8002c82:	f040 8244 	bne.w	800310e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	2319      	movs	r3, #25
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	4982      	ldr	r1, [pc, #520]	@ (8002e98 <HAL_I2C_Mem_Read+0x244>)
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 fbc5 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e237      	b.n	8003110 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_I2C_Mem_Read+0x5a>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e230      	b.n	8003110 <HAL_I2C_Mem_Read+0x4bc>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d007      	beq.n	8002cd4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0201 	orr.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ce2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2222      	movs	r2, #34	@ 0x22
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2240      	movs	r2, #64	@ 0x40
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cfe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002d04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4a62      	ldr	r2, [pc, #392]	@ (8002e9c <HAL_I2C_Mem_Read+0x248>)
 8002d14:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d16:	88f8      	ldrh	r0, [r7, #6]
 8002d18:	893a      	ldrh	r2, [r7, #8]
 8002d1a:	8979      	ldrh	r1, [r7, #10]
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1e:	9301      	str	r3, [sp, #4]
 8002d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	4603      	mov	r3, r0
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 fa92 	bl	8003250 <I2C_RequestMemoryRead>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e1ec      	b.n	8003110 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d113      	bne.n	8002d66 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	e1c0      	b.n	80030e8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d11e      	bne.n	8002dac <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d7e:	b672      	cpsid	i
}
 8002d80:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d82:	2300      	movs	r3, #0
 8002d84:	61bb      	str	r3, [r7, #24]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	61bb      	str	r3, [r7, #24]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	61bb      	str	r3, [r7, #24]
 8002d96:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002da6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002da8:	b662      	cpsie	i
}
 8002daa:	e035      	b.n	8002e18 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d11e      	bne.n	8002df2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dc2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc4:	b672      	cpsid	i
}
 8002dc6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002dee:	b662      	cpsie	i
}
 8002df0:	e012      	b.n	8002e18 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e00:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002e18:	e166      	b.n	80030e8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	f200 811f 	bhi.w	8003062 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d123      	bne.n	8002e74 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e2e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f000 fc9f 	bl	8003774 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e167      	b.n	8003110 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691a      	ldr	r2, [r3, #16]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e72:	e139      	b.n	80030e8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d152      	bne.n	8002f22 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e82:	2200      	movs	r2, #0
 8002e84:	4906      	ldr	r1, [pc, #24]	@ (8002ea0 <HAL_I2C_Mem_Read+0x24c>)
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 faca 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d008      	beq.n	8002ea4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e13c      	b.n	8003110 <HAL_I2C_Mem_Read+0x4bc>
 8002e96:	bf00      	nop
 8002e98:	00100002 	.word	0x00100002
 8002e9c:	ffff0000 	.word	0xffff0000
 8002ea0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002ea4:	b672      	cpsid	i
}
 8002ea6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691a      	ldr	r2, [r3, #16]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002eea:	b662      	cpsie	i
}
 8002eec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f20:	e0e2      	b.n	80030e8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f28:	2200      	movs	r2, #0
 8002f2a:	497b      	ldr	r1, [pc, #492]	@ (8003118 <HAL_I2C_Mem_Read+0x4c4>)
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 fa77 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0e9      	b.n	8003110 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f4c:	b672      	cpsid	i
}
 8002f4e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691a      	ldr	r2, [r3, #16]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f82:	4b66      	ldr	r3, [pc, #408]	@ (800311c <HAL_I2C_Mem_Read+0x4c8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	08db      	lsrs	r3, r3, #3
 8002f88:	4a65      	ldr	r2, [pc, #404]	@ (8003120 <HAL_I2C_Mem_Read+0x4cc>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	0a1a      	lsrs	r2, r3, #8
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	00da      	lsls	r2, r3, #3
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d118      	bne.n	8002fda <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc2:	f043 0220 	orr.w	r2, r3, #32
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002fca:	b662      	cpsie	i
}
 8002fcc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e09a      	b.n	8003110 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d1d9      	bne.n	8002f9c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ff6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800302a:	b662      	cpsie	i
}
 800302c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800304a:	3b01      	subs	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003056:	b29b      	uxth	r3, r3
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003060:	e042      	b.n	80030e8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003064:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 fb84 	bl	8003774 <I2C_WaitOnRXNEFlagUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e04c      	b.n	8003110 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	691a      	ldr	r2, [r3, #16]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d118      	bne.n	80030e8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	691a      	ldr	r2, [r3, #16]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030de:	b29b      	uxth	r3, r3
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f47f ae94 	bne.w	8002e1a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	e000      	b.n	8003110 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800310e:	2302      	movs	r3, #2
  }
}
 8003110:	4618      	mov	r0, r3
 8003112:	3728      	adds	r7, #40	@ 0x28
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	00010004 	.word	0x00010004
 800311c:	20000000 	.word	0x20000000
 8003120:	14f8b589 	.word	0x14f8b589

08003124 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b088      	sub	sp, #32
 8003128:	af02      	add	r7, sp, #8
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	4608      	mov	r0, r1
 800312e:	4611      	mov	r1, r2
 8003130:	461a      	mov	r2, r3
 8003132:	4603      	mov	r3, r0
 8003134:	817b      	strh	r3, [r7, #10]
 8003136:	460b      	mov	r3, r1
 8003138:	813b      	strh	r3, [r7, #8]
 800313a:	4613      	mov	r3, r2
 800313c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800314c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800314e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	2200      	movs	r2, #0
 8003156:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f960 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00d      	beq.n	8003182 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003170:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003174:	d103      	bne.n	800317e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800317c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e05f      	b.n	8003242 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003182:	897b      	ldrh	r3, [r7, #10]
 8003184:	b2db      	uxtb	r3, r3
 8003186:	461a      	mov	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003190:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	6a3a      	ldr	r2, [r7, #32]
 8003196:	492d      	ldr	r1, [pc, #180]	@ (800324c <I2C_RequestMemoryWrite+0x128>)
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 f9bb 	bl	8003514 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e04c      	b.n	8003242 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031c0:	6a39      	ldr	r1, [r7, #32]
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 fa46 	bl	8003654 <I2C_WaitOnTXEFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00d      	beq.n	80031ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d107      	bne.n	80031e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e02b      	b.n	8003242 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d105      	bne.n	80031fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031f0:	893b      	ldrh	r3, [r7, #8]
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	611a      	str	r2, [r3, #16]
 80031fa:	e021      	b.n	8003240 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031fc:	893b      	ldrh	r3, [r7, #8]
 80031fe:	0a1b      	lsrs	r3, r3, #8
 8003200:	b29b      	uxth	r3, r3
 8003202:	b2da      	uxtb	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800320a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800320c:	6a39      	ldr	r1, [r7, #32]
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 fa20 	bl	8003654 <I2C_WaitOnTXEFlagUntilTimeout>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00d      	beq.n	8003236 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321e:	2b04      	cmp	r3, #4
 8003220:	d107      	bne.n	8003232 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003230:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e005      	b.n	8003242 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003236:	893b      	ldrh	r3, [r7, #8]
 8003238:	b2da      	uxtb	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	00010002 	.word	0x00010002

08003250 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af02      	add	r7, sp, #8
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	4608      	mov	r0, r1
 800325a:	4611      	mov	r1, r2
 800325c:	461a      	mov	r2, r3
 800325e:	4603      	mov	r3, r0
 8003260:	817b      	strh	r3, [r7, #10]
 8003262:	460b      	mov	r3, r1
 8003264:	813b      	strh	r3, [r7, #8]
 8003266:	4613      	mov	r3, r2
 8003268:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003278:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003288:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800328a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	2200      	movs	r2, #0
 8003292:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 f8c2 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00d      	beq.n	80032be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032b0:	d103      	bne.n	80032ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e0aa      	b.n	8003414 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032be:	897b      	ldrh	r3, [r7, #10]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	461a      	mov	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d0:	6a3a      	ldr	r2, [r7, #32]
 80032d2:	4952      	ldr	r1, [pc, #328]	@ (800341c <I2C_RequestMemoryRead+0x1cc>)
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 f91d 	bl	8003514 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e097      	b.n	8003414 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032e4:	2300      	movs	r3, #0
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032fc:	6a39      	ldr	r1, [r7, #32]
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 f9a8 	bl	8003654 <I2C_WaitOnTXEFlagUntilTimeout>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00d      	beq.n	8003326 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330e:	2b04      	cmp	r3, #4
 8003310:	d107      	bne.n	8003322 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003320:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e076      	b.n	8003414 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003326:	88fb      	ldrh	r3, [r7, #6]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d105      	bne.n	8003338 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800332c:	893b      	ldrh	r3, [r7, #8]
 800332e:	b2da      	uxtb	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	611a      	str	r2, [r3, #16]
 8003336:	e021      	b.n	800337c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003338:	893b      	ldrh	r3, [r7, #8]
 800333a:	0a1b      	lsrs	r3, r3, #8
 800333c:	b29b      	uxth	r3, r3
 800333e:	b2da      	uxtb	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003348:	6a39      	ldr	r1, [r7, #32]
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 f982 	bl	8003654 <I2C_WaitOnTXEFlagUntilTimeout>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00d      	beq.n	8003372 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	2b04      	cmp	r3, #4
 800335c:	d107      	bne.n	800336e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800336c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e050      	b.n	8003414 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003372:	893b      	ldrh	r3, [r7, #8]
 8003374:	b2da      	uxtb	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800337c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800337e:	6a39      	ldr	r1, [r7, #32]
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 f967 	bl	8003654 <I2C_WaitOnTXEFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00d      	beq.n	80033a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003390:	2b04      	cmp	r3, #4
 8003392:	d107      	bne.n	80033a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e035      	b.n	8003414 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	2200      	movs	r2, #0
 80033c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 f82b 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00d      	beq.n	80033ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033de:	d103      	bne.n	80033e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e013      	b.n	8003414 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80033ec:	897b      	ldrh	r3, [r7, #10]
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fe:	6a3a      	ldr	r2, [r7, #32]
 8003400:	4906      	ldr	r1, [pc, #24]	@ (800341c <I2C_RequestMemoryRead+0x1cc>)
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 f886 	bl	8003514 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	00010002 	.word	0x00010002

08003420 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	603b      	str	r3, [r7, #0]
 800342c:	4613      	mov	r3, r2
 800342e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003430:	e048      	b.n	80034c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003438:	d044      	beq.n	80034c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800343a:	f7fe ff01 	bl	8002240 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	429a      	cmp	r2, r3
 8003448:	d302      	bcc.n	8003450 <I2C_WaitOnFlagUntilTimeout+0x30>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d139      	bne.n	80034c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	0c1b      	lsrs	r3, r3, #16
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b01      	cmp	r3, #1
 8003458:	d10d      	bne.n	8003476 <I2C_WaitOnFlagUntilTimeout+0x56>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	43da      	mvns	r2, r3
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	4013      	ands	r3, r2
 8003466:	b29b      	uxth	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	bf0c      	ite	eq
 800346c:	2301      	moveq	r3, #1
 800346e:	2300      	movne	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	461a      	mov	r2, r3
 8003474:	e00c      	b.n	8003490 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	43da      	mvns	r2, r3
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	4013      	ands	r3, r2
 8003482:	b29b      	uxth	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	bf0c      	ite	eq
 8003488:	2301      	moveq	r3, #1
 800348a:	2300      	movne	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	461a      	mov	r2, r3
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	429a      	cmp	r2, r3
 8003494:	d116      	bne.n	80034c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b0:	f043 0220 	orr.w	r2, r3, #32
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e023      	b.n	800350c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	0c1b      	lsrs	r3, r3, #16
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d10d      	bne.n	80034ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	43da      	mvns	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	4013      	ands	r3, r2
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bf0c      	ite	eq
 80034e0:	2301      	moveq	r3, #1
 80034e2:	2300      	movne	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	461a      	mov	r2, r3
 80034e8:	e00c      	b.n	8003504 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	43da      	mvns	r2, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	4013      	ands	r3, r2
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	bf0c      	ite	eq
 80034fc:	2301      	moveq	r3, #1
 80034fe:	2300      	movne	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	461a      	mov	r2, r3
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	429a      	cmp	r2, r3
 8003508:	d093      	beq.n	8003432 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003522:	e071      	b.n	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800352e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003532:	d123      	bne.n	800357c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003542:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800354c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003568:	f043 0204 	orr.w	r2, r3, #4
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e067      	b.n	800364c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003582:	d041      	beq.n	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003584:	f7fe fe5c 	bl	8002240 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	429a      	cmp	r2, r3
 8003592:	d302      	bcc.n	800359a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d136      	bne.n	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	0c1b      	lsrs	r3, r3, #16
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d10c      	bne.n	80035be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	43da      	mvns	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4013      	ands	r3, r2
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	bf14      	ite	ne
 80035b6:	2301      	movne	r3, #1
 80035b8:	2300      	moveq	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	e00b      	b.n	80035d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	43da      	mvns	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4013      	ands	r3, r2
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	bf14      	ite	ne
 80035d0:	2301      	movne	r3, #1
 80035d2:	2300      	moveq	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d016      	beq.n	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2220      	movs	r2, #32
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f4:	f043 0220 	orr.w	r2, r3, #32
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e021      	b.n	800364c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	0c1b      	lsrs	r3, r3, #16
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b01      	cmp	r3, #1
 8003610:	d10c      	bne.n	800362c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	43da      	mvns	r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	4013      	ands	r3, r2
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	bf14      	ite	ne
 8003624:	2301      	movne	r3, #1
 8003626:	2300      	moveq	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	e00b      	b.n	8003644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	43da      	mvns	r2, r3
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4013      	ands	r3, r2
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	bf14      	ite	ne
 800363e:	2301      	movne	r3, #1
 8003640:	2300      	moveq	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	f47f af6d 	bne.w	8003524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003660:	e034      	b.n	80036cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f8e3 	bl	800382e <I2C_IsAcknowledgeFailed>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e034      	b.n	80036dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003678:	d028      	beq.n	80036cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367a:	f7fe fde1 	bl	8002240 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	429a      	cmp	r2, r3
 8003688:	d302      	bcc.n	8003690 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d11d      	bne.n	80036cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800369a:	2b80      	cmp	r3, #128	@ 0x80
 800369c:	d016      	beq.n	80036cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b8:	f043 0220 	orr.w	r2, r3, #32
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e007      	b.n	80036dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d6:	2b80      	cmp	r3, #128	@ 0x80
 80036d8:	d1c3      	bne.n	8003662 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036f0:	e034      	b.n	800375c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 f89b 	bl	800382e <I2C_IsAcknowledgeFailed>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e034      	b.n	800376c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003708:	d028      	beq.n	800375c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800370a:	f7fe fd99 	bl	8002240 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	429a      	cmp	r2, r3
 8003718:	d302      	bcc.n	8003720 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d11d      	bne.n	800375c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b04      	cmp	r3, #4
 800372c:	d016      	beq.n	800375c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	f043 0220 	orr.w	r2, r3, #32
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e007      	b.n	800376c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b04      	cmp	r3, #4
 8003768:	d1c3      	bne.n	80036f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003780:	e049      	b.n	8003816 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	2b10      	cmp	r3, #16
 800378e:	d119      	bne.n	80037c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0210 	mvn.w	r2, #16
 8003798:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e030      	b.n	8003826 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c4:	f7fe fd3c 	bl	8002240 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d302      	bcc.n	80037da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d11d      	bne.n	8003816 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e4:	2b40      	cmp	r3, #64	@ 0x40
 80037e6:	d016      	beq.n	8003816 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003802:	f043 0220 	orr.w	r2, r3, #32
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e007      	b.n	8003826 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003820:	2b40      	cmp	r3, #64	@ 0x40
 8003822:	d1ae      	bne.n	8003782 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003840:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003844:	d11b      	bne.n	800387e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800384e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2220      	movs	r2, #32
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386a:	f043 0204 	orr.w	r2, r3, #4
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr
	...

0800388c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e272      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 8087 	beq.w	80039ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038ac:	4b92      	ldr	r3, [pc, #584]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 030c 	and.w	r3, r3, #12
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d00c      	beq.n	80038d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038b8:	4b8f      	ldr	r3, [pc, #572]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 030c 	and.w	r3, r3, #12
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d112      	bne.n	80038ea <HAL_RCC_OscConfig+0x5e>
 80038c4:	4b8c      	ldr	r3, [pc, #560]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038d0:	d10b      	bne.n	80038ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d2:	4b89      	ldr	r3, [pc, #548]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d06c      	beq.n	80039b8 <HAL_RCC_OscConfig+0x12c>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d168      	bne.n	80039b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e24c      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038f2:	d106      	bne.n	8003902 <HAL_RCC_OscConfig+0x76>
 80038f4:	4b80      	ldr	r3, [pc, #512]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a7f      	ldr	r2, [pc, #508]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80038fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	e02e      	b.n	8003960 <HAL_RCC_OscConfig+0xd4>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10c      	bne.n	8003924 <HAL_RCC_OscConfig+0x98>
 800390a:	4b7b      	ldr	r3, [pc, #492]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a7a      	ldr	r2, [pc, #488]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003910:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	4b78      	ldr	r3, [pc, #480]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a77      	ldr	r2, [pc, #476]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 800391c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	e01d      	b.n	8003960 <HAL_RCC_OscConfig+0xd4>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800392c:	d10c      	bne.n	8003948 <HAL_RCC_OscConfig+0xbc>
 800392e:	4b72      	ldr	r3, [pc, #456]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a71      	ldr	r2, [pc, #452]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003934:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	4b6f      	ldr	r3, [pc, #444]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a6e      	ldr	r2, [pc, #440]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	e00b      	b.n	8003960 <HAL_RCC_OscConfig+0xd4>
 8003948:	4b6b      	ldr	r3, [pc, #428]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a6a      	ldr	r2, [pc, #424]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 800394e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	4b68      	ldr	r3, [pc, #416]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a67      	ldr	r2, [pc, #412]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 800395a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800395e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d013      	beq.n	8003990 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003968:	f7fe fc6a 	bl	8002240 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003970:	f7fe fc66 	bl	8002240 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b64      	cmp	r3, #100	@ 0x64
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e200      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003982:	4b5d      	ldr	r3, [pc, #372]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0f0      	beq.n	8003970 <HAL_RCC_OscConfig+0xe4>
 800398e:	e014      	b.n	80039ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003990:	f7fe fc56 	bl	8002240 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003998:	f7fe fc52 	bl	8002240 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b64      	cmp	r3, #100	@ 0x64
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e1ec      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039aa:	4b53      	ldr	r3, [pc, #332]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x10c>
 80039b6:	e000      	b.n	80039ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d063      	beq.n	8003a8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039c6:	4b4c      	ldr	r3, [pc, #304]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00b      	beq.n	80039ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039d2:	4b49      	ldr	r3, [pc, #292]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f003 030c 	and.w	r3, r3, #12
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d11c      	bne.n	8003a18 <HAL_RCC_OscConfig+0x18c>
 80039de:	4b46      	ldr	r3, [pc, #280]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d116      	bne.n	8003a18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ea:	4b43      	ldr	r3, [pc, #268]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d005      	beq.n	8003a02 <HAL_RCC_OscConfig+0x176>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d001      	beq.n	8003a02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e1c0      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a02:	4b3d      	ldr	r3, [pc, #244]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	4939      	ldr	r1, [pc, #228]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a16:	e03a      	b.n	8003a8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d020      	beq.n	8003a62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a20:	4b36      	ldr	r3, [pc, #216]	@ (8003afc <HAL_RCC_OscConfig+0x270>)
 8003a22:	2201      	movs	r2, #1
 8003a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a26:	f7fe fc0b 	bl	8002240 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a2e:	f7fe fc07 	bl	8002240 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e1a1      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a40:	4b2d      	ldr	r3, [pc, #180]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	4927      	ldr	r1, [pc, #156]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	600b      	str	r3, [r1, #0]
 8003a60:	e015      	b.n	8003a8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a62:	4b26      	ldr	r3, [pc, #152]	@ (8003afc <HAL_RCC_OscConfig+0x270>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a68:	f7fe fbea 	bl	8002240 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a70:	f7fe fbe6 	bl	8002240 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e180      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a82:	4b1d      	ldr	r3, [pc, #116]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d03a      	beq.n	8003b10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d019      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa2:	4b17      	ldr	r3, [pc, #92]	@ (8003b00 <HAL_RCC_OscConfig+0x274>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aa8:	f7fe fbca 	bl	8002240 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ab0:	f7fe fbc6 	bl	8002240 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e160      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f0      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ace:	2001      	movs	r0, #1
 8003ad0:	f000 faba 	bl	8004048 <RCC_Delay>
 8003ad4:	e01c      	b.n	8003b10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8003b00 <HAL_RCC_OscConfig+0x274>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003adc:	f7fe fbb0 	bl	8002240 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae2:	e00f      	b.n	8003b04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ae4:	f7fe fbac 	bl	8002240 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d908      	bls.n	8003b04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e146      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
 8003af6:	bf00      	nop
 8003af8:	40021000 	.word	0x40021000
 8003afc:	42420000 	.word	0x42420000
 8003b00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b04:	4b92      	ldr	r3, [pc, #584]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1e9      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80a6 	beq.w	8003c6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b22:	4b8b      	ldr	r3, [pc, #556]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10d      	bne.n	8003b4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b2e:	4b88      	ldr	r3, [pc, #544]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	4a87      	ldr	r2, [pc, #540]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b38:	61d3      	str	r3, [r2, #28]
 8003b3a:	4b85      	ldr	r3, [pc, #532]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b46:	2301      	movs	r3, #1
 8003b48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4a:	4b82      	ldr	r3, [pc, #520]	@ (8003d54 <HAL_RCC_OscConfig+0x4c8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d118      	bne.n	8003b88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b56:	4b7f      	ldr	r3, [pc, #508]	@ (8003d54 <HAL_RCC_OscConfig+0x4c8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a7e      	ldr	r2, [pc, #504]	@ (8003d54 <HAL_RCC_OscConfig+0x4c8>)
 8003b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b62:	f7fe fb6d 	bl	8002240 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6a:	f7fe fb69 	bl	8002240 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b64      	cmp	r3, #100	@ 0x64
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e103      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7c:	4b75      	ldr	r3, [pc, #468]	@ (8003d54 <HAL_RCC_OscConfig+0x4c8>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d106      	bne.n	8003b9e <HAL_RCC_OscConfig+0x312>
 8003b90:	4b6f      	ldr	r3, [pc, #444]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	4a6e      	ldr	r2, [pc, #440]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	6213      	str	r3, [r2, #32]
 8003b9c:	e02d      	b.n	8003bfa <HAL_RCC_OscConfig+0x36e>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x334>
 8003ba6:	4b6a      	ldr	r3, [pc, #424]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	4a69      	ldr	r2, [pc, #420]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003bac:	f023 0301 	bic.w	r3, r3, #1
 8003bb0:	6213      	str	r3, [r2, #32]
 8003bb2:	4b67      	ldr	r3, [pc, #412]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	4a66      	ldr	r2, [pc, #408]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003bb8:	f023 0304 	bic.w	r3, r3, #4
 8003bbc:	6213      	str	r3, [r2, #32]
 8003bbe:	e01c      	b.n	8003bfa <HAL_RCC_OscConfig+0x36e>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	2b05      	cmp	r3, #5
 8003bc6:	d10c      	bne.n	8003be2 <HAL_RCC_OscConfig+0x356>
 8003bc8:	4b61      	ldr	r3, [pc, #388]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	4a60      	ldr	r2, [pc, #384]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003bce:	f043 0304 	orr.w	r3, r3, #4
 8003bd2:	6213      	str	r3, [r2, #32]
 8003bd4:	4b5e      	ldr	r3, [pc, #376]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	4a5d      	ldr	r2, [pc, #372]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	6213      	str	r3, [r2, #32]
 8003be0:	e00b      	b.n	8003bfa <HAL_RCC_OscConfig+0x36e>
 8003be2:	4b5b      	ldr	r3, [pc, #364]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	4a5a      	ldr	r2, [pc, #360]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003be8:	f023 0301 	bic.w	r3, r3, #1
 8003bec:	6213      	str	r3, [r2, #32]
 8003bee:	4b58      	ldr	r3, [pc, #352]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	4a57      	ldr	r2, [pc, #348]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003bf4:	f023 0304 	bic.w	r3, r3, #4
 8003bf8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d015      	beq.n	8003c2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c02:	f7fe fb1d 	bl	8002240 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c08:	e00a      	b.n	8003c20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0a:	f7fe fb19 	bl	8002240 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e0b1      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c20:	4b4b      	ldr	r3, [pc, #300]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0ee      	beq.n	8003c0a <HAL_RCC_OscConfig+0x37e>
 8003c2c:	e014      	b.n	8003c58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c2e:	f7fe fb07 	bl	8002240 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c34:	e00a      	b.n	8003c4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c36:	f7fe fb03 	bl	8002240 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e09b      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c4c:	4b40      	ldr	r3, [pc, #256]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1ee      	bne.n	8003c36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d105      	bne.n	8003c6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c5e:	4b3c      	ldr	r3, [pc, #240]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	4a3b      	ldr	r2, [pc, #236]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003c64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 8087 	beq.w	8003d82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c74:	4b36      	ldr	r3, [pc, #216]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f003 030c 	and.w	r3, r3, #12
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d061      	beq.n	8003d44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d146      	bne.n	8003d16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c88:	4b33      	ldr	r3, [pc, #204]	@ (8003d58 <HAL_RCC_OscConfig+0x4cc>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8e:	f7fe fad7 	bl	8002240 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c96:	f7fe fad3 	bl	8002240 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e06d      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ca8:	4b29      	ldr	r3, [pc, #164]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f0      	bne.n	8003c96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cbc:	d108      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cbe:	4b24      	ldr	r3, [pc, #144]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	4921      	ldr	r1, [pc, #132]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a19      	ldr	r1, [r3, #32]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce0:	430b      	orrs	r3, r1
 8003ce2:	491b      	ldr	r1, [pc, #108]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d58 <HAL_RCC_OscConfig+0x4cc>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cee:	f7fe faa7 	bl	8002240 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf6:	f7fe faa3 	bl	8002240 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e03d      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d08:	4b11      	ldr	r3, [pc, #68]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0f0      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x46a>
 8003d14:	e035      	b.n	8003d82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d16:	4b10      	ldr	r3, [pc, #64]	@ (8003d58 <HAL_RCC_OscConfig+0x4cc>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1c:	f7fe fa90 	bl	8002240 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d24:	f7fe fa8c 	bl	8002240 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e026      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d36:	4b06      	ldr	r3, [pc, #24]	@ (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1f0      	bne.n	8003d24 <HAL_RCC_OscConfig+0x498>
 8003d42:	e01e      	b.n	8003d82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d107      	bne.n	8003d5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e019      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
 8003d50:	40021000 	.word	0x40021000
 8003d54:	40007000 	.word	0x40007000
 8003d58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d8c <HAL_RCC_OscConfig+0x500>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d106      	bne.n	8003d7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d001      	beq.n	8003d82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e000      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40021000 	.word	0x40021000

08003d90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e0d0      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003da4:	4b6a      	ldr	r3, [pc, #424]	@ (8003f50 <HAL_RCC_ClockConfig+0x1c0>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d910      	bls.n	8003dd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db2:	4b67      	ldr	r3, [pc, #412]	@ (8003f50 <HAL_RCC_ClockConfig+0x1c0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f023 0207 	bic.w	r2, r3, #7
 8003dba:	4965      	ldr	r1, [pc, #404]	@ (8003f50 <HAL_RCC_ClockConfig+0x1c0>)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc2:	4b63      	ldr	r3, [pc, #396]	@ (8003f50 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d001      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e0b8      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d020      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d005      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dec:	4b59      	ldr	r3, [pc, #356]	@ (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	4a58      	ldr	r2, [pc, #352]	@ (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003df2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003df6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0308 	and.w	r3, r3, #8
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d005      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e04:	4b53      	ldr	r3, [pc, #332]	@ (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	4a52      	ldr	r2, [pc, #328]	@ (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003e0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e10:	4b50      	ldr	r3, [pc, #320]	@ (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	494d      	ldr	r1, [pc, #308]	@ (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d040      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d107      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e36:	4b47      	ldr	r3, [pc, #284]	@ (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d115      	bne.n	8003e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e07f      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d107      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e4e:	4b41      	ldr	r3, [pc, #260]	@ (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d109      	bne.n	8003e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e073      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e5e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e06b      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e6e:	4b39      	ldr	r3, [pc, #228]	@ (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f023 0203 	bic.w	r2, r3, #3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	4936      	ldr	r1, [pc, #216]	@ (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e80:	f7fe f9de 	bl	8002240 <HAL_GetTick>
 8003e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e86:	e00a      	b.n	8003e9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e88:	f7fe f9da 	bl	8002240 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e053      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e9e:	4b2d      	ldr	r3, [pc, #180]	@ (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f003 020c 	and.w	r2, r3, #12
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d1eb      	bne.n	8003e88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003eb0:	4b27      	ldr	r3, [pc, #156]	@ (8003f50 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d210      	bcs.n	8003ee0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ebe:	4b24      	ldr	r3, [pc, #144]	@ (8003f50 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f023 0207 	bic.w	r2, r3, #7
 8003ec6:	4922      	ldr	r1, [pc, #136]	@ (8003f50 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ece:	4b20      	ldr	r3, [pc, #128]	@ (8003f50 <HAL_RCC_ClockConfig+0x1c0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e032      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d008      	beq.n	8003efe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eec:	4b19      	ldr	r3, [pc, #100]	@ (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	4916      	ldr	r1, [pc, #88]	@ (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d009      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f0a:	4b12      	ldr	r3, [pc, #72]	@ (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	490e      	ldr	r1, [pc, #56]	@ (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f1e:	f000 f821 	bl	8003f64 <HAL_RCC_GetSysClockFreq>
 8003f22:	4602      	mov	r2, r0
 8003f24:	4b0b      	ldr	r3, [pc, #44]	@ (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	091b      	lsrs	r3, r3, #4
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	490a      	ldr	r1, [pc, #40]	@ (8003f58 <HAL_RCC_ClockConfig+0x1c8>)
 8003f30:	5ccb      	ldrb	r3, [r1, r3]
 8003f32:	fa22 f303 	lsr.w	r3, r2, r3
 8003f36:	4a09      	ldr	r2, [pc, #36]	@ (8003f5c <HAL_RCC_ClockConfig+0x1cc>)
 8003f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f3a:	4b09      	ldr	r3, [pc, #36]	@ (8003f60 <HAL_RCC_ClockConfig+0x1d0>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fe f93c 	bl	80021bc <HAL_InitTick>

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40022000 	.word	0x40022000
 8003f54:	40021000 	.word	0x40021000
 8003f58:	08004ba4 	.word	0x08004ba4
 8003f5c:	20000000 	.word	0x20000000
 8003f60:	20000004 	.word	0x20000004

08003f64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60bb      	str	r3, [r7, #8]
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	2300      	movs	r3, #0
 8003f78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f003 030c 	and.w	r3, r3, #12
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d002      	beq.n	8003f94 <HAL_RCC_GetSysClockFreq+0x30>
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	d003      	beq.n	8003f9a <HAL_RCC_GetSysClockFreq+0x36>
 8003f92:	e027      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f94:	4b19      	ldr	r3, [pc, #100]	@ (8003ffc <HAL_RCC_GetSysClockFreq+0x98>)
 8003f96:	613b      	str	r3, [r7, #16]
      break;
 8003f98:	e027      	b.n	8003fea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	0c9b      	lsrs	r3, r3, #18
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	4a17      	ldr	r2, [pc, #92]	@ (8004000 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fa4:	5cd3      	ldrb	r3, [r2, r3]
 8003fa6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d010      	beq.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fb2:	4b11      	ldr	r3, [pc, #68]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	0c5b      	lsrs	r3, r3, #17
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	4a11      	ldr	r2, [pc, #68]	@ (8004004 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003fbe:	5cd3      	ldrb	r3, [r2, r3]
 8003fc0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8003ffc <HAL_RCC_GetSysClockFreq+0x98>)
 8003fc6:	fb03 f202 	mul.w	r2, r3, r2
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	e004      	b.n	8003fde <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8004008 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003fd8:	fb02 f303 	mul.w	r3, r2, r3
 8003fdc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	613b      	str	r3, [r7, #16]
      break;
 8003fe2:	e002      	b.n	8003fea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fe4:	4b05      	ldr	r3, [pc, #20]	@ (8003ffc <HAL_RCC_GetSysClockFreq+0x98>)
 8003fe6:	613b      	str	r3, [r7, #16]
      break;
 8003fe8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fea:	693b      	ldr	r3, [r7, #16]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	371c      	adds	r7, #28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bc80      	pop	{r7}
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	007a1200 	.word	0x007a1200
 8004000:	08004bbc 	.word	0x08004bbc
 8004004:	08004bcc 	.word	0x08004bcc
 8004008:	003d0900 	.word	0x003d0900

0800400c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004010:	4b02      	ldr	r3, [pc, #8]	@ (800401c <HAL_RCC_GetHCLKFreq+0x10>)
 8004012:	681b      	ldr	r3, [r3, #0]
}
 8004014:	4618      	mov	r0, r3
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr
 800401c:	20000000 	.word	0x20000000

08004020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004024:	f7ff fff2 	bl	800400c <HAL_RCC_GetHCLKFreq>
 8004028:	4602      	mov	r2, r0
 800402a:	4b05      	ldr	r3, [pc, #20]	@ (8004040 <HAL_RCC_GetPCLK1Freq+0x20>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	0a1b      	lsrs	r3, r3, #8
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	4903      	ldr	r1, [pc, #12]	@ (8004044 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004036:	5ccb      	ldrb	r3, [r1, r3]
 8004038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800403c:	4618      	mov	r0, r3
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40021000 	.word	0x40021000
 8004044:	08004bb4 	.word	0x08004bb4

08004048 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004050:	4b0a      	ldr	r3, [pc, #40]	@ (800407c <RCC_Delay+0x34>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a0a      	ldr	r2, [pc, #40]	@ (8004080 <RCC_Delay+0x38>)
 8004056:	fba2 2303 	umull	r2, r3, r2, r3
 800405a:	0a5b      	lsrs	r3, r3, #9
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	fb02 f303 	mul.w	r3, r2, r3
 8004062:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004064:	bf00      	nop
  }
  while (Delay --);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	1e5a      	subs	r2, r3, #1
 800406a:	60fa      	str	r2, [r7, #12]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1f9      	bne.n	8004064 <RCC_Delay+0x1c>
}
 8004070:	bf00      	nop
 8004072:	bf00      	nop
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	bc80      	pop	{r7}
 800407a:	4770      	bx	lr
 800407c:	20000000 	.word	0x20000000
 8004080:	10624dd3 	.word	0x10624dd3

08004084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e041      	b.n	800411a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fd ff84 	bl	8001fb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3304      	adds	r3, #4
 80040c0:	4619      	mov	r1, r3
 80040c2:	4610      	mov	r0, r2
 80040c4:	f000 fa06 	bl	80044d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b082      	sub	sp, #8
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e041      	b.n	80041b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d106      	bne.n	800414e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7fd ff53 	bl	8001ff4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2202      	movs	r2, #2
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3304      	adds	r3, #4
 800415e:	4619      	mov	r1, r3
 8004160:	4610      	mov	r0, r2
 8004162:	f000 f9b7 	bl	80044d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d101      	bne.n	80041de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041da:	2302      	movs	r3, #2
 80041dc:	e0ae      	b.n	800433c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b0c      	cmp	r3, #12
 80041ea:	f200 809f 	bhi.w	800432c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80041ee:	a201      	add	r2, pc, #4	@ (adr r2, 80041f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f4:	08004229 	.word	0x08004229
 80041f8:	0800432d 	.word	0x0800432d
 80041fc:	0800432d 	.word	0x0800432d
 8004200:	0800432d 	.word	0x0800432d
 8004204:	08004269 	.word	0x08004269
 8004208:	0800432d 	.word	0x0800432d
 800420c:	0800432d 	.word	0x0800432d
 8004210:	0800432d 	.word	0x0800432d
 8004214:	080042ab 	.word	0x080042ab
 8004218:	0800432d 	.word	0x0800432d
 800421c:	0800432d 	.word	0x0800432d
 8004220:	0800432d 	.word	0x0800432d
 8004224:	080042eb 	.word	0x080042eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	4618      	mov	r0, r3
 8004230:	f000 f9b2 	bl	8004598 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0208 	orr.w	r2, r2, #8
 8004242:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	699a      	ldr	r2, [r3, #24]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0204 	bic.w	r2, r2, #4
 8004252:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6999      	ldr	r1, [r3, #24]
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	691a      	ldr	r2, [r3, #16]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	619a      	str	r2, [r3, #24]
      break;
 8004266:	e064      	b.n	8004332 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68b9      	ldr	r1, [r7, #8]
 800426e:	4618      	mov	r0, r3
 8004270:	f000 f9f8 	bl	8004664 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004282:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699a      	ldr	r2, [r3, #24]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004292:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6999      	ldr	r1, [r3, #24]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	021a      	lsls	r2, r3, #8
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	619a      	str	r2, [r3, #24]
      break;
 80042a8:	e043      	b.n	8004332 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68b9      	ldr	r1, [r7, #8]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fa41 	bl	8004738 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	69da      	ldr	r2, [r3, #28]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f042 0208 	orr.w	r2, r2, #8
 80042c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69da      	ldr	r2, [r3, #28]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0204 	bic.w	r2, r2, #4
 80042d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69d9      	ldr	r1, [r3, #28]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	61da      	str	r2, [r3, #28]
      break;
 80042e8:	e023      	b.n	8004332 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68b9      	ldr	r1, [r7, #8]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 fa8b 	bl	800480c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69da      	ldr	r2, [r3, #28]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004304:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	69da      	ldr	r2, [r3, #28]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004314:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69d9      	ldr	r1, [r3, #28]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	021a      	lsls	r2, r3, #8
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	61da      	str	r2, [r3, #28]
      break;
 800432a:	e002      	b.n	8004332 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	75fb      	strb	r3, [r7, #23]
      break;
 8004330:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800433a:	7dfb      	ldrb	r3, [r7, #23]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3718      	adds	r7, #24
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800434e:	2300      	movs	r3, #0
 8004350:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_TIM_ConfigClockSource+0x1c>
 800435c:	2302      	movs	r3, #2
 800435e:	e0b4      	b.n	80044ca <HAL_TIM_ConfigClockSource+0x186>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800437e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004386:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004398:	d03e      	beq.n	8004418 <HAL_TIM_ConfigClockSource+0xd4>
 800439a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800439e:	f200 8087 	bhi.w	80044b0 <HAL_TIM_ConfigClockSource+0x16c>
 80043a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043a6:	f000 8086 	beq.w	80044b6 <HAL_TIM_ConfigClockSource+0x172>
 80043aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ae:	d87f      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x16c>
 80043b0:	2b70      	cmp	r3, #112	@ 0x70
 80043b2:	d01a      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0xa6>
 80043b4:	2b70      	cmp	r3, #112	@ 0x70
 80043b6:	d87b      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x16c>
 80043b8:	2b60      	cmp	r3, #96	@ 0x60
 80043ba:	d050      	beq.n	800445e <HAL_TIM_ConfigClockSource+0x11a>
 80043bc:	2b60      	cmp	r3, #96	@ 0x60
 80043be:	d877      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x16c>
 80043c0:	2b50      	cmp	r3, #80	@ 0x50
 80043c2:	d03c      	beq.n	800443e <HAL_TIM_ConfigClockSource+0xfa>
 80043c4:	2b50      	cmp	r3, #80	@ 0x50
 80043c6:	d873      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x16c>
 80043c8:	2b40      	cmp	r3, #64	@ 0x40
 80043ca:	d058      	beq.n	800447e <HAL_TIM_ConfigClockSource+0x13a>
 80043cc:	2b40      	cmp	r3, #64	@ 0x40
 80043ce:	d86f      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x16c>
 80043d0:	2b30      	cmp	r3, #48	@ 0x30
 80043d2:	d064      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x15a>
 80043d4:	2b30      	cmp	r3, #48	@ 0x30
 80043d6:	d86b      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x16c>
 80043d8:	2b20      	cmp	r3, #32
 80043da:	d060      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x15a>
 80043dc:	2b20      	cmp	r3, #32
 80043de:	d867      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x16c>
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d05c      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x15a>
 80043e4:	2b10      	cmp	r3, #16
 80043e6:	d05a      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x15a>
 80043e8:	e062      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043fa:	f000 facc 	bl	8004996 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800440c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	609a      	str	r2, [r3, #8]
      break;
 8004416:	e04f      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004428:	f000 fab5 	bl	8004996 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800443a:	609a      	str	r2, [r3, #8]
      break;
 800443c:	e03c      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800444a:	461a      	mov	r2, r3
 800444c:	f000 fa2c 	bl	80048a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2150      	movs	r1, #80	@ 0x50
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fa83 	bl	8004962 <TIM_ITRx_SetConfig>
      break;
 800445c:	e02c      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800446a:	461a      	mov	r2, r3
 800446c:	f000 fa4a 	bl	8004904 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2160      	movs	r1, #96	@ 0x60
 8004476:	4618      	mov	r0, r3
 8004478:	f000 fa73 	bl	8004962 <TIM_ITRx_SetConfig>
      break;
 800447c:	e01c      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800448a:	461a      	mov	r2, r3
 800448c:	f000 fa0c 	bl	80048a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2140      	movs	r1, #64	@ 0x40
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fa63 	bl	8004962 <TIM_ITRx_SetConfig>
      break;
 800449c:	e00c      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4619      	mov	r1, r3
 80044a8:	4610      	mov	r0, r2
 80044aa:	f000 fa5a 	bl	8004962 <TIM_ITRx_SetConfig>
      break;
 80044ae:	e003      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	73fb      	strb	r3, [r7, #15]
      break;
 80044b4:	e000      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a29      	ldr	r2, [pc, #164]	@ (800458c <TIM_Base_SetConfig+0xb8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d00b      	beq.n	8004504 <TIM_Base_SetConfig+0x30>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044f2:	d007      	beq.n	8004504 <TIM_Base_SetConfig+0x30>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a26      	ldr	r2, [pc, #152]	@ (8004590 <TIM_Base_SetConfig+0xbc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d003      	beq.n	8004504 <TIM_Base_SetConfig+0x30>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a25      	ldr	r2, [pc, #148]	@ (8004594 <TIM_Base_SetConfig+0xc0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d108      	bne.n	8004516 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800450a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	4313      	orrs	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a1c      	ldr	r2, [pc, #112]	@ (800458c <TIM_Base_SetConfig+0xb8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d00b      	beq.n	8004536 <TIM_Base_SetConfig+0x62>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004524:	d007      	beq.n	8004536 <TIM_Base_SetConfig+0x62>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a19      	ldr	r2, [pc, #100]	@ (8004590 <TIM_Base_SetConfig+0xbc>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d003      	beq.n	8004536 <TIM_Base_SetConfig+0x62>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a18      	ldr	r2, [pc, #96]	@ (8004594 <TIM_Base_SetConfig+0xc0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d108      	bne.n	8004548 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800453c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	4313      	orrs	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a07      	ldr	r2, [pc, #28]	@ (800458c <TIM_Base_SetConfig+0xb8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d103      	bne.n	800457c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	615a      	str	r2, [r3, #20]
}
 8004582:	bf00      	nop
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr
 800458c:	40012c00 	.word	0x40012c00
 8004590:	40000400 	.word	0x40000400
 8004594:	40000800 	.word	0x40000800

08004598 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	f023 0201 	bic.w	r2, r3, #1
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0303 	bic.w	r3, r3, #3
 80045ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f023 0302 	bic.w	r3, r3, #2
 80045e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004660 <TIM_OC1_SetConfig+0xc8>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d10c      	bne.n	800460e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f023 0308 	bic.w	r3, r3, #8
 80045fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4313      	orrs	r3, r2
 8004604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f023 0304 	bic.w	r3, r3, #4
 800460c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a13      	ldr	r2, [pc, #76]	@ (8004660 <TIM_OC1_SetConfig+0xc8>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d111      	bne.n	800463a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800461c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	4313      	orrs	r3, r2
 800462e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	621a      	str	r2, [r3, #32]
}
 8004654:	bf00      	nop
 8004656:	371c      	adds	r7, #28
 8004658:	46bd      	mov	sp, r7
 800465a:	bc80      	pop	{r7}
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40012c00 	.word	0x40012c00

08004664 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	f023 0210 	bic.w	r2, r3, #16
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800469a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	021b      	lsls	r3, r3, #8
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f023 0320 	bic.w	r3, r3, #32
 80046ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a1d      	ldr	r2, [pc, #116]	@ (8004734 <TIM_OC2_SetConfig+0xd0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d10d      	bne.n	80046e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a14      	ldr	r2, [pc, #80]	@ (8004734 <TIM_OC2_SetConfig+0xd0>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d113      	bne.n	8004710 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	4313      	orrs	r3, r2
 800470e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	621a      	str	r2, [r3, #32]
}
 800472a:	bf00      	nop
 800472c:	371c      	adds	r7, #28
 800472e:	46bd      	mov	sp, r7
 8004730:	bc80      	pop	{r7}
 8004732:	4770      	bx	lr
 8004734:	40012c00 	.word	0x40012c00

08004738 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 0303 	bic.w	r3, r3, #3
 800476e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	021b      	lsls	r3, r3, #8
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4313      	orrs	r3, r2
 800478c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a1d      	ldr	r2, [pc, #116]	@ (8004808 <TIM_OC3_SetConfig+0xd0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d10d      	bne.n	80047b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800479c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a14      	ldr	r2, [pc, #80]	@ (8004808 <TIM_OC3_SetConfig+0xd0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d113      	bne.n	80047e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	011b      	lsls	r3, r3, #4
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	621a      	str	r2, [r3, #32]
}
 80047fc:	bf00      	nop
 80047fe:	371c      	adds	r7, #28
 8004800:	46bd      	mov	sp, r7
 8004802:	bc80      	pop	{r7}
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	40012c00 	.word	0x40012c00

0800480c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800480c:	b480      	push	{r7}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800483a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	021b      	lsls	r3, r3, #8
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4313      	orrs	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004856:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	031b      	lsls	r3, r3, #12
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a0f      	ldr	r2, [pc, #60]	@ (80048a4 <TIM_OC4_SetConfig+0x98>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d109      	bne.n	8004880 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004872:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	019b      	lsls	r3, r3, #6
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4313      	orrs	r3, r2
 800487e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	621a      	str	r2, [r3, #32]
}
 800489a:	bf00      	nop
 800489c:	371c      	adds	r7, #28
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr
 80048a4:	40012c00 	.word	0x40012c00

080048a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	f023 0201 	bic.w	r2, r3, #1
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	4313      	orrs	r3, r2
 80048dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f023 030a 	bic.w	r3, r3, #10
 80048e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	621a      	str	r2, [r3, #32]
}
 80048fa:	bf00      	nop
 80048fc:	371c      	adds	r7, #28
 80048fe:	46bd      	mov	sp, r7
 8004900:	bc80      	pop	{r7}
 8004902:	4770      	bx	lr

08004904 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	f023 0210 	bic.w	r2, r3, #16
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800492e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	031b      	lsls	r3, r3, #12
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004940:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	4313      	orrs	r3, r2
 800494a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	621a      	str	r2, [r3, #32]
}
 8004958:	bf00      	nop
 800495a:	371c      	adds	r7, #28
 800495c:	46bd      	mov	sp, r7
 800495e:	bc80      	pop	{r7}
 8004960:	4770      	bx	lr

08004962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004962:	b480      	push	{r7}
 8004964:	b085      	sub	sp, #20
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4313      	orrs	r3, r2
 8004980:	f043 0307 	orr.w	r3, r3, #7
 8004984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	609a      	str	r2, [r3, #8]
}
 800498c:	bf00      	nop
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	bc80      	pop	{r7}
 8004994:	4770      	bx	lr

08004996 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004996:	b480      	push	{r7}
 8004998:	b087      	sub	sp, #28
 800499a:	af00      	add	r7, sp, #0
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	607a      	str	r2, [r7, #4]
 80049a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	021a      	lsls	r2, r3, #8
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	431a      	orrs	r2, r3
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	4313      	orrs	r3, r2
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	609a      	str	r2, [r3, #8]
}
 80049ca:	bf00      	nop
 80049cc:	371c      	adds	r7, #28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bc80      	pop	{r7}
 80049d2:	4770      	bx	lr

080049d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d101      	bne.n	80049ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049e8:	2302      	movs	r3, #2
 80049ea:	e046      	b.n	8004a7a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a16      	ldr	r2, [pc, #88]	@ (8004a84 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00e      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a38:	d009      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a12      	ldr	r2, [pc, #72]	@ (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d004      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a10      	ldr	r2, [pc, #64]	@ (8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d10c      	bne.n	8004a68 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr
 8004a84:	40012c00 	.word	0x40012c00
 8004a88:	40000400 	.word	0x40000400
 8004a8c:	40000800 	.word	0x40000800

08004a90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e03d      	b.n	8004b28 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bc80      	pop	{r7}
 8004b30:	4770      	bx	lr

08004b32 <memset>:
 8004b32:	4603      	mov	r3, r0
 8004b34:	4402      	add	r2, r0
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d100      	bne.n	8004b3c <memset+0xa>
 8004b3a:	4770      	bx	lr
 8004b3c:	f803 1b01 	strb.w	r1, [r3], #1
 8004b40:	e7f9      	b.n	8004b36 <memset+0x4>
	...

08004b44 <__libc_init_array>:
 8004b44:	b570      	push	{r4, r5, r6, lr}
 8004b46:	2600      	movs	r6, #0
 8004b48:	4d0c      	ldr	r5, [pc, #48]	@ (8004b7c <__libc_init_array+0x38>)
 8004b4a:	4c0d      	ldr	r4, [pc, #52]	@ (8004b80 <__libc_init_array+0x3c>)
 8004b4c:	1b64      	subs	r4, r4, r5
 8004b4e:	10a4      	asrs	r4, r4, #2
 8004b50:	42a6      	cmp	r6, r4
 8004b52:	d109      	bne.n	8004b68 <__libc_init_array+0x24>
 8004b54:	f000 f81a 	bl	8004b8c <_init>
 8004b58:	2600      	movs	r6, #0
 8004b5a:	4d0a      	ldr	r5, [pc, #40]	@ (8004b84 <__libc_init_array+0x40>)
 8004b5c:	4c0a      	ldr	r4, [pc, #40]	@ (8004b88 <__libc_init_array+0x44>)
 8004b5e:	1b64      	subs	r4, r4, r5
 8004b60:	10a4      	asrs	r4, r4, #2
 8004b62:	42a6      	cmp	r6, r4
 8004b64:	d105      	bne.n	8004b72 <__libc_init_array+0x2e>
 8004b66:	bd70      	pop	{r4, r5, r6, pc}
 8004b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b6c:	4798      	blx	r3
 8004b6e:	3601      	adds	r6, #1
 8004b70:	e7ee      	b.n	8004b50 <__libc_init_array+0xc>
 8004b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b76:	4798      	blx	r3
 8004b78:	3601      	adds	r6, #1
 8004b7a:	e7f2      	b.n	8004b62 <__libc_init_array+0x1e>
 8004b7c:	08004bd8 	.word	0x08004bd8
 8004b80:	08004bd8 	.word	0x08004bd8
 8004b84:	08004bd8 	.word	0x08004bd8
 8004b88:	08004bdc 	.word	0x08004bdc

08004b8c <_init>:
 8004b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8e:	bf00      	nop
 8004b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b92:	bc08      	pop	{r3}
 8004b94:	469e      	mov	lr, r3
 8004b96:	4770      	bx	lr

08004b98 <_fini>:
 8004b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9a:	bf00      	nop
 8004b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b9e:	bc08      	pop	{r3}
 8004ba0:	469e      	mov	lr, r3
 8004ba2:	4770      	bx	lr
