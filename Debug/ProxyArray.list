
ProxyArray.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004720  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800482c  0800482c  0000582c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004858  08004858  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004858  08004858  00005858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004860  08004860  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004860  08004860  00005860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004864  08004864  00005864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004868  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000010  08004874  00006010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08004874  0000618c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000acd9  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001868  00000000  00000000  00010d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  00012578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b8  00000000  00000000  000131d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ace  00000000  00000000  00013b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db2f  00000000  00000000  0002a656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086c8c  00000000  00000000  00038185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bee11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000371c  00000000  00000000  000bee54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000c2570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08004814 	.word	0x08004814

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08004814 	.word	0x08004814

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__gedf2>:
 80008e8:	f04f 3cff 	mov.w	ip, #4294967295
 80008ec:	e006      	b.n	80008fc <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__ledf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	e002      	b.n	80008fc <__cmpdf2+0x4>
 80008f6:	bf00      	nop

080008f8 <__cmpdf2>:
 80008f8:	f04f 0c01 	mov.w	ip, #1
 80008fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800090c:	bf18      	it	ne
 800090e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000912:	d01b      	beq.n	800094c <__cmpdf2+0x54>
 8000914:	b001      	add	sp, #4
 8000916:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091a:	bf0c      	ite	eq
 800091c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000920:	ea91 0f03 	teqne	r1, r3
 8000924:	bf02      	ittt	eq
 8000926:	ea90 0f02 	teqeq	r0, r2
 800092a:	2000      	moveq	r0, #0
 800092c:	4770      	bxeq	lr
 800092e:	f110 0f00 	cmn.w	r0, #0
 8000932:	ea91 0f03 	teq	r1, r3
 8000936:	bf58      	it	pl
 8000938:	4299      	cmppl	r1, r3
 800093a:	bf08      	it	eq
 800093c:	4290      	cmpeq	r0, r2
 800093e:	bf2c      	ite	cs
 8000940:	17d8      	asrcs	r0, r3, #31
 8000942:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000946:	f040 0001 	orr.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	d102      	bne.n	800095c <__cmpdf2+0x64>
 8000956:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095a:	d107      	bne.n	800096c <__cmpdf2+0x74>
 800095c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d1d6      	bne.n	8000914 <__cmpdf2+0x1c>
 8000966:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096a:	d0d3      	beq.n	8000914 <__cmpdf2+0x1c>
 800096c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <__aeabi_cdrcmple>:
 8000974:	4684      	mov	ip, r0
 8000976:	4610      	mov	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	468c      	mov	ip, r1
 800097c:	4619      	mov	r1, r3
 800097e:	4663      	mov	r3, ip
 8000980:	e000      	b.n	8000984 <__aeabi_cdcmpeq>
 8000982:	bf00      	nop

08000984 <__aeabi_cdcmpeq>:
 8000984:	b501      	push	{r0, lr}
 8000986:	f7ff ffb7 	bl	80008f8 <__cmpdf2>
 800098a:	2800      	cmp	r0, #0
 800098c:	bf48      	it	mi
 800098e:	f110 0f00 	cmnmi.w	r0, #0
 8000992:	bd01      	pop	{r0, pc}

08000994 <__aeabi_dcmpeq>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff fff4 	bl	8000984 <__aeabi_cdcmpeq>
 800099c:	bf0c      	ite	eq
 800099e:	2001      	moveq	r0, #1
 80009a0:	2000      	movne	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmplt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffea 	bl	8000984 <__aeabi_cdcmpeq>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmple>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffe0 	bl	8000984 <__aeabi_cdcmpeq>
 80009c4:	bf94      	ite	ls
 80009c6:	2001      	movls	r0, #1
 80009c8:	2000      	movhi	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmpge>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffce 	bl	8000974 <__aeabi_cdrcmple>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpgt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffc4 	bl	8000974 <__aeabi_cdrcmple>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_d2f>:
 80009f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a00:	bf24      	itt	cs
 8000a02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a0a:	d90d      	bls.n	8000a28 <__aeabi_d2f+0x30>
 8000a0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a20:	bf08      	it	eq
 8000a22:	f020 0001 	biceq.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a2c:	d121      	bne.n	8000a72 <__aeabi_d2f+0x7a>
 8000a2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a32:	bfbc      	itt	lt
 8000a34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a38:	4770      	bxlt	lr
 8000a3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a42:	f1c2 0218 	rsb	r2, r2, #24
 8000a46:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a52:	bf18      	it	ne
 8000a54:	f040 0001 	orrne.w	r0, r0, #1
 8000a58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a64:	ea40 000c 	orr.w	r0, r0, ip
 8000a68:	fa23 f302 	lsr.w	r3, r3, r2
 8000a6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a70:	e7cc      	b.n	8000a0c <__aeabi_d2f+0x14>
 8000a72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a76:	d107      	bne.n	8000a88 <__aeabi_d2f+0x90>
 8000a78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a7c:	bf1e      	ittt	ne
 8000a7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a86:	4770      	bxne	lr
 8000a88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_ldivmod>:
 8000a98:	b97b      	cbnz	r3, 8000aba <__aeabi_ldivmod+0x22>
 8000a9a:	b972      	cbnz	r2, 8000aba <__aeabi_ldivmod+0x22>
 8000a9c:	2900      	cmp	r1, #0
 8000a9e:	bfbe      	ittt	lt
 8000aa0:	2000      	movlt	r0, #0
 8000aa2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000aa6:	e006      	blt.n	8000ab6 <__aeabi_ldivmod+0x1e>
 8000aa8:	bf08      	it	eq
 8000aaa:	2800      	cmpeq	r0, #0
 8000aac:	bf1c      	itt	ne
 8000aae:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ab2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab6:	f000 b99b 	b.w	8000df0 <__aeabi_idiv0>
 8000aba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000abe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac2:	2900      	cmp	r1, #0
 8000ac4:	db09      	blt.n	8000ada <__aeabi_ldivmod+0x42>
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	db1a      	blt.n	8000b00 <__aeabi_ldivmod+0x68>
 8000aca:	f000 f835 	bl	8000b38 <__udivmoddi4>
 8000ace:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad6:	b004      	add	sp, #16
 8000ad8:	4770      	bx	lr
 8000ada:	4240      	negs	r0, r0
 8000adc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	db1b      	blt.n	8000b1c <__aeabi_ldivmod+0x84>
 8000ae4:	f000 f828 	bl	8000b38 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4240      	negs	r0, r0
 8000af4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af8:	4252      	negs	r2, r2
 8000afa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000afe:	4770      	bx	lr
 8000b00:	4252      	negs	r2, r2
 8000b02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b06:	f000 f817 	bl	8000b38 <__udivmoddi4>
 8000b0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b12:	b004      	add	sp, #16
 8000b14:	4240      	negs	r0, r0
 8000b16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b1a:	4770      	bx	lr
 8000b1c:	4252      	negs	r2, r2
 8000b1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b22:	f000 f809 	bl	8000b38 <__udivmoddi4>
 8000b26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2e:	b004      	add	sp, #16
 8000b30:	4252      	negs	r2, r2
 8000b32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b36:	4770      	bx	lr

08000b38 <__udivmoddi4>:
 8000b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b3c:	9d08      	ldr	r5, [sp, #32]
 8000b3e:	460c      	mov	r4, r1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d14e      	bne.n	8000be2 <__udivmoddi4+0xaa>
 8000b44:	4694      	mov	ip, r2
 8000b46:	458c      	cmp	ip, r1
 8000b48:	4686      	mov	lr, r0
 8000b4a:	fab2 f282 	clz	r2, r2
 8000b4e:	d962      	bls.n	8000c16 <__udivmoddi4+0xde>
 8000b50:	b14a      	cbz	r2, 8000b66 <__udivmoddi4+0x2e>
 8000b52:	f1c2 0320 	rsb	r3, r2, #32
 8000b56:	4091      	lsls	r1, r2
 8000b58:	fa20 f303 	lsr.w	r3, r0, r3
 8000b5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b60:	4319      	orrs	r1, r3
 8000b62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b6e:	fb07 1114 	mls	r1, r7, r4, r1
 8000b72:	fa1f f68c 	uxth.w	r6, ip
 8000b76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b7e:	fb04 f106 	mul.w	r1, r4, r6
 8000b82:	4299      	cmp	r1, r3
 8000b84:	d90a      	bls.n	8000b9c <__udivmoddi4+0x64>
 8000b86:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b8e:	f080 8110 	bcs.w	8000db2 <__udivmoddi4+0x27a>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 810d 	bls.w	8000db2 <__udivmoddi4+0x27a>
 8000b98:	3c02      	subs	r4, #2
 8000b9a:	4463      	add	r3, ip
 8000b9c:	1a59      	subs	r1, r3, r1
 8000b9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ba2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ba6:	fb00 f606 	mul.w	r6, r0, r6
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb2:	429e      	cmp	r6, r3
 8000bb4:	d90a      	bls.n	8000bcc <__udivmoddi4+0x94>
 8000bb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bba:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bbe:	f080 80fa 	bcs.w	8000db6 <__udivmoddi4+0x27e>
 8000bc2:	429e      	cmp	r6, r3
 8000bc4:	f240 80f7 	bls.w	8000db6 <__udivmoddi4+0x27e>
 8000bc8:	4463      	add	r3, ip
 8000bca:	3802      	subs	r0, #2
 8000bcc:	2100      	movs	r1, #0
 8000bce:	1b9b      	subs	r3, r3, r6
 8000bd0:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bd4:	b11d      	cbz	r5, 8000bde <__udivmoddi4+0xa6>
 8000bd6:	40d3      	lsrs	r3, r2
 8000bd8:	2200      	movs	r2, #0
 8000bda:	e9c5 3200 	strd	r3, r2, [r5]
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d905      	bls.n	8000bf2 <__udivmoddi4+0xba>
 8000be6:	b10d      	cbz	r5, 8000bec <__udivmoddi4+0xb4>
 8000be8:	e9c5 0100 	strd	r0, r1, [r5]
 8000bec:	2100      	movs	r1, #0
 8000bee:	4608      	mov	r0, r1
 8000bf0:	e7f5      	b.n	8000bde <__udivmoddi4+0xa6>
 8000bf2:	fab3 f183 	clz	r1, r3
 8000bf6:	2900      	cmp	r1, #0
 8000bf8:	d146      	bne.n	8000c88 <__udivmoddi4+0x150>
 8000bfa:	42a3      	cmp	r3, r4
 8000bfc:	d302      	bcc.n	8000c04 <__udivmoddi4+0xcc>
 8000bfe:	4290      	cmp	r0, r2
 8000c00:	f0c0 80ee 	bcc.w	8000de0 <__udivmoddi4+0x2a8>
 8000c04:	1a86      	subs	r6, r0, r2
 8000c06:	eb64 0303 	sbc.w	r3, r4, r3
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	2d00      	cmp	r5, #0
 8000c0e:	d0e6      	beq.n	8000bde <__udivmoddi4+0xa6>
 8000c10:	e9c5 6300 	strd	r6, r3, [r5]
 8000c14:	e7e3      	b.n	8000bde <__udivmoddi4+0xa6>
 8000c16:	2a00      	cmp	r2, #0
 8000c18:	f040 808f 	bne.w	8000d3a <__udivmoddi4+0x202>
 8000c1c:	eba1 040c 	sub.w	r4, r1, ip
 8000c20:	2101      	movs	r1, #1
 8000c22:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c26:	fa1f f78c 	uxth.w	r7, ip
 8000c2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c32:	fb07 f006 	mul.w	r0, r7, r6
 8000c36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c3e:	4298      	cmp	r0, r3
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x11c>
 8000c42:	eb1c 0303 	adds.w	r3, ip, r3
 8000c46:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x11a>
 8000c4c:	4298      	cmp	r0, r3
 8000c4e:	f200 80cb 	bhi.w	8000de8 <__udivmoddi4+0x2b0>
 8000c52:	4626      	mov	r6, r4
 8000c54:	1a1c      	subs	r4, r3, r0
 8000c56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c5e:	fb00 f707 	mul.w	r7, r0, r7
 8000c62:	fa1f f38e 	uxth.w	r3, lr
 8000c66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c6a:	429f      	cmp	r7, r3
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x148>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x146>
 8000c78:	429f      	cmp	r7, r3
 8000c7a:	f200 80ae 	bhi.w	8000dda <__udivmoddi4+0x2a2>
 8000c7e:	4620      	mov	r0, r4
 8000c80:	1bdb      	subs	r3, r3, r7
 8000c82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c86:	e7a5      	b.n	8000bd4 <__udivmoddi4+0x9c>
 8000c88:	f1c1 0720 	rsb	r7, r1, #32
 8000c8c:	408b      	lsls	r3, r1
 8000c8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c96:	fa24 f607 	lsr.w	r6, r4, r7
 8000c9a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c9e:	fbb6 f8f9 	udiv	r8, r6, r9
 8000ca2:	fa1f fe8c 	uxth.w	lr, ip
 8000ca6:	fb09 6618 	mls	r6, r9, r8, r6
 8000caa:	fa20 f307 	lsr.w	r3, r0, r7
 8000cae:	408c      	lsls	r4, r1
 8000cb0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000cb4:	fb08 f00e 	mul.w	r0, r8, lr
 8000cb8:	431c      	orrs	r4, r3
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc0:	4298      	cmp	r0, r3
 8000cc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cc6:	d90a      	bls.n	8000cde <__udivmoddi4+0x1a6>
 8000cc8:	eb1c 0303 	adds.w	r3, ip, r3
 8000ccc:	f108 36ff 	add.w	r6, r8, #4294967295
 8000cd0:	f080 8081 	bcs.w	8000dd6 <__udivmoddi4+0x29e>
 8000cd4:	4298      	cmp	r0, r3
 8000cd6:	d97e      	bls.n	8000dd6 <__udivmoddi4+0x29e>
 8000cd8:	f1a8 0802 	sub.w	r8, r8, #2
 8000cdc:	4463      	add	r3, ip
 8000cde:	1a1e      	subs	r6, r3, r0
 8000ce0:	fbb6 f3f9 	udiv	r3, r6, r9
 8000ce4:	fb09 6613 	mls	r6, r9, r3, r6
 8000ce8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x1d0>
 8000cf6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfa:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cfe:	d266      	bcs.n	8000dce <__udivmoddi4+0x296>
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d964      	bls.n	8000dce <__udivmoddi4+0x296>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4464      	add	r4, ip
 8000d08:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000d0c:	fba0 8302 	umull	r8, r3, r0, r2
 8000d10:	eba4 040e 	sub.w	r4, r4, lr
 8000d14:	429c      	cmp	r4, r3
 8000d16:	46c6      	mov	lr, r8
 8000d18:	461e      	mov	r6, r3
 8000d1a:	d350      	bcc.n	8000dbe <__udivmoddi4+0x286>
 8000d1c:	d04d      	beq.n	8000dba <__udivmoddi4+0x282>
 8000d1e:	b155      	cbz	r5, 8000d36 <__udivmoddi4+0x1fe>
 8000d20:	ebba 030e 	subs.w	r3, sl, lr
 8000d24:	eb64 0406 	sbc.w	r4, r4, r6
 8000d28:	fa04 f707 	lsl.w	r7, r4, r7
 8000d2c:	40cb      	lsrs	r3, r1
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	40cc      	lsrs	r4, r1
 8000d32:	e9c5 7400 	strd	r7, r4, [r5]
 8000d36:	2100      	movs	r1, #0
 8000d38:	e751      	b.n	8000bde <__udivmoddi4+0xa6>
 8000d3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	40d9      	lsrs	r1, r3
 8000d44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d50:	fbb1 f0f8 	udiv	r0, r1, r8
 8000d54:	fb08 1110 	mls	r1, r8, r0, r1
 8000d58:	4094      	lsls	r4, r2
 8000d5a:	431c      	orrs	r4, r3
 8000d5c:	fa1f f78c 	uxth.w	r7, ip
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d66:	fb00 f107 	mul.w	r1, r0, r7
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x248>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d76:	d22c      	bcs.n	8000dd2 <__udivmoddi4+0x29a>
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d92a      	bls.n	8000dd2 <__udivmoddi4+0x29a>
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	4463      	add	r3, ip
 8000d80:	1a5b      	subs	r3, r3, r1
 8000d82:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d86:	fb08 3311 	mls	r3, r8, r1, r3
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d90:	fb01 f307 	mul.w	r3, r1, r7
 8000d94:	42a3      	cmp	r3, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x272>
 8000d98:	eb1c 0404 	adds.w	r4, ip, r4
 8000d9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000da0:	d213      	bcs.n	8000dca <__udivmoddi4+0x292>
 8000da2:	42a3      	cmp	r3, r4
 8000da4:	d911      	bls.n	8000dca <__udivmoddi4+0x292>
 8000da6:	3902      	subs	r1, #2
 8000da8:	4464      	add	r4, ip
 8000daa:	1ae4      	subs	r4, r4, r3
 8000dac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000db0:	e73b      	b.n	8000c2a <__udivmoddi4+0xf2>
 8000db2:	4604      	mov	r4, r0
 8000db4:	e6f2      	b.n	8000b9c <__udivmoddi4+0x64>
 8000db6:	4608      	mov	r0, r1
 8000db8:	e708      	b.n	8000bcc <__udivmoddi4+0x94>
 8000dba:	45c2      	cmp	sl, r8
 8000dbc:	d2af      	bcs.n	8000d1e <__udivmoddi4+0x1e6>
 8000dbe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dc2:	eb63 060c 	sbc.w	r6, r3, ip
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	e7a9      	b.n	8000d1e <__udivmoddi4+0x1e6>
 8000dca:	4631      	mov	r1, r6
 8000dcc:	e7ed      	b.n	8000daa <__udivmoddi4+0x272>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	e79a      	b.n	8000d08 <__udivmoddi4+0x1d0>
 8000dd2:	4630      	mov	r0, r6
 8000dd4:	e7d4      	b.n	8000d80 <__udivmoddi4+0x248>
 8000dd6:	46b0      	mov	r8, r6
 8000dd8:	e781      	b.n	8000cde <__udivmoddi4+0x1a6>
 8000dda:	4463      	add	r3, ip
 8000ddc:	3802      	subs	r0, #2
 8000dde:	e74f      	b.n	8000c80 <__udivmoddi4+0x148>
 8000de0:	4606      	mov	r6, r0
 8000de2:	4623      	mov	r3, r4
 8000de4:	4608      	mov	r0, r1
 8000de6:	e711      	b.n	8000c0c <__udivmoddi4+0xd4>
 8000de8:	3e02      	subs	r6, #2
 8000dea:	4463      	add	r3, ip
 8000dec:	e732      	b.n	8000c54 <__udivmoddi4+0x11c>
 8000dee:	bf00      	nop

08000df0 <__aeabi_idiv0>:
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <setBufferFromValue>:
static void MX_TIM2_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */

// Helper to set buffer based on a 16-bit value
void setBufferFromValue(uint8_t* buf, uint16_t value) {
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	807b      	strh	r3, [r7, #2]
    buf[0] = (value >> 8) & 0xFF;
 8000e00:	887b      	ldrh	r3, [r7, #2]
 8000e02:	0a1b      	lsrs	r3, r3, #8
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	701a      	strb	r2, [r3, #0]
    buf[1] = value & 0xFF;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	887a      	ldrh	r2, [r7, #2]
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	701a      	strb	r2, [r3, #0]
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <readI2CRegister>:
// Read I2C memory and return the 16-bit value
uint16_t readI2CRegister(uint16_t memAddr) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af04      	add	r7, sp, #16
 8000e26:	4603      	mov	r3, r0
 8000e28:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];
    HAL_StatusTypeDef hal_status = HAL_I2C_Mem_Read(&hi2c1, LDC_I2C_ADDR, memAddr, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 8000e2a:	2354      	movs	r3, #84	@ 0x54
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	88fa      	ldrh	r2, [r7, #6]
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295
 8000e34:	9302      	str	r3, [sp, #8]
 8000e36:	2302      	movs	r3, #2
 8000e38:	9301      	str	r3, [sp, #4]
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	2301      	movs	r3, #1
 8000e42:	4808      	ldr	r0, [pc, #32]	@ (8000e64 <readI2CRegister+0x44>)
 8000e44:	f001 fd4a 	bl	80028dc <HAL_I2C_Mem_Read>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	73fb      	strb	r3, [r7, #15]
    return ((uint16_t)buf[0] << 8) | buf[1];
 8000e4c:	7b3b      	ldrb	r3, [r7, #12]
 8000e4e:	021b      	lsls	r3, r3, #8
 8000e50:	b21a      	sxth	r2, r3
 8000e52:	7b7b      	ldrb	r3, [r7, #13]
 8000e54:	b21b      	sxth	r3, r3
 8000e56:	4313      	orrs	r3, r2
 8000e58:	b21b      	sxth	r3, r3
 8000e5a:	b29b      	uxth	r3, r3
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	2000002c 	.word	0x2000002c

08000e68 <writeI2CMem>:
// Generic I2C write function
HAL_StatusTypeDef writeI2CMem(uint8_t* buf, uint16_t memAddr) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af04      	add	r7, sp, #16
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	807b      	strh	r3, [r7, #2]
    return HAL_I2C_Mem_Write(&hi2c1, LDC_I2C_ADDR, memAddr, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 8000e74:	2354      	movs	r3, #84	@ 0x54
 8000e76:	4619      	mov	r1, r3
 8000e78:	887a      	ldrh	r2, [r7, #2]
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7e:	9302      	str	r3, [sp, #8]
 8000e80:	2302      	movs	r3, #2
 8000e82:	9301      	str	r3, [sp, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	2301      	movs	r3, #1
 8000e8a:	4804      	ldr	r0, [pc, #16]	@ (8000e9c <writeI2CMem+0x34>)
 8000e8c:	f001 fc2c 	bl	80026e8 <HAL_I2C_Mem_Write>
 8000e90:	4603      	mov	r3, r0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	2000002c 	.word	0x2000002c

08000ea0 <writeToMultipleRegisters>:
// Function to write a value to multiple sequential registers
void writeToMultipleRegisters(uint16_t value, uint16_t startAddress, uint16_t endAddress) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	80fb      	strh	r3, [r7, #6]
 8000eaa:	460b      	mov	r3, r1
 8000eac:	80bb      	strh	r3, [r7, #4]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];
    setBufferFromValue(buf, value);
 8000eb2:	88fa      	ldrh	r2, [r7, #6]
 8000eb4:	f107 0308 	add.w	r3, r7, #8
 8000eb8:	4611      	mov	r1, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ff9a 	bl	8000df4 <setBufferFromValue>
    for (uint16_t addr = startAddress; addr <= endAddress; ++addr) {
 8000ec0:	88bb      	ldrh	r3, [r7, #4]
 8000ec2:	81fb      	strh	r3, [r7, #14]
 8000ec4:	e00b      	b.n	8000ede <writeToMultipleRegisters+0x3e>
        HAL_StatusTypeDef hal_status = writeI2CMem(buf, addr);
 8000ec6:	89fa      	ldrh	r2, [r7, #14]
 8000ec8:	f107 0308 	add.w	r3, r7, #8
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ffca 	bl	8000e68 <writeI2CMem>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	737b      	strb	r3, [r7, #13]
    for (uint16_t addr = startAddress; addr <= endAddress; ++addr) {
 8000ed8:	89fb      	ldrh	r3, [r7, #14]
 8000eda:	3301      	adds	r3, #1
 8000edc:	81fb      	strh	r3, [r7, #14]
 8000ede:	89fa      	ldrh	r2, [r7, #14]
 8000ee0:	887b      	ldrh	r3, [r7, #2]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d9ef      	bls.n	8000ec6 <writeToMultipleRegisters+0x26>
    }
}
 8000ee6:	bf00      	nop
 8000ee8:	bf00      	nop
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <Read_DataXbits>:

int32_t Read_DataXbits(uint8_t msb_addr, uint8_t lsb_addr){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af04      	add	r7, sp, #16
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	460a      	mov	r2, r1
 8000efa:	71fb      	strb	r3, [r7, #7]
 8000efc:	4613      	mov	r3, r2
 8000efe:	71bb      	strb	r3, [r7, #6]
	int32_t f_sensor;

	hal_status = HAL_I2C_Mem_Read(&hi2c1, LDC_I2C_ADDR, msb_addr, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 8000f00:	2354      	movs	r3, #84	@ 0x54
 8000f02:	4619      	mov	r1, r3
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0c:	9302      	str	r3, [sp, #8]
 8000f0e:	2302      	movs	r3, #2
 8000f10:	9301      	str	r3, [sp, #4]
 8000f12:	4b23      	ldr	r3, [pc, #140]	@ (8000fa0 <Read_DataXbits+0xb0>)
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2301      	movs	r3, #1
 8000f18:	4822      	ldr	r0, [pc, #136]	@ (8000fa4 <Read_DataXbits+0xb4>)
 8000f1a:	f001 fcdf 	bl	80028dc <HAL_I2C_Mem_Read>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b21      	ldr	r3, [pc, #132]	@ (8000fa8 <Read_DataXbits+0xb8>)
 8000f24:	701a      	strb	r2, [r3, #0]
	if (hal_status == HAL_OK) {
 8000f26:	4b20      	ldr	r3, [pc, #128]	@ (8000fa8 <Read_DataXbits+0xb8>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d108      	bne.n	8000f40 <Read_DataXbits+0x50>
	  f_sensor = (int32_t)buf[0] << 24 | (int32_t)buf[1] << 16;
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa0 <Read_DataXbits+0xb0>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	061a      	lsls	r2, r3, #24
 8000f34:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <Read_DataXbits+0xb0>)
 8000f36:	785b      	ldrb	r3, [r3, #1]
 8000f38:	041b      	lsls	r3, r3, #16
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	e002      	b.n	8000f46 <Read_DataXbits+0x56>
	} else {read_error = 1;}
 8000f40:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <Read_DataXbits+0xbc>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	601a      	str	r2, [r3, #0]

	hal_status = HAL_I2C_Mem_Read(&hi2c1, LDC_I2C_ADDR, lsb_addr, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 8000f46:	2354      	movs	r3, #84	@ 0x54
 8000f48:	4619      	mov	r1, r3
 8000f4a:	79bb      	ldrb	r3, [r7, #6]
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	9302      	str	r3, [sp, #8]
 8000f54:	2302      	movs	r3, #2
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <Read_DataXbits+0xb0>)
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	4811      	ldr	r0, [pc, #68]	@ (8000fa4 <Read_DataXbits+0xb4>)
 8000f60:	f001 fcbc 	bl	80028dc <HAL_I2C_Mem_Read>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <Read_DataXbits+0xb8>)
 8000f6a:	701a      	strb	r2, [r3, #0]
	if (hal_status == HAL_OK) {
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <Read_DataXbits+0xb8>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d109      	bne.n	8000f88 <Read_DataXbits+0x98>
		f_sensor |= (int32_t)buf[0] << 8 | (int32_t)buf[1] << 0;
 8000f74:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <Read_DataXbits+0xb0>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	4a09      	ldr	r2, [pc, #36]	@ (8000fa0 <Read_DataXbits+0xb0>)
 8000f7c:	7852      	ldrb	r2, [r2, #1]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	e002      	b.n	8000f8e <Read_DataXbits+0x9e>
	} else {read_error = 1;}
 8000f88:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <Read_DataXbits+0xbc>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]
	f_sensor &= 0x0FFFFFFF;  // Masking out the error bits
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000f94:	60fb      	str	r3, [r7, #12]

	return f_sensor;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000114 	.word	0x20000114
 8000fa4:	2000002c 	.word	0x2000002c
 8000fa8:	20000110 	.word	0x20000110
 8000fac:	2000011c 	.word	0x2000011c

08000fb0 <calibrate>:

void calibrate(){
 8000fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fb4:	b094      	sub	sp, #80	@ 0x50
 8000fb6:	af00      	add	r7, sp, #0

	int baselineReadings = 50;
 8000fb8:	2332      	movs	r3, #50	@ 0x32
 8000fba:	64bb      	str	r3, [r7, #72]	@ 0x48
	int iterations = baselineReadings;
 8000fbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c

	while(iterations>0){
 8000fc0:	e06f      	b.n	80010a2 <calibrate+0xf2>
		__NOP();
 8000fc2:	bf00      	nop
		if(data_ready){
 8000fc4:	4b5b      	ldr	r3, [pc, #364]	@ (8001134 <calibrate+0x184>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d06a      	beq.n	80010a2 <calibrate+0xf2>

			f_sensor0_baseline += Read_DataXbits(DATA0_MSB, DATA0_LSB);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2301      	movs	r3, #1
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	f7ff ff8c 	bl	8000ef0 <Read_DataXbits>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	17da      	asrs	r2, r3, #31
 8000fdc:	643b      	str	r3, [r7, #64]	@ 0x40
 8000fde:	647a      	str	r2, [r7, #68]	@ 0x44
 8000fe0:	4b55      	ldr	r3, [pc, #340]	@ (8001138 <calibrate+0x188>)
 8000fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000fe8:	1889      	adds	r1, r1, r2
 8000fea:	6339      	str	r1, [r7, #48]	@ 0x30
 8000fec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000fee:	eb41 0303 	adc.w	r3, r1, r3
 8000ff2:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ff4:	4b50      	ldr	r3, [pc, #320]	@ (8001138 <calibrate+0x188>)
 8000ff6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8000ffa:	e9c3 1200 	strd	r1, r2, [r3]
			f_sensor1_baseline += Read_DataXbits(DATA1_MSB, DATA1_LSB);
 8000ffe:	2202      	movs	r2, #2
 8001000:	2303      	movs	r3, #3
 8001002:	4619      	mov	r1, r3
 8001004:	4610      	mov	r0, r2
 8001006:	f7ff ff73 	bl	8000ef0 <Read_DataXbits>
 800100a:	4603      	mov	r3, r0
 800100c:	17da      	asrs	r2, r3, #31
 800100e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001010:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001012:	4b4a      	ldr	r3, [pc, #296]	@ (800113c <calibrate+0x18c>)
 8001014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001018:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800101a:	1889      	adds	r1, r1, r2
 800101c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800101e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001020:	eb41 0303 	adc.w	r3, r1, r3
 8001024:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001026:	4b45      	ldr	r3, [pc, #276]	@ (800113c <calibrate+0x18c>)
 8001028:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800102c:	e9c3 1200 	strd	r1, r2, [r3]
			f_sensor2_baseline += Read_DataXbits(DATA2_MSB, DATA2_LSB);
 8001030:	2204      	movs	r2, #4
 8001032:	2305      	movs	r3, #5
 8001034:	4619      	mov	r1, r3
 8001036:	4610      	mov	r0, r2
 8001038:	f7ff ff5a 	bl	8000ef0 <Read_DataXbits>
 800103c:	4603      	mov	r3, r0
 800103e:	17da      	asrs	r2, r3, #31
 8001040:	469a      	mov	sl, r3
 8001042:	4693      	mov	fp, r2
 8001044:	4b3e      	ldr	r3, [pc, #248]	@ (8001140 <calibrate+0x190>)
 8001046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104a:	eb1a 0102 	adds.w	r1, sl, r2
 800104e:	6239      	str	r1, [r7, #32]
 8001050:	eb4b 0303 	adc.w	r3, fp, r3
 8001054:	627b      	str	r3, [r7, #36]	@ 0x24
 8001056:	4b3a      	ldr	r3, [pc, #232]	@ (8001140 <calibrate+0x190>)
 8001058:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800105c:	e9c3 1200 	strd	r1, r2, [r3]
			f_sensor3_baseline += Read_DataXbits(DATA3_MSB, DATA3_LSB);
 8001060:	2206      	movs	r2, #6
 8001062:	2307      	movs	r3, #7
 8001064:	4619      	mov	r1, r3
 8001066:	4610      	mov	r0, r2
 8001068:	f7ff ff42 	bl	8000ef0 <Read_DataXbits>
 800106c:	4603      	mov	r3, r0
 800106e:	17da      	asrs	r2, r3, #31
 8001070:	461c      	mov	r4, r3
 8001072:	4615      	mov	r5, r2
 8001074:	4b33      	ldr	r3, [pc, #204]	@ (8001144 <calibrate+0x194>)
 8001076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107a:	eb14 0802 	adds.w	r8, r4, r2
 800107e:	eb45 0903 	adc.w	r9, r5, r3
 8001082:	4b30      	ldr	r3, [pc, #192]	@ (8001144 <calibrate+0x194>)
 8001084:	e9c3 8900 	strd	r8, r9, [r3]

			// Read the "STATUS" address to de-assert the interrupt on the LDC side.
			data_ready = 0;
 8001088:	4a2a      	ldr	r2, [pc, #168]	@ (8001134 <calibrate+0x184>)
 800108a:	2300      	movs	r3, #0
 800108c:	6013      	str	r3, [r2, #0]

			status_reg_read = readI2CRegister(STATUS);
 800108e:	2318      	movs	r3, #24
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fec5 	bl	8000e20 <readI2CRegister>
 8001096:	4603      	mov	r3, r0
 8001098:	4a2b      	ldr	r2, [pc, #172]	@ (8001148 <calibrate+0x198>)
 800109a:	8013      	strh	r3, [r2, #0]

			iterations--;
 800109c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800109e:	3b01      	subs	r3, #1
 80010a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	while(iterations>0){
 80010a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	dc8c      	bgt.n	8000fc2 <calibrate+0x12>
		}
	}

	f_sensor0_baseline /= baselineReadings;
 80010a8:	4b23      	ldr	r3, [pc, #140]	@ (8001138 <calibrate+0x188>)
 80010aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010b0:	17da      	asrs	r2, r3, #31
 80010b2:	61bb      	str	r3, [r7, #24]
 80010b4:	61fa      	str	r2, [r7, #28]
 80010b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010ba:	f7ff fced 	bl	8000a98 <__aeabi_ldivmod>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	491d      	ldr	r1, [pc, #116]	@ (8001138 <calibrate+0x188>)
 80010c4:	e9c1 2300 	strd	r2, r3, [r1]
	f_sensor1_baseline /= baselineReadings;
 80010c8:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <calibrate+0x18c>)
 80010ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010d0:	17da      	asrs	r2, r3, #31
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	617a      	str	r2, [r7, #20]
 80010d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010da:	f7ff fcdd 	bl	8000a98 <__aeabi_ldivmod>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4916      	ldr	r1, [pc, #88]	@ (800113c <calibrate+0x18c>)
 80010e4:	e9c1 2300 	strd	r2, r3, [r1]
	f_sensor2_baseline /= baselineReadings;
 80010e8:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <calibrate+0x190>)
 80010ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010f0:	17da      	asrs	r2, r3, #31
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	60fa      	str	r2, [r7, #12]
 80010f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010fa:	f7ff fccd 	bl	8000a98 <__aeabi_ldivmod>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	490f      	ldr	r1, [pc, #60]	@ (8001140 <calibrate+0x190>)
 8001104:	e9c1 2300 	strd	r2, r3, [r1]
	f_sensor3_baseline /= baselineReadings;
 8001108:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <calibrate+0x194>)
 800110a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800110e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001110:	17da      	asrs	r2, r3, #31
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	e9d7 2300 	ldrd	r2, r3, [r7]
 800111a:	f7ff fcbd 	bl	8000a98 <__aeabi_ldivmod>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4908      	ldr	r1, [pc, #32]	@ (8001144 <calibrate+0x194>)
 8001124:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001128:	bf00      	nop
 800112a:	3750      	adds	r7, #80	@ 0x50
 800112c:	46bd      	mov	sp, r7
 800112e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001132:	bf00      	nop
 8001134:	20000174 	.word	0x20000174
 8001138:	20000120 	.word	0x20000120
 800113c:	20000128 	.word	0x20000128
 8001140:	20000130 	.word	0x20000130
 8001144:	20000138 	.word	0x20000138
 8001148:	20000182 	.word	0x20000182

0800114c <correct_neg_f>:

double correct_neg_f(double f){
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	e9c7 0100 	strd	r0, r1, [r7]
	if(f<0)
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	f04f 0300 	mov.w	r3, #0
 800115e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001162:	f7ff fc21 	bl	80009a8 <__aeabi_dcmplt>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d004      	beq.n	8001176 <correct_neg_f+0x2a>
		return 0;
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	e001      	b.n	800117a <correct_neg_f+0x2e>
	else
		return f;
 8001176:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <position_decoder>:

void position_decoder(double f0,double f1,double f2,double f3){
 8001184:	b5b0      	push	{r4, r5, r7, lr}
 8001186:	b092      	sub	sp, #72	@ 0x48
 8001188:	af00      	add	r7, sp, #0
 800118a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800118e:	e9c7 2300 	strd	r2, r3, [r7]

	// The right-most case is not resolved yet, when the metal goes beyond the
	// last coil, and the values starts decreasing...

	double right_most = correct_neg_f(f3);
 8001192:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001196:	f7ff ffd9 	bl	800114c <correct_neg_f>
 800119a:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
	double right_mid = correct_neg_f(f1);
 800119e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011a2:	f7ff ffd3 	bl	800114c <correct_neg_f>
 80011a6:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
	double left_mid = correct_neg_f(f2);
 80011aa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80011ae:	f7ff ffcd 	bl	800114c <correct_neg_f>
 80011b2:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
	double left_most = correct_neg_f(f0);
 80011b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011ba:	f7ff ffc7 	bl	800114c <correct_neg_f>
 80011be:	e9c7 0108 	strd	r0, r1, [r7, #32]

	// Differences in coils (in mm) as measured on the eagle PCB.
	float p0=0.0, p1=0+21.0, p2=0+21+21.0, p3=0+21+21+20.0;
 80011c2:	f04f 0300 	mov.w	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	4b3e      	ldr	r3, [pc, #248]	@ (80012c4 <position_decoder+0x140>)
 80011ca:	61bb      	str	r3, [r7, #24]
 80011cc:	4b3e      	ldr	r3, [pc, #248]	@ (80012c8 <position_decoder+0x144>)
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	4b3e      	ldr	r3, [pc, #248]	@ (80012cc <position_decoder+0x148>)
 80011d2:	613b      	str	r3, [r7, #16]

	double totalWeight = right_most + right_mid + left_mid + left_most;
 80011d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80011d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80011dc:	f7fe ffbc 	bl	8000158 <__adddf3>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4610      	mov	r0, r2
 80011e6:	4619      	mov	r1, r3
 80011e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80011ec:	f7fe ffb4 	bl	8000158 <__adddf3>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80011f8:	f7fe ffae 	bl	8000158 <__adddf3>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	if (totalWeight == 0)
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001210:	f7ff fbc0 	bl	8000994 <__aeabi_dcmpeq>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d004      	beq.n	8001224 <position_decoder+0xa0>
		totalWeight = 1;
 800121a:	f04f 0200 	mov.w	r2, #0
 800121e:	4b2c      	ldr	r3, [pc, #176]	@ (80012d0 <position_decoder+0x14c>)
 8001220:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	current_position = (right_most * p0 + right_mid * p1 + left_mid * p2 + left_most * p3) / totalWeight;
 8001224:	69f8      	ldr	r0, [r7, #28]
 8001226:	f7ff f8f5 	bl	8000414 <__aeabi_f2d>
 800122a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800122e:	f7ff f949 	bl	80004c4 <__aeabi_dmul>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4614      	mov	r4, r2
 8001238:	461d      	mov	r5, r3
 800123a:	69b8      	ldr	r0, [r7, #24]
 800123c:	f7ff f8ea 	bl	8000414 <__aeabi_f2d>
 8001240:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001244:	f7ff f93e 	bl	80004c4 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4620      	mov	r0, r4
 800124e:	4629      	mov	r1, r5
 8001250:	f7fe ff82 	bl	8000158 <__adddf3>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4614      	mov	r4, r2
 800125a:	461d      	mov	r5, r3
 800125c:	6978      	ldr	r0, [r7, #20]
 800125e:	f7ff f8d9 	bl	8000414 <__aeabi_f2d>
 8001262:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001266:	f7ff f92d 	bl	80004c4 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4620      	mov	r0, r4
 8001270:	4629      	mov	r1, r5
 8001272:	f7fe ff71 	bl	8000158 <__adddf3>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4614      	mov	r4, r2
 800127c:	461d      	mov	r5, r3
 800127e:	6938      	ldr	r0, [r7, #16]
 8001280:	f7ff f8c8 	bl	8000414 <__aeabi_f2d>
 8001284:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001288:	f7ff f91c 	bl	80004c4 <__aeabi_dmul>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4620      	mov	r0, r4
 8001292:	4629      	mov	r1, r5
 8001294:	f7fe ff60 	bl	8000158 <__adddf3>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80012a4:	f7ff fa38 	bl	8000718 <__aeabi_ddiv>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	f7ff fba2 	bl	80009f8 <__aeabi_d2f>
 80012b4:	4603      	mov	r3, r0
 80012b6:	4a07      	ldr	r2, [pc, #28]	@ (80012d4 <position_decoder+0x150>)
 80012b8:	6013      	str	r3, [r2, #0]
}
 80012ba:	bf00      	nop
 80012bc:	3748      	adds	r7, #72	@ 0x48
 80012be:	46bd      	mov	sp, r7
 80012c0:	bdb0      	pop	{r4, r5, r7, pc}
 80012c2:	bf00      	nop
 80012c4:	41a80000 	.word	0x41a80000
 80012c8:	42280000 	.word	0x42280000
 80012cc:	42780000 	.word	0x42780000
 80012d0:	3ff00000 	.word	0x3ff00000
 80012d4:	20000170 	.word	0x20000170

080012d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012dc:	b08c      	sub	sp, #48	@ 0x30
 80012de:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e0:	f000 fd9a 	bl	8001e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e4:	f000 f9f2 	bl	80016cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e8:	f000 fb74 	bl	80019d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012ec:	f000 fa2a 	bl	8001744 <MX_I2C1_Init>
  MX_TIM2_Init();
 80012f0:	f000 faf6 	bl	80018e0 <MX_TIM2_Init>
  MX_TIM1_Init();
 80012f4:	f000 fa54 	bl	80017a0 <MX_TIM1_Init>
   * Each channel current drive is set independently between 16 µA and 1.6 mA by setting the corresponding IDRIVEx register field
   *
   * */

  /* Mux Config register configuration */
  uint16_t AUTOSCAN_EN = 0b1 << 15;
 80012f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012fc:	83fb      	strh	r3, [r7, #30]
  uint16_t RR_SEQUENCE = 0b10 << 13;
 80012fe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001302:	83bb      	strh	r3, [r7, #28]
  uint16_t RESERVED = 0b0001000001 << 3;
 8001304:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8001308:	837b      	strh	r3, [r7, #26]
  uint16_t DEGLITCH = 0b101 << 0;
 800130a:	2305      	movs	r3, #5
 800130c:	833b      	strh	r3, [r7, #24]

  mux_config_reg = AUTOSCAN_EN | RR_SEQUENCE | RESERVED | DEGLITCH;
 800130e:	8bfa      	ldrh	r2, [r7, #30]
 8001310:	8bbb      	ldrh	r3, [r7, #28]
 8001312:	4313      	orrs	r3, r2
 8001314:	b29a      	uxth	r2, r3
 8001316:	8b7b      	ldrh	r3, [r7, #26]
 8001318:	4313      	orrs	r3, r2
 800131a:	b29a      	uxth	r2, r3
 800131c:	8b3b      	ldrh	r3, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	b29a      	uxth	r2, r3
 8001322:	4bb2      	ldr	r3, [pc, #712]	@ (80015ec <main+0x314>)
 8001324:	801a      	strh	r2, [r3, #0]

  // Store it in the buffer for transmission
  buf[0] = (mux_config_reg >> 8) & 0xFF;
 8001326:	4bb1      	ldr	r3, [pc, #708]	@ (80015ec <main+0x314>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	0a1b      	lsrs	r3, r3, #8
 800132c:	b29b      	uxth	r3, r3
 800132e:	b2da      	uxtb	r2, r3
 8001330:	4baf      	ldr	r3, [pc, #700]	@ (80015f0 <main+0x318>)
 8001332:	701a      	strb	r2, [r3, #0]
  buf[1] = mux_config_reg & 0xFF;
 8001334:	4bad      	ldr	r3, [pc, #692]	@ (80015ec <main+0x314>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4bad      	ldr	r3, [pc, #692]	@ (80015f0 <main+0x318>)
 800133c:	705a      	strb	r2, [r3, #1]
  // Send the buffer over
  hal_status = writeI2CMem(buf, MUX_CONFIG_ADDR);
 800133e:	231b      	movs	r3, #27
 8001340:	4619      	mov	r1, r3
 8001342:	48ab      	ldr	r0, [pc, #684]	@ (80015f0 <main+0x318>)
 8001344:	f7ff fd90 	bl	8000e68 <writeI2CMem>
 8001348:	4603      	mov	r3, r0
 800134a:	461a      	mov	r2, r3
 800134c:	4ba9      	ldr	r3, [pc, #676]	@ (80015f4 <main+0x31c>)
 800134e:	701a      	strb	r2, [r3, #0]

  /* Resolution configuration */
  uint16_t max_res = 0xFFFF;
 8001350:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001354:	82fb      	strh	r3, [r7, #22]
  writeToMultipleRegisters(max_res, RCOUNT0, RCOUNT3); // Max Resolution
 8001356:	2308      	movs	r3, #8
 8001358:	4619      	mov	r1, r3
 800135a:	230b      	movs	r3, #11
 800135c:	461a      	mov	r2, r3
 800135e:	8afb      	ldrh	r3, [r7, #22]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fd9d 	bl	8000ea0 <writeToMultipleRegisters>

  /* Setting the Settling Time */
  uint16_t settling_time = 0x0014;
 8001366:	2314      	movs	r3, #20
 8001368:	82bb      	strh	r3, [r7, #20]
  writeToMultipleRegisters(settling_time, SETTLECOUNT0, SETTLECOUNT3); // Setting the Settling Time
 800136a:	2310      	movs	r3, #16
 800136c:	4619      	mov	r1, r3
 800136e:	2313      	movs	r3, #19
 8001370:	461a      	mov	r2, r3
 8001372:	8abb      	ldrh	r3, [r7, #20]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fd93 	bl	8000ea0 <writeToMultipleRegisters>

  /* CLOCK_DIVIDERS configuration */
  uint16_t clock_divider = 0x1001;
 800137a:	f241 0301 	movw	r3, #4097	@ 0x1001
 800137e:	827b      	strh	r3, [r7, #18]

  writeToMultipleRegisters(clock_divider, CLOCK_DIVIDERS0, CLOCK_DIVIDERS3); // CLOCK_DIVIDERS configuration
 8001380:	2314      	movs	r3, #20
 8001382:	4619      	mov	r1, r3
 8001384:	2317      	movs	r3, #23
 8001386:	461a      	mov	r2, r3
 8001388:	8a7b      	ldrh	r3, [r7, #18]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fd88 	bl	8000ea0 <writeToMultipleRegisters>

  /* DRIVE CURRENT configuration */
  uint16_t IDRIVE = 0b11011 << 11;
 8001390:	f44f 4358 	mov.w	r3, #55296	@ 0xd800
 8001394:	823b      	strh	r3, [r7, #16]
  uint16_t INIT_IDRIVE = 0b00000 << 6;
 8001396:	2300      	movs	r3, #0
 8001398:	81fb      	strh	r3, [r7, #14]
  uint16_t DR_RESERVED = 0b000000 << 0;
 800139a:	2300      	movs	r3, #0
 800139c:	81bb      	strh	r3, [r7, #12]
  uint16_t drive_cur_reg = drive_cur_reg = IDRIVE | INIT_IDRIVE | DR_RESERVED;
 800139e:	8a3a      	ldrh	r2, [r7, #16]
 80013a0:	89fb      	ldrh	r3, [r7, #14]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	89bb      	ldrh	r3, [r7, #12]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	817b      	strh	r3, [r7, #10]

  writeToMultipleRegisters(drive_cur_reg, DRIVE_CURRENT0, DRIVE_CURRENT3); // DRIVE CURRENT configuration
 80013ac:	231e      	movs	r3, #30
 80013ae:	4619      	mov	r1, r3
 80013b0:	2321      	movs	r3, #33	@ 0x21
 80013b2:	461a      	mov	r2, r3
 80013b4:	897b      	ldrh	r3, [r7, #10]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fd72 	bl	8000ea0 <writeToMultipleRegisters>

  /* Config register configuration */
  uint16_t SLEEP_MODE_EN = 0b1 << 13;
 80013bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013c0:	813b      	strh	r3, [r7, #8]
  uint16_t RP_OVERRIDE_EN = 0b1 << 12;
 80013c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013c6:	80fb      	strh	r3, [r7, #6]
  uint16_t SENSOR_ACTIVATE_SEL = 0b1 << 11;
 80013c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013cc:	80bb      	strh	r3, [r7, #4]

  // read register
  config_reg = readI2CRegister(CONFIG_ADDR);
 80013ce:	231a      	movs	r3, #26
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fd25 	bl	8000e20 <readI2CRegister>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461a      	mov	r2, r3
 80013da:	4b87      	ldr	r3, [pc, #540]	@ (80015f8 <main+0x320>)
 80013dc:	801a      	strh	r2, [r3, #0]
  // Store it in the buffer for transmission
  CLEAR_BIT(config_reg, SENSOR_ACTIVATE_SEL);
 80013de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	4b84      	ldr	r3, [pc, #528]	@ (80015f8 <main+0x320>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	4013      	ands	r3, r2
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	4b81      	ldr	r3, [pc, #516]	@ (80015f8 <main+0x320>)
 80013f4:	801a      	strh	r2, [r3, #0]
  CLEAR_BIT(config_reg, SLEEP_MODE_EN);
 80013f6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	b21a      	sxth	r2, r3
 80013fe:	4b7e      	ldr	r3, [pc, #504]	@ (80015f8 <main+0x320>)
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	b21b      	sxth	r3, r3
 8001404:	4013      	ands	r3, r2
 8001406:	b21b      	sxth	r3, r3
 8001408:	b29a      	uxth	r2, r3
 800140a:	4b7b      	ldr	r3, [pc, #492]	@ (80015f8 <main+0x320>)
 800140c:	801a      	strh	r2, [r3, #0]
  SET_BIT(config_reg, RP_OVERRIDE_EN);
 800140e:	4b7a      	ldr	r3, [pc, #488]	@ (80015f8 <main+0x320>)
 8001410:	881a      	ldrh	r2, [r3, #0]
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	4313      	orrs	r3, r2
 8001416:	b29a      	uxth	r2, r3
 8001418:	4b77      	ldr	r3, [pc, #476]	@ (80015f8 <main+0x320>)
 800141a:	801a      	strh	r2, [r3, #0]

  buf[0] = (config_reg >> 8) & 0xFF;
 800141c:	4b76      	ldr	r3, [pc, #472]	@ (80015f8 <main+0x320>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	b29b      	uxth	r3, r3
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b72      	ldr	r3, [pc, #456]	@ (80015f0 <main+0x318>)
 8001428:	701a      	strb	r2, [r3, #0]
  buf[1] = config_reg & 0xFF;
 800142a:	4b73      	ldr	r3, [pc, #460]	@ (80015f8 <main+0x320>)
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	4b6f      	ldr	r3, [pc, #444]	@ (80015f0 <main+0x318>)
 8001432:	705a      	strb	r2, [r3, #1]
  hal_status = writeI2CMem(buf, CONFIG_ADDR);
 8001434:	231a      	movs	r3, #26
 8001436:	4619      	mov	r1, r3
 8001438:	486d      	ldr	r0, [pc, #436]	@ (80015f0 <main+0x318>)
 800143a:	f7ff fd15 	bl	8000e68 <writeI2CMem>
 800143e:	4603      	mov	r3, r0
 8001440:	461a      	mov	r2, r3
 8001442:	4b6c      	ldr	r3, [pc, #432]	@ (80015f4 <main+0x31c>)
 8001444:	701a      	strb	r2, [r3, #0]

  /* Interrupt Setup */
  uint16_t DRDY_2INT = 0b1 << 0;
 8001446:	2301      	movs	r3, #1
 8001448:	807b      	strh	r3, [r7, #2]
  uint16_t error_config_reg = DRDY_2INT;
 800144a:	887b      	ldrh	r3, [r7, #2]
 800144c:	803b      	strh	r3, [r7, #0]
  buf[0] = (error_config_reg >> 8) & 0xFF;
 800144e:	883b      	ldrh	r3, [r7, #0]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	b29b      	uxth	r3, r3
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4b66      	ldr	r3, [pc, #408]	@ (80015f0 <main+0x318>)
 8001458:	701a      	strb	r2, [r3, #0]
  buf[1] = error_config_reg & 0xFF;
 800145a:	883b      	ldrh	r3, [r7, #0]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4b64      	ldr	r3, [pc, #400]	@ (80015f0 <main+0x318>)
 8001460:	705a      	strb	r2, [r3, #1]

  hal_status = writeI2CMem(buf, ERROR_CONFIG);
 8001462:	2319      	movs	r3, #25
 8001464:	4619      	mov	r1, r3
 8001466:	4862      	ldr	r0, [pc, #392]	@ (80015f0 <main+0x318>)
 8001468:	f7ff fcfe 	bl	8000e68 <writeI2CMem>
 800146c:	4603      	mov	r3, r0
 800146e:	461a      	mov	r2, r3
 8001470:	4b60      	ldr	r3, [pc, #384]	@ (80015f4 <main+0x31c>)
 8001472:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* Read registers before looping */
  mux_config_reg = readI2CRegister(MUX_CONFIG_ADDR);
 8001474:	231b      	movs	r3, #27
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fcd2 	bl	8000e20 <readI2CRegister>
 800147c:	4603      	mov	r3, r0
 800147e:	461a      	mov	r2, r3
 8001480:	4b5a      	ldr	r3, [pc, #360]	@ (80015ec <main+0x314>)
 8001482:	801a      	strh	r2, [r3, #0]
  config_reg = readI2CRegister(CONFIG_ADDR);
 8001484:	231a      	movs	r3, #26
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fcca 	bl	8000e20 <readI2CRegister>
 800148c:	4603      	mov	r3, r0
 800148e:	461a      	mov	r2, r3
 8001490:	4b59      	ldr	r3, [pc, #356]	@ (80015f8 <main+0x320>)
 8001492:	801a      	strh	r2, [r3, #0]
  rcountX = readI2CRegister(RCOUNT0);
 8001494:	2308      	movs	r3, #8
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fcc2 	bl	8000e20 <readI2CRegister>
 800149c:	4603      	mov	r3, r0
 800149e:	461a      	mov	r2, r3
 80014a0:	4b56      	ldr	r3, [pc, #344]	@ (80015fc <main+0x324>)
 80014a2:	801a      	strh	r2, [r3, #0]
  clock_dividerX = readI2CRegister(CLOCK_DIVIDERS0);
 80014a4:	2314      	movs	r3, #20
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fcba 	bl	8000e20 <readI2CRegister>
 80014ac:	4603      	mov	r3, r0
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b53      	ldr	r3, [pc, #332]	@ (8001600 <main+0x328>)
 80014b2:	801a      	strh	r2, [r3, #0]
  drive_currentX = readI2CRegister(DRIVE_CURRENT0);
 80014b4:	231e      	movs	r3, #30
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fcb2 	bl	8000e20 <readI2CRegister>
 80014bc:	4603      	mov	r3, r0
 80014be:	461a      	mov	r2, r3
 80014c0:	4b50      	ldr	r3, [pc, #320]	@ (8001604 <main+0x32c>)
 80014c2:	801a      	strh	r2, [r3, #0]

  status_reg_read = readI2CRegister(STATUS);
 80014c4:	2318      	movs	r3, #24
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fcaa 	bl	8000e20 <readI2CRegister>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	4b4d      	ldr	r3, [pc, #308]	@ (8001608 <main+0x330>)
 80014d2:	801a      	strh	r2, [r3, #0]
  error_config_read = readI2CRegister(ERROR_CONFIG);
 80014d4:	2319      	movs	r3, #25
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fca2 	bl	8000e20 <readI2CRegister>
 80014dc:	4603      	mov	r3, r0
 80014de:	461a      	mov	r2, r3
 80014e0:	4b4a      	ldr	r3, [pc, #296]	@ (800160c <main+0x334>)
 80014e2:	801a      	strh	r2, [r3, #0]

  calibrate();
 80014e4:	f7ff fd64 	bl	8000fb0 <calibrate>

  while (1)
  {
	  __NOP();
 80014e8:	bf00      	nop
	  __NOP();
 80014ea:	bf00      	nop
	  if(data_ready){
 80014ec:	4b48      	ldr	r3, [pc, #288]	@ (8001610 <main+0x338>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f9      	beq.n	80014e8 <main+0x210>
		  __NOP();
 80014f4:	bf00      	nop
		  __NOP();
 80014f6:	bf00      	nop
		  // Read "STATUS" to de-assert the interrupt
		  data_ready = 0;
 80014f8:	4b45      	ldr	r3, [pc, #276]	@ (8001610 <main+0x338>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
		  hal_status = HAL_I2C_Mem_Read(&hi2c1, LDC_I2C_ADDR, STATUS, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 80014fe:	2354      	movs	r3, #84	@ 0x54
 8001500:	4619      	mov	r1, r3
 8001502:	2318      	movs	r3, #24
 8001504:	461a      	mov	r2, r3
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
 800150a:	9302      	str	r3, [sp, #8]
 800150c:	2302      	movs	r3, #2
 800150e:	9301      	str	r3, [sp, #4]
 8001510:	4b37      	ldr	r3, [pc, #220]	@ (80015f0 <main+0x318>)
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2301      	movs	r3, #1
 8001516:	483f      	ldr	r0, [pc, #252]	@ (8001614 <main+0x33c>)
 8001518:	f001 f9e0 	bl	80028dc <HAL_I2C_Mem_Read>
 800151c:	4603      	mov	r3, r0
 800151e:	461a      	mov	r2, r3
 8001520:	4b34      	ldr	r3, [pc, #208]	@ (80015f4 <main+0x31c>)
 8001522:	701a      	strb	r2, [r3, #0]
		  status_reg_read = (uint16_t)buf[0] << 8 | (buf[1]);
 8001524:	4b32      	ldr	r3, [pc, #200]	@ (80015f0 <main+0x318>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	b21a      	sxth	r2, r3
 800152c:	4b30      	ldr	r3, [pc, #192]	@ (80015f0 <main+0x318>)
 800152e:	785b      	ldrb	r3, [r3, #1]
 8001530:	b21b      	sxth	r3, r3
 8001532:	4313      	orrs	r3, r2
 8001534:	b21b      	sxth	r3, r3
 8001536:	b29a      	uxth	r2, r3
 8001538:	4b33      	ldr	r3, [pc, #204]	@ (8001608 <main+0x330>)
 800153a:	801a      	strh	r2, [r3, #0]

		  f_sensor0 = Read_DataXbits(DATA0_MSB, DATA0_LSB) - (int32_t)f_sensor0_baseline;
 800153c:	2300      	movs	r3, #0
 800153e:	2201      	movs	r2, #1
 8001540:	4611      	mov	r1, r2
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fcd4 	bl	8000ef0 <Read_DataXbits>
 8001548:	4601      	mov	r1, r0
 800154a:	4b33      	ldr	r3, [pc, #204]	@ (8001618 <main+0x340>)
 800154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001550:	4613      	mov	r3, r2
 8001552:	1acb      	subs	r3, r1, r3
 8001554:	4a31      	ldr	r2, [pc, #196]	@ (800161c <main+0x344>)
 8001556:	6013      	str	r3, [r2, #0]
		  f_sensor1 = Read_DataXbits(DATA1_MSB, DATA1_LSB) - (int32_t)f_sensor1_baseline;
 8001558:	2302      	movs	r3, #2
 800155a:	2203      	movs	r2, #3
 800155c:	4611      	mov	r1, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fcc6 	bl	8000ef0 <Read_DataXbits>
 8001564:	4601      	mov	r1, r0
 8001566:	4b2e      	ldr	r3, [pc, #184]	@ (8001620 <main+0x348>)
 8001568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156c:	4613      	mov	r3, r2
 800156e:	1acb      	subs	r3, r1, r3
 8001570:	4a2c      	ldr	r2, [pc, #176]	@ (8001624 <main+0x34c>)
 8001572:	6013      	str	r3, [r2, #0]
		  f_sensor2 = Read_DataXbits(DATA2_MSB, DATA2_LSB) - (int32_t)f_sensor2_baseline;
 8001574:	2304      	movs	r3, #4
 8001576:	2205      	movs	r2, #5
 8001578:	4611      	mov	r1, r2
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fcb8 	bl	8000ef0 <Read_DataXbits>
 8001580:	4601      	mov	r1, r0
 8001582:	4b29      	ldr	r3, [pc, #164]	@ (8001628 <main+0x350>)
 8001584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001588:	4613      	mov	r3, r2
 800158a:	1acb      	subs	r3, r1, r3
 800158c:	4a27      	ldr	r2, [pc, #156]	@ (800162c <main+0x354>)
 800158e:	6013      	str	r3, [r2, #0]
		  f_sensor3 = Read_DataXbits(DATA3_MSB, DATA3_LSB) - (int32_t)f_sensor3_baseline;
 8001590:	2306      	movs	r3, #6
 8001592:	2207      	movs	r2, #7
 8001594:	4611      	mov	r1, r2
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fcaa 	bl	8000ef0 <Read_DataXbits>
 800159c:	4601      	mov	r1, r0
 800159e:	4b24      	ldr	r3, [pc, #144]	@ (8001630 <main+0x358>)
 80015a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a4:	4613      	mov	r3, r2
 80015a6:	1acb      	subs	r3, r1, r3
 80015a8:	4a22      	ldr	r2, [pc, #136]	@ (8001634 <main+0x35c>)
 80015aa:	6013      	str	r3, [r2, #0]

		  f0 = f_sensor0/400.0;
 80015ac:	4b1b      	ldr	r3, [pc, #108]	@ (800161c <main+0x344>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ff1d 	bl	80003f0 <__aeabi_i2d>
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001638 <main+0x360>)
 80015bc:	f7ff f8ac 	bl	8000718 <__aeabi_ddiv>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	491d      	ldr	r1, [pc, #116]	@ (800163c <main+0x364>)
 80015c6:	e9c1 2300 	strd	r2, r3, [r1]
		  f1 = f_sensor1/400.0;
 80015ca:	4b16      	ldr	r3, [pc, #88]	@ (8001624 <main+0x34c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ff0e 	bl	80003f0 <__aeabi_i2d>
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <main+0x360>)
 80015da:	f7ff f89d 	bl	8000718 <__aeabi_ddiv>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4917      	ldr	r1, [pc, #92]	@ (8001640 <main+0x368>)
 80015e4:	e9c1 2300 	strd	r2, r3, [r1]
 80015e8:	e02c      	b.n	8001644 <main+0x36c>
 80015ea:	bf00      	nop
 80015ec:	2000017a 	.word	0x2000017a
 80015f0:	20000114 	.word	0x20000114
 80015f4:	20000110 	.word	0x20000110
 80015f8:	20000178 	.word	0x20000178
 80015fc:	2000017c 	.word	0x2000017c
 8001600:	2000017e 	.word	0x2000017e
 8001604:	20000180 	.word	0x20000180
 8001608:	20000182 	.word	0x20000182
 800160c:	20000184 	.word	0x20000184
 8001610:	20000174 	.word	0x20000174
 8001614:	2000002c 	.word	0x2000002c
 8001618:	20000120 	.word	0x20000120
 800161c:	20000140 	.word	0x20000140
 8001620:	20000128 	.word	0x20000128
 8001624:	20000144 	.word	0x20000144
 8001628:	20000130 	.word	0x20000130
 800162c:	20000148 	.word	0x20000148
 8001630:	20000138 	.word	0x20000138
 8001634:	2000014c 	.word	0x2000014c
 8001638:	40790000 	.word	0x40790000
 800163c:	20000150 	.word	0x20000150
 8001640:	20000158 	.word	0x20000158
		  f2 = f_sensor2/400.0;
 8001644:	4b1a      	ldr	r3, [pc, #104]	@ (80016b0 <main+0x3d8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe fed1 	bl	80003f0 <__aeabi_i2d>
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <main+0x3dc>)
 8001654:	f7ff f860 	bl	8000718 <__aeabi_ddiv>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4916      	ldr	r1, [pc, #88]	@ (80016b8 <main+0x3e0>)
 800165e:	e9c1 2300 	strd	r2, r3, [r1]
		  f3 = f_sensor3/400.0;
 8001662:	4b16      	ldr	r3, [pc, #88]	@ (80016bc <main+0x3e4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe fec2 	bl	80003f0 <__aeabi_i2d>
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <main+0x3dc>)
 8001672:	f7ff f851 	bl	8000718 <__aeabi_ddiv>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4911      	ldr	r1, [pc, #68]	@ (80016c0 <main+0x3e8>)
 800167c:	e9c1 2300 	strd	r2, r3, [r1]

		  position_decoder(f0,f1,f2,f3);
 8001680:	4b10      	ldr	r3, [pc, #64]	@ (80016c4 <main+0x3ec>)
 8001682:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001686:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <main+0x3f0>)
 8001688:	e9d3 8900 	ldrd	r8, r9, [r3]
 800168c:	4b0a      	ldr	r3, [pc, #40]	@ (80016b8 <main+0x3e0>)
 800168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001692:	490b      	ldr	r1, [pc, #44]	@ (80016c0 <main+0x3e8>)
 8001694:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001698:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800169c:	e9cd 2300 	strd	r2, r3, [sp]
 80016a0:	4642      	mov	r2, r8
 80016a2:	464b      	mov	r3, r9
 80016a4:	4620      	mov	r0, r4
 80016a6:	4629      	mov	r1, r5
 80016a8:	f7ff fd6c 	bl	8001184 <position_decoder>
	  __NOP();
 80016ac:	e71c      	b.n	80014e8 <main+0x210>
 80016ae:	bf00      	nop
 80016b0:	20000148 	.word	0x20000148
 80016b4:	40790000 	.word	0x40790000
 80016b8:	20000160 	.word	0x20000160
 80016bc:	2000014c 	.word	0x2000014c
 80016c0:	20000168 	.word	0x20000168
 80016c4:	20000150 	.word	0x20000150
 80016c8:	20000158 	.word	0x20000158

080016cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b090      	sub	sp, #64	@ 0x40
 80016d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d2:	f107 0318 	add.w	r3, r7, #24
 80016d6:	2228      	movs	r2, #40	@ 0x28
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f003 f86d 	bl	80047ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f2:	2301      	movs	r3, #1
 80016f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016f6:	2310      	movs	r3, #16
 80016f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fe:	f107 0318 	add.w	r3, r7, #24
 8001702:	4618      	mov	r0, r3
 8001704:	f001 ff06 	bl	8003514 <HAL_RCC_OscConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800170e:	f000 fa21 	bl	8001b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001712:	230f      	movs	r3, #15
 8001714:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f002 f974 	bl	8003a18 <HAL_RCC_ClockConfig>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001736:	f000 fa0d 	bl	8001b54 <Error_Handler>
  }
}
 800173a:	bf00      	nop
 800173c:	3740      	adds	r7, #64	@ 0x40
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001748:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <MX_I2C1_Init+0x50>)
 800174a:	4a13      	ldr	r2, [pc, #76]	@ (8001798 <MX_I2C1_Init+0x54>)
 800174c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800174e:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <MX_I2C1_Init+0x50>)
 8001750:	4a12      	ldr	r2, [pc, #72]	@ (800179c <MX_I2C1_Init+0x58>)
 8001752:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001754:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <MX_I2C1_Init+0x50>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800175a:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <MX_I2C1_Init+0x50>)
 800175c:	2200      	movs	r2, #0
 800175e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001760:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <MX_I2C1_Init+0x50>)
 8001762:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001766:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001768:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <MX_I2C1_Init+0x50>)
 800176a:	2200      	movs	r2, #0
 800176c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800176e:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <MX_I2C1_Init+0x50>)
 8001770:	2200      	movs	r2, #0
 8001772:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001774:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <MX_I2C1_Init+0x50>)
 8001776:	2200      	movs	r2, #0
 8001778:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <MX_I2C1_Init+0x50>)
 800177c:	2200      	movs	r2, #0
 800177e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001780:	4804      	ldr	r0, [pc, #16]	@ (8001794 <MX_I2C1_Init+0x50>)
 8001782:	f000 fe6d 	bl	8002460 <HAL_I2C_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800178c:	f000 f9e2 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	2000002c 	.word	0x2000002c
 8001798:	40005400 	.word	0x40005400
 800179c:	00061a80 	.word	0x00061a80

080017a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b096      	sub	sp, #88	@ 0x58
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017a6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]
 80017ce:	615a      	str	r2, [r3, #20]
 80017d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	2220      	movs	r2, #32
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 ffee 	bl	80047ba <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017de:	4b3e      	ldr	r3, [pc, #248]	@ (80018d8 <MX_TIM1_Init+0x138>)
 80017e0:	4a3e      	ldr	r2, [pc, #248]	@ (80018dc <MX_TIM1_Init+0x13c>)
 80017e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017e4:	4b3c      	ldr	r3, [pc, #240]	@ (80018d8 <MX_TIM1_Init+0x138>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ea:	4b3b      	ldr	r3, [pc, #236]	@ (80018d8 <MX_TIM1_Init+0x138>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 800;
 80017f0:	4b39      	ldr	r3, [pc, #228]	@ (80018d8 <MX_TIM1_Init+0x138>)
 80017f2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80017f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f8:	4b37      	ldr	r3, [pc, #220]	@ (80018d8 <MX_TIM1_Init+0x138>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017fe:	4b36      	ldr	r3, [pc, #216]	@ (80018d8 <MX_TIM1_Init+0x138>)
 8001800:	2200      	movs	r2, #0
 8001802:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001804:	4b34      	ldr	r3, [pc, #208]	@ (80018d8 <MX_TIM1_Init+0x138>)
 8001806:	2280      	movs	r2, #128	@ 0x80
 8001808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800180a:	4833      	ldr	r0, [pc, #204]	@ (80018d8 <MX_TIM1_Init+0x138>)
 800180c:	f002 fa7e 	bl	8003d0c <HAL_TIM_Base_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001816:	f000 f99d 	bl	8001b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800181a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800181e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001820:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001824:	4619      	mov	r1, r3
 8001826:	482c      	ldr	r0, [pc, #176]	@ (80018d8 <MX_TIM1_Init+0x138>)
 8001828:	f002 fbd0 	bl	8003fcc <HAL_TIM_ConfigClockSource>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001832:	f000 f98f 	bl	8001b54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001836:	4828      	ldr	r0, [pc, #160]	@ (80018d8 <MX_TIM1_Init+0x138>)
 8001838:	f002 fab7 	bl	8003daa <HAL_TIM_PWM_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001842:	f000 f987 	bl	8001b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001846:	2300      	movs	r3, #0
 8001848:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184a:	2300      	movs	r3, #0
 800184c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800184e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001852:	4619      	mov	r1, r3
 8001854:	4820      	ldr	r0, [pc, #128]	@ (80018d8 <MX_TIM1_Init+0x138>)
 8001856:	f002 ff01 	bl	800465c <HAL_TIMEx_MasterConfigSynchronization>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001860:	f000 f978 	bl	8001b54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001864:	2360      	movs	r3, #96	@ 0x60
 8001866:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800186c:	2300      	movs	r3, #0
 800186e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001870:	2300      	movs	r3, #0
 8001872:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001878:	2300      	movs	r3, #0
 800187a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800187c:	2300      	movs	r3, #0
 800187e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001880:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001884:	2200      	movs	r2, #0
 8001886:	4619      	mov	r1, r3
 8001888:	4813      	ldr	r0, [pc, #76]	@ (80018d8 <MX_TIM1_Init+0x138>)
 800188a:	f002 fadd 	bl	8003e48 <HAL_TIM_PWM_ConfigChannel>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001894:	f000 f95e 	bl	8001b54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	4619      	mov	r1, r3
 80018ba:	4807      	ldr	r0, [pc, #28]	@ (80018d8 <MX_TIM1_Init+0x138>)
 80018bc:	f002 ff2c 	bl	8004718 <HAL_TIMEx_ConfigBreakDeadTime>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80018c6:	f000 f945 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018ca:	4803      	ldr	r0, [pc, #12]	@ (80018d8 <MX_TIM1_Init+0x138>)
 80018cc:	f000 f9f2 	bl	8001cb4 <HAL_TIM_MspPostInit>

}
 80018d0:	bf00      	nop
 80018d2:	3758      	adds	r7, #88	@ 0x58
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000080 	.word	0x20000080
 80018dc:	40012c00 	.word	0x40012c00

080018e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	@ 0x28
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e6:	f107 0320 	add.w	r3, r7, #32
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
 80018fc:	611a      	str	r2, [r3, #16]
 80018fe:	615a      	str	r2, [r3, #20]
 8001900:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001902:	4b33      	ldr	r3, [pc, #204]	@ (80019d0 <MX_TIM2_Init+0xf0>)
 8001904:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001908:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800190a:	4b31      	ldr	r3, [pc, #196]	@ (80019d0 <MX_TIM2_Init+0xf0>)
 800190c:	2200      	movs	r2, #0
 800190e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001910:	4b2f      	ldr	r3, [pc, #188]	@ (80019d0 <MX_TIM2_Init+0xf0>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001916:	4b2e      	ldr	r3, [pc, #184]	@ (80019d0 <MX_TIM2_Init+0xf0>)
 8001918:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800191c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191e:	4b2c      	ldr	r3, [pc, #176]	@ (80019d0 <MX_TIM2_Init+0xf0>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001924:	4b2a      	ldr	r3, [pc, #168]	@ (80019d0 <MX_TIM2_Init+0xf0>)
 8001926:	2200      	movs	r2, #0
 8001928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800192a:	4829      	ldr	r0, [pc, #164]	@ (80019d0 <MX_TIM2_Init+0xf0>)
 800192c:	f002 fa3d 	bl	8003daa <HAL_TIM_PWM_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001936:	f000 f90d 	bl	8001b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193a:	2300      	movs	r3, #0
 800193c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193e:	2300      	movs	r3, #0
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001942:	f107 0320 	add.w	r3, r7, #32
 8001946:	4619      	mov	r1, r3
 8001948:	4821      	ldr	r0, [pc, #132]	@ (80019d0 <MX_TIM2_Init+0xf0>)
 800194a:	f002 fe87 	bl	800465c <HAL_TIMEx_MasterConfigSynchronization>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001954:	f000 f8fe 	bl	8001b54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001958:	2360      	movs	r3, #96	@ 0x60
 800195a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	2200      	movs	r2, #0
 800196c:	4619      	mov	r1, r3
 800196e:	4818      	ldr	r0, [pc, #96]	@ (80019d0 <MX_TIM2_Init+0xf0>)
 8001970:	f002 fa6a 	bl	8003e48 <HAL_TIM_PWM_ConfigChannel>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800197a:	f000 f8eb 	bl	8001b54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	2204      	movs	r2, #4
 8001982:	4619      	mov	r1, r3
 8001984:	4812      	ldr	r0, [pc, #72]	@ (80019d0 <MX_TIM2_Init+0xf0>)
 8001986:	f002 fa5f 	bl	8003e48 <HAL_TIM_PWM_ConfigChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001990:	f000 f8e0 	bl	8001b54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	2208      	movs	r2, #8
 8001998:	4619      	mov	r1, r3
 800199a:	480d      	ldr	r0, [pc, #52]	@ (80019d0 <MX_TIM2_Init+0xf0>)
 800199c:	f002 fa54 	bl	8003e48 <HAL_TIM_PWM_ConfigChannel>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80019a6:	f000 f8d5 	bl	8001b54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	220c      	movs	r2, #12
 80019ae:	4619      	mov	r1, r3
 80019b0:	4807      	ldr	r0, [pc, #28]	@ (80019d0 <MX_TIM2_Init+0xf0>)
 80019b2:	f002 fa49 	bl	8003e48 <HAL_TIM_PWM_ConfigChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 80019bc:	f000 f8ca 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019c0:	4803      	ldr	r0, [pc, #12]	@ (80019d0 <MX_TIM2_Init+0xf0>)
 80019c2:	f000 f977 	bl	8001cb4 <HAL_TIM_MspPostInit>

}
 80019c6:	bf00      	nop
 80019c8:	3728      	adds	r7, #40	@ 0x28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200000c8 	.word	0x200000c8

080019d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08a      	sub	sp, #40	@ 0x28
 80019d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e8:	4b49      	ldr	r3, [pc, #292]	@ (8001b10 <MX_GPIO_Init+0x13c>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	4a48      	ldr	r2, [pc, #288]	@ (8001b10 <MX_GPIO_Init+0x13c>)
 80019ee:	f043 0310 	orr.w	r3, r3, #16
 80019f2:	6193      	str	r3, [r2, #24]
 80019f4:	4b46      	ldr	r3, [pc, #280]	@ (8001b10 <MX_GPIO_Init+0x13c>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f003 0310 	and.w	r3, r3, #16
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a00:	4b43      	ldr	r3, [pc, #268]	@ (8001b10 <MX_GPIO_Init+0x13c>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a42      	ldr	r2, [pc, #264]	@ (8001b10 <MX_GPIO_Init+0x13c>)
 8001a06:	f043 0320 	orr.w	r3, r3, #32
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b40      	ldr	r3, [pc, #256]	@ (8001b10 <MX_GPIO_Init+0x13c>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0320 	and.w	r3, r3, #32
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a18:	4b3d      	ldr	r3, [pc, #244]	@ (8001b10 <MX_GPIO_Init+0x13c>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	4a3c      	ldr	r2, [pc, #240]	@ (8001b10 <MX_GPIO_Init+0x13c>)
 8001a1e:	f043 0304 	orr.w	r3, r3, #4
 8001a22:	6193      	str	r3, [r2, #24]
 8001a24:	4b3a      	ldr	r3, [pc, #232]	@ (8001b10 <MX_GPIO_Init+0x13c>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a30:	4b37      	ldr	r3, [pc, #220]	@ (8001b10 <MX_GPIO_Init+0x13c>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	4a36      	ldr	r2, [pc, #216]	@ (8001b10 <MX_GPIO_Init+0x13c>)
 8001a36:	f043 0308 	orr.w	r3, r3, #8
 8001a3a:	6193      	str	r3, [r2, #24]
 8001a3c:	4b34      	ldr	r3, [pc, #208]	@ (8001b10 <MX_GPIO_Init+0x13c>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2110      	movs	r1, #16
 8001a4c:	4831      	ldr	r0, [pc, #196]	@ (8001b14 <MX_GPIO_Init+0x140>)
 8001a4e:	f000 fcd7 	bl	8002400 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001a52:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	4619      	mov	r1, r3
 8001a62:	482d      	ldr	r0, [pc, #180]	@ (8001b18 <MX_GPIO_Init+0x144>)
 8001a64:	f000 fb48 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4619      	mov	r1, r3
 8001a76:	4829      	ldr	r0, [pc, #164]	@ (8001b1c <MX_GPIO_Init+0x148>)
 8001a78:	f000 fb3e 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001a7c:	f649 63f0 	movw	r3, #40688	@ 0x9ef0
 8001a80:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a82:	2303      	movs	r3, #3
 8001a84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4824      	ldr	r0, [pc, #144]	@ (8001b20 <MX_GPIO_Init+0x14c>)
 8001a8e:	f000 fb33 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001a92:	f64f 730f 	movw	r3, #65295	@ 0xff0f
 8001a96:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	481c      	ldr	r0, [pc, #112]	@ (8001b14 <MX_GPIO_Init+0x140>)
 8001aa4:	f000 fb28 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001aa8:	2310      	movs	r3, #16
 8001aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aac:	2301      	movs	r3, #1
 8001aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	4619      	mov	r1, r3
 8001abe:	4815      	ldr	r0, [pc, #84]	@ (8001b14 <MX_GPIO_Init+0x140>)
 8001ac0:	f000 fb1a 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ac4:	2320      	movs	r3, #32
 8001ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ac8:	4b16      	ldr	r3, [pc, #88]	@ (8001b24 <MX_GPIO_Init+0x150>)
 8001aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	480f      	ldr	r0, [pc, #60]	@ (8001b14 <MX_GPIO_Init+0x140>)
 8001ad8:	f000 fb0e 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8001adc:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <MX_GPIO_Init+0x154>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001af2:	4a0d      	ldr	r2, [pc, #52]	@ (8001b28 <MX_GPIO_Init+0x154>)
 8001af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af6:	6053      	str	r3, [r2, #4]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2100      	movs	r1, #0
 8001afc:	2017      	movs	r0, #23
 8001afe:	f000 fac4 	bl	800208a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b02:	2017      	movs	r0, #23
 8001b04:	f000 fadd 	bl	80020c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b08:	bf00      	nop
 8001b0a:	3728      	adds	r7, #40	@ 0x28
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40010c00 	.word	0x40010c00
 8001b18:	40011000 	.word	0x40011000
 8001b1c:	40011400 	.word	0x40011400
 8001b20:	40010800 	.word	0x40010800
 8001b24:	10210000 	.word	0x10210000
 8001b28:	40010000 	.word	0x40010000

08001b2c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_5) {
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	2b20      	cmp	r3, #32
 8001b3a:	d103      	bne.n	8001b44 <HAL_GPIO_EXTI_Callback+0x18>
	  data_ready = 1;
 8001b3c:	4b04      	ldr	r3, [pc, #16]	@ (8001b50 <HAL_GPIO_EXTI_Callback+0x24>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
  } else {
      __NOP();
  }
}
 8001b42:	e000      	b.n	8001b46 <HAL_GPIO_EXTI_Callback+0x1a>
      __NOP();
 8001b44:	bf00      	nop
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr
 8001b50:	20000174 	.word	0x20000174

08001b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b58:	b672      	cpsid	i
}
 8001b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <Error_Handler+0x8>

08001b60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b66:	4b15      	ldr	r3, [pc, #84]	@ (8001bbc <HAL_MspInit+0x5c>)
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	4a14      	ldr	r2, [pc, #80]	@ (8001bbc <HAL_MspInit+0x5c>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6193      	str	r3, [r2, #24]
 8001b72:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <HAL_MspInit+0x5c>)
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bbc <HAL_MspInit+0x5c>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	4a0e      	ldr	r2, [pc, #56]	@ (8001bbc <HAL_MspInit+0x5c>)
 8001b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b88:	61d3      	str	r3, [r2, #28]
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <HAL_MspInit+0x5c>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b96:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc0 <HAL_MspInit+0x60>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	4a04      	ldr	r2, [pc, #16]	@ (8001bc0 <HAL_MspInit+0x60>)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40010000 	.word	0x40010000

08001bc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0310 	add.w	r3, r7, #16
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a15      	ldr	r2, [pc, #84]	@ (8001c34 <HAL_I2C_MspInit+0x70>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d123      	bne.n	8001c2c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be4:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <HAL_I2C_MspInit+0x74>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4a13      	ldr	r2, [pc, #76]	@ (8001c38 <HAL_I2C_MspInit+0x74>)
 8001bea:	f043 0308 	orr.w	r3, r3, #8
 8001bee:	6193      	str	r3, [r2, #24]
 8001bf0:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <HAL_I2C_MspInit+0x74>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bfc:	23c0      	movs	r3, #192	@ 0xc0
 8001bfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c00:	2312      	movs	r3, #18
 8001c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c04:	2303      	movs	r3, #3
 8001c06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c08:	f107 0310 	add.w	r3, r7, #16
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	480b      	ldr	r0, [pc, #44]	@ (8001c3c <HAL_I2C_MspInit+0x78>)
 8001c10:	f000 fa72 	bl	80020f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c14:	4b08      	ldr	r3, [pc, #32]	@ (8001c38 <HAL_I2C_MspInit+0x74>)
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	4a07      	ldr	r2, [pc, #28]	@ (8001c38 <HAL_I2C_MspInit+0x74>)
 8001c1a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c1e:	61d3      	str	r3, [r2, #28]
 8001c20:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <HAL_I2C_MspInit+0x74>)
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c2c:	bf00      	nop
 8001c2e:	3720      	adds	r7, #32
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40005400 	.word	0x40005400
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40010c00 	.word	0x40010c00

08001c40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a09      	ldr	r2, [pc, #36]	@ (8001c74 <HAL_TIM_Base_MspInit+0x34>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d10b      	bne.n	8001c6a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c52:	4b09      	ldr	r3, [pc, #36]	@ (8001c78 <HAL_TIM_Base_MspInit+0x38>)
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	4a08      	ldr	r2, [pc, #32]	@ (8001c78 <HAL_TIM_Base_MspInit+0x38>)
 8001c58:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c5c:	6193      	str	r3, [r2, #24]
 8001c5e:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <HAL_TIM_Base_MspInit+0x38>)
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c6a:	bf00      	nop
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	40012c00 	.word	0x40012c00
 8001c78:	40021000 	.word	0x40021000

08001c7c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c8c:	d10b      	bne.n	8001ca6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c8e:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0x34>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	4a07      	ldr	r2, [pc, #28]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0x34>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	61d3      	str	r3, [r2, #28]
 8001c9a:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0x34>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ca6:	bf00      	nop
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 0310 	add.w	r3, r7, #16
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a1f      	ldr	r2, [pc, #124]	@ (8001d4c <HAL_TIM_MspPostInit+0x98>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d119      	bne.n	8001d08 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d50 <HAL_TIM_MspPostInit+0x9c>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8001d50 <HAL_TIM_MspPostInit+0x9c>)
 8001cda:	f043 0304 	orr.w	r3, r3, #4
 8001cde:	6193      	str	r3, [r2, #24]
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d50 <HAL_TIM_MspPostInit+0x9c>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cf0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfa:	f107 0310 	add.w	r3, r7, #16
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4814      	ldr	r0, [pc, #80]	@ (8001d54 <HAL_TIM_MspPostInit+0xa0>)
 8001d02:	f000 f9f9 	bl	80020f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d06:	e01c      	b.n	8001d42 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d10:	d117      	bne.n	8001d42 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	4b0f      	ldr	r3, [pc, #60]	@ (8001d50 <HAL_TIM_MspPostInit+0x9c>)
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	4a0e      	ldr	r2, [pc, #56]	@ (8001d50 <HAL_TIM_MspPostInit+0x9c>)
 8001d18:	f043 0304 	orr.w	r3, r3, #4
 8001d1c:	6193      	str	r3, [r2, #24]
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <HAL_TIM_MspPostInit+0x9c>)
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001d2a:	230f      	movs	r3, #15
 8001d2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	2302      	movs	r3, #2
 8001d34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d36:	f107 0310 	add.w	r3, r7, #16
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4805      	ldr	r0, [pc, #20]	@ (8001d54 <HAL_TIM_MspPostInit+0xa0>)
 8001d3e:	f000 f9db 	bl	80020f8 <HAL_GPIO_Init>
}
 8001d42:	bf00      	nop
 8001d44:	3720      	adds	r7, #32
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40012c00 	.word	0x40012c00
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40010800 	.word	0x40010800

08001d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d5c:	bf00      	nop
 8001d5e:	e7fd      	b.n	8001d5c <NMI_Handler+0x4>

08001d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <HardFault_Handler+0x4>

08001d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <MemManage_Handler+0x4>

08001d70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <BusFault_Handler+0x4>

08001d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <UsageFault_Handler+0x4>

08001d80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr

08001d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da8:	f000 f87c 	bl	8001ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001db4:	2020      	movs	r0, #32
 8001db6:	f000 fb3b 	bl	8002430 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr
	...

08001dcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dcc:	f7ff fff7 	bl	8001dbe <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dd0:	480b      	ldr	r0, [pc, #44]	@ (8001e00 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001dd2:	490c      	ldr	r1, [pc, #48]	@ (8001e04 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8001e08 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dd8:	e002      	b.n	8001de0 <LoopCopyDataInit>

08001dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dde:	3304      	adds	r3, #4

08001de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001de4:	d3f9      	bcc.n	8001dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001de6:	4a09      	ldr	r2, [pc, #36]	@ (8001e0c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001de8:	4c09      	ldr	r4, [pc, #36]	@ (8001e10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dec:	e001      	b.n	8001df2 <LoopFillZerobss>

08001dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df0:	3204      	adds	r2, #4

08001df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001df4:	d3fb      	bcc.n	8001dee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001df6:	f002 fce9 	bl	80047cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dfa:	f7ff fa6d 	bl	80012d8 <main>
  bx lr
 8001dfe:	4770      	bx	lr
  ldr r0, =_sdata
 8001e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e08:	08004868 	.word	0x08004868
  ldr r2, =_sbss
 8001e0c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001e10:	2000018c 	.word	0x2000018c

08001e14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e14:	e7fe      	b.n	8001e14 <ADC1_2_IRQHandler>
	...

08001e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e1c:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <HAL_Init+0x28>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a07      	ldr	r2, [pc, #28]	@ (8001e40 <HAL_Init+0x28>)
 8001e22:	f043 0310 	orr.w	r3, r3, #16
 8001e26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e28:	2003      	movs	r0, #3
 8001e2a:	f000 f923 	bl	8002074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e2e:	200f      	movs	r0, #15
 8001e30:	f000 f808 	bl	8001e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e34:	f7ff fe94 	bl	8001b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40022000 	.word	0x40022000

08001e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e4c:	4b12      	ldr	r3, [pc, #72]	@ (8001e98 <HAL_InitTick+0x54>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b12      	ldr	r3, [pc, #72]	@ (8001e9c <HAL_InitTick+0x58>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f93b 	bl	80020de <HAL_SYSTICK_Config>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00e      	b.n	8001e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b0f      	cmp	r3, #15
 8001e76:	d80a      	bhi.n	8001e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f000 f903 	bl	800208a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e84:	4a06      	ldr	r2, [pc, #24]	@ (8001ea0 <HAL_InitTick+0x5c>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e000      	b.n	8001e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000000 	.word	0x20000000
 8001e9c:	20000008 	.word	0x20000008
 8001ea0:	20000004 	.word	0x20000004

08001ea4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea8:	4b05      	ldr	r3, [pc, #20]	@ (8001ec0 <HAL_IncTick+0x1c>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <HAL_IncTick+0x20>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4a03      	ldr	r2, [pc, #12]	@ (8001ec4 <HAL_IncTick+0x20>)
 8001eb6:	6013      	str	r3, [r2, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	20000008 	.word	0x20000008
 8001ec4:	20000188 	.word	0x20000188

08001ec8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ecc:	4b02      	ldr	r3, [pc, #8]	@ (8001ed8 <HAL_GetTick+0x10>)
 8001ece:	681b      	ldr	r3, [r3, #0]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	20000188 	.word	0x20000188

08001edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eec:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f0e:	4a04      	ldr	r2, [pc, #16]	@ (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	60d3      	str	r3, [r2, #12]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f28:	4b04      	ldr	r3, [pc, #16]	@ (8001f3c <__NVIC_GetPriorityGrouping+0x18>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	0a1b      	lsrs	r3, r3, #8
 8001f2e:	f003 0307 	and.w	r3, r3, #7
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	db0b      	blt.n	8001f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	f003 021f 	and.w	r2, r3, #31
 8001f58:	4906      	ldr	r1, [pc, #24]	@ (8001f74 <__NVIC_EnableIRQ+0x34>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	2001      	movs	r0, #1
 8001f62:	fa00 f202 	lsl.w	r2, r0, r2
 8001f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	e000e100 	.word	0xe000e100

08001f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	6039      	str	r1, [r7, #0]
 8001f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	db0a      	blt.n	8001fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	490c      	ldr	r1, [pc, #48]	@ (8001fc4 <__NVIC_SetPriority+0x4c>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	0112      	lsls	r2, r2, #4
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa0:	e00a      	b.n	8001fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4908      	ldr	r1, [pc, #32]	@ (8001fc8 <__NVIC_SetPriority+0x50>)
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	3b04      	subs	r3, #4
 8001fb0:	0112      	lsls	r2, r2, #4
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	761a      	strb	r2, [r3, #24]
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	e000e100 	.word	0xe000e100
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b089      	sub	sp, #36	@ 0x24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f1c3 0307 	rsb	r3, r3, #7
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	bf28      	it	cs
 8001fea:	2304      	movcs	r3, #4
 8001fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	2b06      	cmp	r3, #6
 8001ff4:	d902      	bls.n	8001ffc <NVIC_EncodePriority+0x30>
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3b03      	subs	r3, #3
 8001ffa:	e000      	b.n	8001ffe <NVIC_EncodePriority+0x32>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002000:	f04f 32ff 	mov.w	r2, #4294967295
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43da      	mvns	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	401a      	ands	r2, r3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002014:	f04f 31ff 	mov.w	r1, #4294967295
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	fa01 f303 	lsl.w	r3, r1, r3
 800201e:	43d9      	mvns	r1, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	4313      	orrs	r3, r2
         );
}
 8002026:	4618      	mov	r0, r3
 8002028:	3724      	adds	r7, #36	@ 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3b01      	subs	r3, #1
 800203c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002040:	d301      	bcc.n	8002046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002042:	2301      	movs	r3, #1
 8002044:	e00f      	b.n	8002066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002046:	4a0a      	ldr	r2, [pc, #40]	@ (8002070 <SysTick_Config+0x40>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3b01      	subs	r3, #1
 800204c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800204e:	210f      	movs	r1, #15
 8002050:	f04f 30ff 	mov.w	r0, #4294967295
 8002054:	f7ff ff90 	bl	8001f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002058:	4b05      	ldr	r3, [pc, #20]	@ (8002070 <SysTick_Config+0x40>)
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800205e:	4b04      	ldr	r3, [pc, #16]	@ (8002070 <SysTick_Config+0x40>)
 8002060:	2207      	movs	r2, #7
 8002062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	e000e010 	.word	0xe000e010

08002074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff ff2d 	bl	8001edc <__NVIC_SetPriorityGrouping>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800208a:	b580      	push	{r7, lr}
 800208c:	b086      	sub	sp, #24
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
 8002096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800209c:	f7ff ff42 	bl	8001f24 <__NVIC_GetPriorityGrouping>
 80020a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68b9      	ldr	r1, [r7, #8]
 80020a6:	6978      	ldr	r0, [r7, #20]
 80020a8:	f7ff ff90 	bl	8001fcc <NVIC_EncodePriority>
 80020ac:	4602      	mov	r2, r0
 80020ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff ff5f 	bl	8001f78 <__NVIC_SetPriority>
}
 80020ba:	bf00      	nop
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff35 	bl	8001f40 <__NVIC_EnableIRQ>
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff ffa2 	bl	8002030 <SysTick_Config>
 80020ec:	4603      	mov	r3, r0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b08b      	sub	sp, #44	@ 0x2c
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002102:	2300      	movs	r3, #0
 8002104:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002106:	2300      	movs	r3, #0
 8002108:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800210a:	e169      	b.n	80023e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800210c:	2201      	movs	r2, #1
 800210e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	69fa      	ldr	r2, [r7, #28]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	429a      	cmp	r2, r3
 8002126:	f040 8158 	bne.w	80023da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4a9a      	ldr	r2, [pc, #616]	@ (8002398 <HAL_GPIO_Init+0x2a0>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d05e      	beq.n	80021f2 <HAL_GPIO_Init+0xfa>
 8002134:	4a98      	ldr	r2, [pc, #608]	@ (8002398 <HAL_GPIO_Init+0x2a0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d875      	bhi.n	8002226 <HAL_GPIO_Init+0x12e>
 800213a:	4a98      	ldr	r2, [pc, #608]	@ (800239c <HAL_GPIO_Init+0x2a4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d058      	beq.n	80021f2 <HAL_GPIO_Init+0xfa>
 8002140:	4a96      	ldr	r2, [pc, #600]	@ (800239c <HAL_GPIO_Init+0x2a4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d86f      	bhi.n	8002226 <HAL_GPIO_Init+0x12e>
 8002146:	4a96      	ldr	r2, [pc, #600]	@ (80023a0 <HAL_GPIO_Init+0x2a8>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d052      	beq.n	80021f2 <HAL_GPIO_Init+0xfa>
 800214c:	4a94      	ldr	r2, [pc, #592]	@ (80023a0 <HAL_GPIO_Init+0x2a8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d869      	bhi.n	8002226 <HAL_GPIO_Init+0x12e>
 8002152:	4a94      	ldr	r2, [pc, #592]	@ (80023a4 <HAL_GPIO_Init+0x2ac>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d04c      	beq.n	80021f2 <HAL_GPIO_Init+0xfa>
 8002158:	4a92      	ldr	r2, [pc, #584]	@ (80023a4 <HAL_GPIO_Init+0x2ac>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d863      	bhi.n	8002226 <HAL_GPIO_Init+0x12e>
 800215e:	4a92      	ldr	r2, [pc, #584]	@ (80023a8 <HAL_GPIO_Init+0x2b0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d046      	beq.n	80021f2 <HAL_GPIO_Init+0xfa>
 8002164:	4a90      	ldr	r2, [pc, #576]	@ (80023a8 <HAL_GPIO_Init+0x2b0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d85d      	bhi.n	8002226 <HAL_GPIO_Init+0x12e>
 800216a:	2b12      	cmp	r3, #18
 800216c:	d82a      	bhi.n	80021c4 <HAL_GPIO_Init+0xcc>
 800216e:	2b12      	cmp	r3, #18
 8002170:	d859      	bhi.n	8002226 <HAL_GPIO_Init+0x12e>
 8002172:	a201      	add	r2, pc, #4	@ (adr r2, 8002178 <HAL_GPIO_Init+0x80>)
 8002174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002178:	080021f3 	.word	0x080021f3
 800217c:	080021cd 	.word	0x080021cd
 8002180:	080021df 	.word	0x080021df
 8002184:	08002221 	.word	0x08002221
 8002188:	08002227 	.word	0x08002227
 800218c:	08002227 	.word	0x08002227
 8002190:	08002227 	.word	0x08002227
 8002194:	08002227 	.word	0x08002227
 8002198:	08002227 	.word	0x08002227
 800219c:	08002227 	.word	0x08002227
 80021a0:	08002227 	.word	0x08002227
 80021a4:	08002227 	.word	0x08002227
 80021a8:	08002227 	.word	0x08002227
 80021ac:	08002227 	.word	0x08002227
 80021b0:	08002227 	.word	0x08002227
 80021b4:	08002227 	.word	0x08002227
 80021b8:	08002227 	.word	0x08002227
 80021bc:	080021d5 	.word	0x080021d5
 80021c0:	080021e9 	.word	0x080021e9
 80021c4:	4a79      	ldr	r2, [pc, #484]	@ (80023ac <HAL_GPIO_Init+0x2b4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d013      	beq.n	80021f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021ca:	e02c      	b.n	8002226 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	623b      	str	r3, [r7, #32]
          break;
 80021d2:	e029      	b.n	8002228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	3304      	adds	r3, #4
 80021da:	623b      	str	r3, [r7, #32]
          break;
 80021dc:	e024      	b.n	8002228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	3308      	adds	r3, #8
 80021e4:	623b      	str	r3, [r7, #32]
          break;
 80021e6:	e01f      	b.n	8002228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	330c      	adds	r3, #12
 80021ee:	623b      	str	r3, [r7, #32]
          break;
 80021f0:	e01a      	b.n	8002228 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d102      	bne.n	8002200 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021fa:	2304      	movs	r3, #4
 80021fc:	623b      	str	r3, [r7, #32]
          break;
 80021fe:	e013      	b.n	8002228 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d105      	bne.n	8002214 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002208:	2308      	movs	r3, #8
 800220a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69fa      	ldr	r2, [r7, #28]
 8002210:	611a      	str	r2, [r3, #16]
          break;
 8002212:	e009      	b.n	8002228 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002214:	2308      	movs	r3, #8
 8002216:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69fa      	ldr	r2, [r7, #28]
 800221c:	615a      	str	r2, [r3, #20]
          break;
 800221e:	e003      	b.n	8002228 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002220:	2300      	movs	r3, #0
 8002222:	623b      	str	r3, [r7, #32]
          break;
 8002224:	e000      	b.n	8002228 <HAL_GPIO_Init+0x130>
          break;
 8002226:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	2bff      	cmp	r3, #255	@ 0xff
 800222c:	d801      	bhi.n	8002232 <HAL_GPIO_Init+0x13a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	e001      	b.n	8002236 <HAL_GPIO_Init+0x13e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3304      	adds	r3, #4
 8002236:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	2bff      	cmp	r3, #255	@ 0xff
 800223c:	d802      	bhi.n	8002244 <HAL_GPIO_Init+0x14c>
 800223e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	e002      	b.n	800224a <HAL_GPIO_Init+0x152>
 8002244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002246:	3b08      	subs	r3, #8
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	210f      	movs	r1, #15
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	fa01 f303 	lsl.w	r3, r1, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	401a      	ands	r2, r3
 800225c:	6a39      	ldr	r1, [r7, #32]
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	fa01 f303 	lsl.w	r3, r1, r3
 8002264:	431a      	orrs	r2, r3
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 80b1 	beq.w	80023da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002278:	4b4d      	ldr	r3, [pc, #308]	@ (80023b0 <HAL_GPIO_Init+0x2b8>)
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	4a4c      	ldr	r2, [pc, #304]	@ (80023b0 <HAL_GPIO_Init+0x2b8>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6193      	str	r3, [r2, #24]
 8002284:	4b4a      	ldr	r3, [pc, #296]	@ (80023b0 <HAL_GPIO_Init+0x2b8>)
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002290:	4a48      	ldr	r2, [pc, #288]	@ (80023b4 <HAL_GPIO_Init+0x2bc>)
 8002292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002294:	089b      	lsrs	r3, r3, #2
 8002296:	3302      	adds	r3, #2
 8002298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	220f      	movs	r2, #15
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	4013      	ands	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a40      	ldr	r2, [pc, #256]	@ (80023b8 <HAL_GPIO_Init+0x2c0>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d013      	beq.n	80022e4 <HAL_GPIO_Init+0x1ec>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a3f      	ldr	r2, [pc, #252]	@ (80023bc <HAL_GPIO_Init+0x2c4>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d00d      	beq.n	80022e0 <HAL_GPIO_Init+0x1e8>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a3e      	ldr	r2, [pc, #248]	@ (80023c0 <HAL_GPIO_Init+0x2c8>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d007      	beq.n	80022dc <HAL_GPIO_Init+0x1e4>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a3d      	ldr	r2, [pc, #244]	@ (80023c4 <HAL_GPIO_Init+0x2cc>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d101      	bne.n	80022d8 <HAL_GPIO_Init+0x1e0>
 80022d4:	2303      	movs	r3, #3
 80022d6:	e006      	b.n	80022e6 <HAL_GPIO_Init+0x1ee>
 80022d8:	2304      	movs	r3, #4
 80022da:	e004      	b.n	80022e6 <HAL_GPIO_Init+0x1ee>
 80022dc:	2302      	movs	r3, #2
 80022de:	e002      	b.n	80022e6 <HAL_GPIO_Init+0x1ee>
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <HAL_GPIO_Init+0x1ee>
 80022e4:	2300      	movs	r3, #0
 80022e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022e8:	f002 0203 	and.w	r2, r2, #3
 80022ec:	0092      	lsls	r2, r2, #2
 80022ee:	4093      	lsls	r3, r2
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022f6:	492f      	ldr	r1, [pc, #188]	@ (80023b4 <HAL_GPIO_Init+0x2bc>)
 80022f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fa:	089b      	lsrs	r3, r3, #2
 80022fc:	3302      	adds	r3, #2
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d006      	beq.n	800231e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002310:	4b2d      	ldr	r3, [pc, #180]	@ (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	492c      	ldr	r1, [pc, #176]	@ (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	608b      	str	r3, [r1, #8]
 800231c:	e006      	b.n	800232c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800231e:	4b2a      	ldr	r3, [pc, #168]	@ (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	43db      	mvns	r3, r3
 8002326:	4928      	ldr	r1, [pc, #160]	@ (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002328:	4013      	ands	r3, r2
 800232a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d006      	beq.n	8002346 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002338:	4b23      	ldr	r3, [pc, #140]	@ (80023c8 <HAL_GPIO_Init+0x2d0>)
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	4922      	ldr	r1, [pc, #136]	@ (80023c8 <HAL_GPIO_Init+0x2d0>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	60cb      	str	r3, [r1, #12]
 8002344:	e006      	b.n	8002354 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002346:	4b20      	ldr	r3, [pc, #128]	@ (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	43db      	mvns	r3, r3
 800234e:	491e      	ldr	r1, [pc, #120]	@ (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002350:	4013      	ands	r3, r2
 8002352:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d006      	beq.n	800236e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002360:	4b19      	ldr	r3, [pc, #100]	@ (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	4918      	ldr	r1, [pc, #96]	@ (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]
 800236c:	e006      	b.n	800237c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800236e:	4b16      	ldr	r3, [pc, #88]	@ (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	43db      	mvns	r3, r3
 8002376:	4914      	ldr	r1, [pc, #80]	@ (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002378:	4013      	ands	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d021      	beq.n	80023cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002388:	4b0f      	ldr	r3, [pc, #60]	@ (80023c8 <HAL_GPIO_Init+0x2d0>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	490e      	ldr	r1, [pc, #56]	@ (80023c8 <HAL_GPIO_Init+0x2d0>)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	600b      	str	r3, [r1, #0]
 8002394:	e021      	b.n	80023da <HAL_GPIO_Init+0x2e2>
 8002396:	bf00      	nop
 8002398:	10320000 	.word	0x10320000
 800239c:	10310000 	.word	0x10310000
 80023a0:	10220000 	.word	0x10220000
 80023a4:	10210000 	.word	0x10210000
 80023a8:	10120000 	.word	0x10120000
 80023ac:	10110000 	.word	0x10110000
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40010000 	.word	0x40010000
 80023b8:	40010800 	.word	0x40010800
 80023bc:	40010c00 	.word	0x40010c00
 80023c0:	40011000 	.word	0x40011000
 80023c4:	40011400 	.word	0x40011400
 80023c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023cc:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <HAL_GPIO_Init+0x304>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	43db      	mvns	r3, r3
 80023d4:	4909      	ldr	r1, [pc, #36]	@ (80023fc <HAL_GPIO_Init+0x304>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023dc:	3301      	adds	r3, #1
 80023de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f47f ae8e 	bne.w	800210c <HAL_GPIO_Init+0x14>
  }
}
 80023f0:	bf00      	nop
 80023f2:	bf00      	nop
 80023f4:	372c      	adds	r7, #44	@ 0x2c
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr
 80023fc:	40010400 	.word	0x40010400

08002400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	807b      	strh	r3, [r7, #2]
 800240c:	4613      	mov	r3, r2
 800240e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002410:	787b      	ldrb	r3, [r7, #1]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002416:	887a      	ldrh	r2, [r7, #2]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800241c:	e003      	b.n	8002426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800241e:	887b      	ldrh	r3, [r7, #2]
 8002420:	041a      	lsls	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	611a      	str	r2, [r3, #16]
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr

08002430 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800243a:	4b08      	ldr	r3, [pc, #32]	@ (800245c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800243c:	695a      	ldr	r2, [r3, #20]
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	4013      	ands	r3, r2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d006      	beq.n	8002454 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002446:	4a05      	ldr	r2, [pc, #20]	@ (800245c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fb6c 	bl	8001b2c <HAL_GPIO_EXTI_Callback>
  }
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40010400 	.word	0x40010400

08002460 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e12b      	b.n	80026ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff fb9c 	bl	8001bc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2224      	movs	r2, #36	@ 0x24
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0201 	bic.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024c4:	f001 fbf0 	bl	8003ca8 <HAL_RCC_GetPCLK1Freq>
 80024c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4a81      	ldr	r2, [pc, #516]	@ (80026d4 <HAL_I2C_Init+0x274>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d807      	bhi.n	80024e4 <HAL_I2C_Init+0x84>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4a80      	ldr	r2, [pc, #512]	@ (80026d8 <HAL_I2C_Init+0x278>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	bf94      	ite	ls
 80024dc:	2301      	movls	r3, #1
 80024de:	2300      	movhi	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	e006      	b.n	80024f2 <HAL_I2C_Init+0x92>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4a7d      	ldr	r2, [pc, #500]	@ (80026dc <HAL_I2C_Init+0x27c>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	bf94      	ite	ls
 80024ec:	2301      	movls	r3, #1
 80024ee:	2300      	movhi	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e0e7      	b.n	80026ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4a78      	ldr	r2, [pc, #480]	@ (80026e0 <HAL_I2C_Init+0x280>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	0c9b      	lsrs	r3, r3, #18
 8002504:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	430a      	orrs	r2, r1
 8002518:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	4a6a      	ldr	r2, [pc, #424]	@ (80026d4 <HAL_I2C_Init+0x274>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d802      	bhi.n	8002534 <HAL_I2C_Init+0xd4>
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	3301      	adds	r3, #1
 8002532:	e009      	b.n	8002548 <HAL_I2C_Init+0xe8>
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800253a:	fb02 f303 	mul.w	r3, r2, r3
 800253e:	4a69      	ldr	r2, [pc, #420]	@ (80026e4 <HAL_I2C_Init+0x284>)
 8002540:	fba2 2303 	umull	r2, r3, r2, r3
 8002544:	099b      	lsrs	r3, r3, #6
 8002546:	3301      	adds	r3, #1
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	430b      	orrs	r3, r1
 800254e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800255a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	495c      	ldr	r1, [pc, #368]	@ (80026d4 <HAL_I2C_Init+0x274>)
 8002564:	428b      	cmp	r3, r1
 8002566:	d819      	bhi.n	800259c <HAL_I2C_Init+0x13c>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1e59      	subs	r1, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	fbb1 f3f3 	udiv	r3, r1, r3
 8002576:	1c59      	adds	r1, r3, #1
 8002578:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800257c:	400b      	ands	r3, r1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00a      	beq.n	8002598 <HAL_I2C_Init+0x138>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1e59      	subs	r1, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002590:	3301      	adds	r3, #1
 8002592:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002596:	e051      	b.n	800263c <HAL_I2C_Init+0x1dc>
 8002598:	2304      	movs	r3, #4
 800259a:	e04f      	b.n	800263c <HAL_I2C_Init+0x1dc>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d111      	bne.n	80025c8 <HAL_I2C_Init+0x168>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1e58      	subs	r0, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6859      	ldr	r1, [r3, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	440b      	add	r3, r1
 80025b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025b6:	3301      	adds	r3, #1
 80025b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025bc:	2b00      	cmp	r3, #0
 80025be:	bf0c      	ite	eq
 80025c0:	2301      	moveq	r3, #1
 80025c2:	2300      	movne	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	e012      	b.n	80025ee <HAL_I2C_Init+0x18e>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1e58      	subs	r0, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6859      	ldr	r1, [r3, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	0099      	lsls	r1, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	fbb0 f3f3 	udiv	r3, r0, r3
 80025de:	3301      	adds	r3, #1
 80025e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	bf0c      	ite	eq
 80025e8:	2301      	moveq	r3, #1
 80025ea:	2300      	movne	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_I2C_Init+0x196>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e022      	b.n	800263c <HAL_I2C_Init+0x1dc>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10e      	bne.n	800261c <HAL_I2C_Init+0x1bc>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	1e58      	subs	r0, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6859      	ldr	r1, [r3, #4]
 8002606:	460b      	mov	r3, r1
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	440b      	add	r3, r1
 800260c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002610:	3301      	adds	r3, #1
 8002612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002616:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800261a:	e00f      	b.n	800263c <HAL_I2C_Init+0x1dc>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1e58      	subs	r0, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6859      	ldr	r1, [r3, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	0099      	lsls	r1, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002632:	3301      	adds	r3, #1
 8002634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002638:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	6809      	ldr	r1, [r1, #0]
 8002640:	4313      	orrs	r3, r2
 8002642:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69da      	ldr	r2, [r3, #28]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800266a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6911      	ldr	r1, [r2, #16]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68d2      	ldr	r2, [r2, #12]
 8002676:	4311      	orrs	r1, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	430b      	orrs	r3, r1
 800267e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2220      	movs	r2, #32
 80026b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	000186a0 	.word	0x000186a0
 80026d8:	001e847f 	.word	0x001e847f
 80026dc:	003d08ff 	.word	0x003d08ff
 80026e0:	431bde83 	.word	0x431bde83
 80026e4:	10624dd3 	.word	0x10624dd3

080026e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	4608      	mov	r0, r1
 80026f2:	4611      	mov	r1, r2
 80026f4:	461a      	mov	r2, r3
 80026f6:	4603      	mov	r3, r0
 80026f8:	817b      	strh	r3, [r7, #10]
 80026fa:	460b      	mov	r3, r1
 80026fc:	813b      	strh	r3, [r7, #8]
 80026fe:	4613      	mov	r3, r2
 8002700:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002702:	f7ff fbe1 	bl	8001ec8 <HAL_GetTick>
 8002706:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b20      	cmp	r3, #32
 8002712:	f040 80d9 	bne.w	80028c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	2319      	movs	r3, #25
 800271c:	2201      	movs	r2, #1
 800271e:	496d      	ldr	r1, [pc, #436]	@ (80028d4 <HAL_I2C_Mem_Write+0x1ec>)
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 fcc1 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800272c:	2302      	movs	r3, #2
 800272e:	e0cc      	b.n	80028ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_I2C_Mem_Write+0x56>
 800273a:	2302      	movs	r3, #2
 800273c:	e0c5      	b.n	80028ca <HAL_I2C_Mem_Write+0x1e2>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b01      	cmp	r3, #1
 8002752:	d007      	beq.n	8002764 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002772:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2221      	movs	r2, #33	@ 0x21
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2240      	movs	r2, #64	@ 0x40
 8002780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6a3a      	ldr	r2, [r7, #32]
 800278e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002794:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4a4d      	ldr	r2, [pc, #308]	@ (80028d8 <HAL_I2C_Mem_Write+0x1f0>)
 80027a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027a6:	88f8      	ldrh	r0, [r7, #6]
 80027a8:	893a      	ldrh	r2, [r7, #8]
 80027aa:	8979      	ldrh	r1, [r7, #10]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	9301      	str	r3, [sp, #4]
 80027b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	4603      	mov	r3, r0
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 faf8 	bl	8002dac <I2C_RequestMemoryWrite>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d052      	beq.n	8002868 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e081      	b.n	80028ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 fd86 	bl	80032dc <I2C_WaitOnTXEFlagUntilTimeout>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00d      	beq.n	80027f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d107      	bne.n	80027ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e06b      	b.n	80028ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f6:	781a      	ldrb	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002818:	b29b      	uxth	r3, r3
 800281a:	3b01      	subs	r3, #1
 800281c:	b29a      	uxth	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b04      	cmp	r3, #4
 800282e:	d11b      	bne.n	8002868 <HAL_I2C_Mem_Write+0x180>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002834:	2b00      	cmp	r3, #0
 8002836:	d017      	beq.n	8002868 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283c:	781a      	ldrb	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800285e:	b29b      	uxth	r3, r3
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1aa      	bne.n	80027c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 fd79 	bl	800336c <I2C_WaitOnBTFFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00d      	beq.n	800289c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002884:	2b04      	cmp	r3, #4
 8002886:	d107      	bne.n	8002898 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002896:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e016      	b.n	80028ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	e000      	b.n	80028ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80028c8:	2302      	movs	r3, #2
  }
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	00100002 	.word	0x00100002
 80028d8:	ffff0000 	.word	0xffff0000

080028dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08c      	sub	sp, #48	@ 0x30
 80028e0:	af02      	add	r7, sp, #8
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	4608      	mov	r0, r1
 80028e6:	4611      	mov	r1, r2
 80028e8:	461a      	mov	r2, r3
 80028ea:	4603      	mov	r3, r0
 80028ec:	817b      	strh	r3, [r7, #10]
 80028ee:	460b      	mov	r3, r1
 80028f0:	813b      	strh	r3, [r7, #8]
 80028f2:	4613      	mov	r3, r2
 80028f4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028fa:	f7ff fae5 	bl	8001ec8 <HAL_GetTick>
 80028fe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b20      	cmp	r3, #32
 800290a:	f040 8244 	bne.w	8002d96 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	2319      	movs	r3, #25
 8002914:	2201      	movs	r2, #1
 8002916:	4982      	ldr	r1, [pc, #520]	@ (8002b20 <HAL_I2C_Mem_Read+0x244>)
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 fbc5 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002924:	2302      	movs	r3, #2
 8002926:	e237      	b.n	8002d98 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_I2C_Mem_Read+0x5a>
 8002932:	2302      	movs	r3, #2
 8002934:	e230      	b.n	8002d98 <HAL_I2C_Mem_Read+0x4bc>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b01      	cmp	r3, #1
 800294a:	d007      	beq.n	800295c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800296a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2222      	movs	r2, #34	@ 0x22
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2240      	movs	r2, #64	@ 0x40
 8002978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002986:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800298c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4a62      	ldr	r2, [pc, #392]	@ (8002b24 <HAL_I2C_Mem_Read+0x248>)
 800299c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800299e:	88f8      	ldrh	r0, [r7, #6]
 80029a0:	893a      	ldrh	r2, [r7, #8]
 80029a2:	8979      	ldrh	r1, [r7, #10]
 80029a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	4603      	mov	r3, r0
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 fa92 	bl	8002ed8 <I2C_RequestMemoryRead>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e1ec      	b.n	8002d98 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d113      	bne.n	80029ee <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	61fb      	str	r3, [r7, #28]
 80029da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	e1c0      	b.n	8002d70 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d11e      	bne.n	8002a34 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a06:	b672      	cpsid	i
}
 8002a08:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61bb      	str	r3, [r7, #24]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	61bb      	str	r3, [r7, #24]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a30:	b662      	cpsie	i
}
 8002a32:	e035      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d11e      	bne.n	8002a7a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a4c:	b672      	cpsid	i
}
 8002a4e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a76:	b662      	cpsie	i
}
 8002a78:	e012      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a88:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002aa0:	e166      	b.n	8002d70 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	f200 811f 	bhi.w	8002cea <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d123      	bne.n	8002afc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ab6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 fc9f 	bl	80033fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e167      	b.n	8002d98 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	691a      	ldr	r2, [r3, #16]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002afa:	e139      	b.n	8002d70 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d152      	bne.n	8002baa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	4906      	ldr	r1, [pc, #24]	@ (8002b28 <HAL_I2C_Mem_Read+0x24c>)
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 faca 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d008      	beq.n	8002b2c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e13c      	b.n	8002d98 <HAL_I2C_Mem_Read+0x4bc>
 8002b1e:	bf00      	nop
 8002b20:	00100002 	.word	0x00100002
 8002b24:	ffff0000 	.word	0xffff0000
 8002b28:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002b2c:	b672      	cpsid	i
}
 8002b2e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691a      	ldr	r2, [r3, #16]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b72:	b662      	cpsie	i
}
 8002b74:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ba8:	e0e2      	b.n	8002d70 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	497b      	ldr	r1, [pc, #492]	@ (8002da0 <HAL_I2C_Mem_Read+0x4c4>)
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 fa77 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0e9      	b.n	8002d98 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bd2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd4:	b672      	cpsid	i
}
 8002bd6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691a      	ldr	r2, [r3, #16]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c0a:	4b66      	ldr	r3, [pc, #408]	@ (8002da4 <HAL_I2C_Mem_Read+0x4c8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	08db      	lsrs	r3, r3, #3
 8002c10:	4a65      	ldr	r2, [pc, #404]	@ (8002da8 <HAL_I2C_Mem_Read+0x4cc>)
 8002c12:	fba2 2303 	umull	r2, r3, r2, r3
 8002c16:	0a1a      	lsrs	r2, r3, #8
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	00da      	lsls	r2, r3, #3
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d118      	bne.n	8002c62 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	f043 0220 	orr.w	r2, r3, #32
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002c52:	b662      	cpsie	i
}
 8002c54:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e09a      	b.n	8002d98 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d1d9      	bne.n	8002c24 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691a      	ldr	r2, [r3, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002cb2:	b662      	cpsie	i
}
 8002cb4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	691a      	ldr	r2, [r3, #16]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ce8:	e042      	b.n	8002d70 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 fb84 	bl	80033fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e04c      	b.n	8002d98 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	691a      	ldr	r2, [r3, #16]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d118      	bne.n	8002d70 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f47f ae94 	bne.w	8002aa2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	e000      	b.n	8002d98 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002d96:	2302      	movs	r3, #2
  }
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3728      	adds	r7, #40	@ 0x28
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	00010004 	.word	0x00010004
 8002da4:	20000000 	.word	0x20000000
 8002da8:	14f8b589 	.word	0x14f8b589

08002dac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	4608      	mov	r0, r1
 8002db6:	4611      	mov	r1, r2
 8002db8:	461a      	mov	r2, r3
 8002dba:	4603      	mov	r3, r0
 8002dbc:	817b      	strh	r3, [r7, #10]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	813b      	strh	r3, [r7, #8]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 f960 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00d      	beq.n	8002e0a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dfc:	d103      	bne.n	8002e06 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e04:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e05f      	b.n	8002eca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e0a:	897b      	ldrh	r3, [r7, #10]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1c:	6a3a      	ldr	r2, [r7, #32]
 8002e1e:	492d      	ldr	r1, [pc, #180]	@ (8002ed4 <I2C_RequestMemoryWrite+0x128>)
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 f9bb 	bl	800319c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e04c      	b.n	8002eca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e48:	6a39      	ldr	r1, [r7, #32]
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 fa46 	bl	80032dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00d      	beq.n	8002e72 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d107      	bne.n	8002e6e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e02b      	b.n	8002eca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e72:	88fb      	ldrh	r3, [r7, #6]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d105      	bne.n	8002e84 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e78:	893b      	ldrh	r3, [r7, #8]
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	611a      	str	r2, [r3, #16]
 8002e82:	e021      	b.n	8002ec8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e84:	893b      	ldrh	r3, [r7, #8]
 8002e86:	0a1b      	lsrs	r3, r3, #8
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e94:	6a39      	ldr	r1, [r7, #32]
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 fa20 	bl	80032dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00d      	beq.n	8002ebe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d107      	bne.n	8002eba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e005      	b.n	8002eca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ebe:	893b      	ldrh	r3, [r7, #8]
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	00010002 	.word	0x00010002

08002ed8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af02      	add	r7, sp, #8
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	4608      	mov	r0, r1
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	817b      	strh	r3, [r7, #10]
 8002eea:	460b      	mov	r3, r1
 8002eec:	813b      	strh	r3, [r7, #8]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 f8c2 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00d      	beq.n	8002f46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f38:	d103      	bne.n	8002f42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f40:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e0aa      	b.n	800309c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f46:	897b      	ldrh	r3, [r7, #10]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f58:	6a3a      	ldr	r2, [r7, #32]
 8002f5a:	4952      	ldr	r1, [pc, #328]	@ (80030a4 <I2C_RequestMemoryRead+0x1cc>)
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 f91d 	bl	800319c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e097      	b.n	800309c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f84:	6a39      	ldr	r1, [r7, #32]
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f9a8 	bl	80032dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00d      	beq.n	8002fae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d107      	bne.n	8002faa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fa8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e076      	b.n	800309c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fae:	88fb      	ldrh	r3, [r7, #6]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d105      	bne.n	8002fc0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fb4:	893b      	ldrh	r3, [r7, #8]
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	611a      	str	r2, [r3, #16]
 8002fbe:	e021      	b.n	8003004 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fc0:	893b      	ldrh	r3, [r7, #8]
 8002fc2:	0a1b      	lsrs	r3, r3, #8
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fd0:	6a39      	ldr	r1, [r7, #32]
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f982 	bl	80032dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00d      	beq.n	8002ffa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d107      	bne.n	8002ff6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ff4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e050      	b.n	800309c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ffa:	893b      	ldrh	r3, [r7, #8]
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003006:	6a39      	ldr	r1, [r7, #32]
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 f967 	bl	80032dc <I2C_WaitOnTXEFlagUntilTimeout>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00d      	beq.n	8003030 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003018:	2b04      	cmp	r3, #4
 800301a:	d107      	bne.n	800302c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800302a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e035      	b.n	800309c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800303e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	2200      	movs	r2, #0
 8003048:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 f82b 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00d      	beq.n	8003074 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003062:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003066:	d103      	bne.n	8003070 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800306e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e013      	b.n	800309c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003074:	897b      	ldrh	r3, [r7, #10]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	b2da      	uxtb	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	6a3a      	ldr	r2, [r7, #32]
 8003088:	4906      	ldr	r1, [pc, #24]	@ (80030a4 <I2C_RequestMemoryRead+0x1cc>)
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f886 	bl	800319c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	00010002 	.word	0x00010002

080030a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	4613      	mov	r3, r2
 80030b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030b8:	e048      	b.n	800314c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c0:	d044      	beq.n	800314c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c2:	f7fe ff01 	bl	8001ec8 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d302      	bcc.n	80030d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d139      	bne.n	800314c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	0c1b      	lsrs	r3, r3, #16
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d10d      	bne.n	80030fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	43da      	mvns	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	4013      	ands	r3, r2
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	461a      	mov	r2, r3
 80030fc:	e00c      	b.n	8003118 <I2C_WaitOnFlagUntilTimeout+0x70>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	43da      	mvns	r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	4013      	ands	r3, r2
 800310a:	b29b      	uxth	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf0c      	ite	eq
 8003110:	2301      	moveq	r3, #1
 8003112:	2300      	movne	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	461a      	mov	r2, r3
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	429a      	cmp	r2, r3
 800311c:	d116      	bne.n	800314c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003138:	f043 0220 	orr.w	r2, r3, #32
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e023      	b.n	8003194 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	0c1b      	lsrs	r3, r3, #16
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b01      	cmp	r3, #1
 8003154:	d10d      	bne.n	8003172 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	43da      	mvns	r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	4013      	ands	r3, r2
 8003162:	b29b      	uxth	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	bf0c      	ite	eq
 8003168:	2301      	moveq	r3, #1
 800316a:	2300      	movne	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	461a      	mov	r2, r3
 8003170:	e00c      	b.n	800318c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	43da      	mvns	r2, r3
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	4013      	ands	r3, r2
 800317e:	b29b      	uxth	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	bf0c      	ite	eq
 8003184:	2301      	moveq	r3, #1
 8003186:	2300      	movne	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	461a      	mov	r2, r3
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	429a      	cmp	r2, r3
 8003190:	d093      	beq.n	80030ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031aa:	e071      	b.n	8003290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ba:	d123      	bne.n	8003204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f0:	f043 0204 	orr.w	r2, r3, #4
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e067      	b.n	80032d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320a:	d041      	beq.n	8003290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320c:	f7fe fe5c 	bl	8001ec8 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	429a      	cmp	r2, r3
 800321a:	d302      	bcc.n	8003222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d136      	bne.n	8003290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	0c1b      	lsrs	r3, r3, #16
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b01      	cmp	r3, #1
 800322a:	d10c      	bne.n	8003246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	43da      	mvns	r2, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4013      	ands	r3, r2
 8003238:	b29b      	uxth	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	bf14      	ite	ne
 800323e:	2301      	movne	r3, #1
 8003240:	2300      	moveq	r3, #0
 8003242:	b2db      	uxtb	r3, r3
 8003244:	e00b      	b.n	800325e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	43da      	mvns	r2, r3
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	4013      	ands	r3, r2
 8003252:	b29b      	uxth	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	bf14      	ite	ne
 8003258:	2301      	movne	r3, #1
 800325a:	2300      	moveq	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d016      	beq.n	8003290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	f043 0220 	orr.w	r2, r3, #32
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e021      	b.n	80032d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	0c1b      	lsrs	r3, r3, #16
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b01      	cmp	r3, #1
 8003298:	d10c      	bne.n	80032b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	43da      	mvns	r2, r3
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	4013      	ands	r3, r2
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	bf14      	ite	ne
 80032ac:	2301      	movne	r3, #1
 80032ae:	2300      	moveq	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	e00b      	b.n	80032cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	43da      	mvns	r2, r3
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	4013      	ands	r3, r2
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	bf14      	ite	ne
 80032c6:	2301      	movne	r3, #1
 80032c8:	2300      	moveq	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f47f af6d 	bne.w	80031ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032e8:	e034      	b.n	8003354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 f8e3 	bl	80034b6 <I2C_IsAcknowledgeFailed>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e034      	b.n	8003364 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003300:	d028      	beq.n	8003354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003302:	f7fe fde1 	bl	8001ec8 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	429a      	cmp	r2, r3
 8003310:	d302      	bcc.n	8003318 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d11d      	bne.n	8003354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003322:	2b80      	cmp	r3, #128	@ 0x80
 8003324:	d016      	beq.n	8003354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003340:	f043 0220 	orr.w	r2, r3, #32
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e007      	b.n	8003364 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335e:	2b80      	cmp	r3, #128	@ 0x80
 8003360:	d1c3      	bne.n	80032ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003378:	e034      	b.n	80033e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f89b 	bl	80034b6 <I2C_IsAcknowledgeFailed>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e034      	b.n	80033f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d028      	beq.n	80033e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003392:	f7fe fd99 	bl	8001ec8 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d302      	bcc.n	80033a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d11d      	bne.n	80033e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d016      	beq.n	80033e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d0:	f043 0220 	orr.w	r2, r3, #32
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e007      	b.n	80033f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f003 0304 	and.w	r3, r3, #4
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d1c3      	bne.n	800337a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003408:	e049      	b.n	800349e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	2b10      	cmp	r3, #16
 8003416:	d119      	bne.n	800344c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f06f 0210 	mvn.w	r2, #16
 8003420:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e030      	b.n	80034ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800344c:	f7fe fd3c 	bl	8001ec8 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	429a      	cmp	r2, r3
 800345a:	d302      	bcc.n	8003462 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d11d      	bne.n	800349e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800346c:	2b40      	cmp	r3, #64	@ 0x40
 800346e:	d016      	beq.n	800349e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2220      	movs	r2, #32
 800347a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348a:	f043 0220 	orr.w	r2, r3, #32
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e007      	b.n	80034ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a8:	2b40      	cmp	r3, #64	@ 0x40
 80034aa:	d1ae      	bne.n	800340a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034cc:	d11b      	bne.n	8003506 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034d6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f2:	f043 0204 	orr.w	r2, r3, #4
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	bc80      	pop	{r7}
 8003510:	4770      	bx	lr
	...

08003514 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e272      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 8087 	beq.w	8003642 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003534:	4b92      	ldr	r3, [pc, #584]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 030c 	and.w	r3, r3, #12
 800353c:	2b04      	cmp	r3, #4
 800353e:	d00c      	beq.n	800355a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003540:	4b8f      	ldr	r3, [pc, #572]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 030c 	and.w	r3, r3, #12
 8003548:	2b08      	cmp	r3, #8
 800354a:	d112      	bne.n	8003572 <HAL_RCC_OscConfig+0x5e>
 800354c:	4b8c      	ldr	r3, [pc, #560]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003558:	d10b      	bne.n	8003572 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800355a:	4b89      	ldr	r3, [pc, #548]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d06c      	beq.n	8003640 <HAL_RCC_OscConfig+0x12c>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d168      	bne.n	8003640 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e24c      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800357a:	d106      	bne.n	800358a <HAL_RCC_OscConfig+0x76>
 800357c:	4b80      	ldr	r3, [pc, #512]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a7f      	ldr	r2, [pc, #508]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 8003582:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	e02e      	b.n	80035e8 <HAL_RCC_OscConfig+0xd4>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10c      	bne.n	80035ac <HAL_RCC_OscConfig+0x98>
 8003592:	4b7b      	ldr	r3, [pc, #492]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a7a      	ldr	r2, [pc, #488]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 8003598:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	4b78      	ldr	r3, [pc, #480]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a77      	ldr	r2, [pc, #476]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 80035a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	e01d      	b.n	80035e8 <HAL_RCC_OscConfig+0xd4>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCC_OscConfig+0xbc>
 80035b6:	4b72      	ldr	r3, [pc, #456]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a71      	ldr	r2, [pc, #452]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 80035bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	4b6f      	ldr	r3, [pc, #444]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a6e      	ldr	r2, [pc, #440]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 80035c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	e00b      	b.n	80035e8 <HAL_RCC_OscConfig+0xd4>
 80035d0:	4b6b      	ldr	r3, [pc, #428]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a6a      	ldr	r2, [pc, #424]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 80035d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035da:	6013      	str	r3, [r2, #0]
 80035dc:	4b68      	ldr	r3, [pc, #416]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a67      	ldr	r2, [pc, #412]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 80035e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d013      	beq.n	8003618 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f0:	f7fe fc6a 	bl	8001ec8 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f8:	f7fe fc66 	bl	8001ec8 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	@ 0x64
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e200      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360a:	4b5d      	ldr	r3, [pc, #372]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0xe4>
 8003616:	e014      	b.n	8003642 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003618:	f7fe fc56 	bl	8001ec8 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003620:	f7fe fc52 	bl	8001ec8 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b64      	cmp	r3, #100	@ 0x64
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e1ec      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003632:	4b53      	ldr	r3, [pc, #332]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f0      	bne.n	8003620 <HAL_RCC_OscConfig+0x10c>
 800363e:	e000      	b.n	8003642 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d063      	beq.n	8003716 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800364e:	4b4c      	ldr	r3, [pc, #304]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f003 030c 	and.w	r3, r3, #12
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00b      	beq.n	8003672 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800365a:	4b49      	ldr	r3, [pc, #292]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	2b08      	cmp	r3, #8
 8003664:	d11c      	bne.n	80036a0 <HAL_RCC_OscConfig+0x18c>
 8003666:	4b46      	ldr	r3, [pc, #280]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d116      	bne.n	80036a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003672:	4b43      	ldr	r3, [pc, #268]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d005      	beq.n	800368a <HAL_RCC_OscConfig+0x176>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d001      	beq.n	800368a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e1c0      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800368a:	4b3d      	ldr	r3, [pc, #244]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	4939      	ldr	r1, [pc, #228]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 800369a:	4313      	orrs	r3, r2
 800369c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800369e:	e03a      	b.n	8003716 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d020      	beq.n	80036ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a8:	4b36      	ldr	r3, [pc, #216]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 80036aa:	2201      	movs	r2, #1
 80036ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ae:	f7fe fc0b 	bl	8001ec8 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b6:	f7fe fc07 	bl	8001ec8 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e1a1      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	4927      	ldr	r1, [pc, #156]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	600b      	str	r3, [r1, #0]
 80036e8:	e015      	b.n	8003716 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ea:	4b26      	ldr	r3, [pc, #152]	@ (8003784 <HAL_RCC_OscConfig+0x270>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f0:	f7fe fbea 	bl	8001ec8 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036f8:	f7fe fbe6 	bl	8001ec8 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e180      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800370a:	4b1d      	ldr	r3, [pc, #116]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1f0      	bne.n	80036f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b00      	cmp	r3, #0
 8003720:	d03a      	beq.n	8003798 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d019      	beq.n	800375e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800372a:	4b17      	ldr	r3, [pc, #92]	@ (8003788 <HAL_RCC_OscConfig+0x274>)
 800372c:	2201      	movs	r2, #1
 800372e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003730:	f7fe fbca 	bl	8001ec8 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003738:	f7fe fbc6 	bl	8001ec8 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e160      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800374a:	4b0d      	ldr	r3, [pc, #52]	@ (8003780 <HAL_RCC_OscConfig+0x26c>)
 800374c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003756:	2001      	movs	r0, #1
 8003758:	f000 faba 	bl	8003cd0 <RCC_Delay>
 800375c:	e01c      	b.n	8003798 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800375e:	4b0a      	ldr	r3, [pc, #40]	@ (8003788 <HAL_RCC_OscConfig+0x274>)
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003764:	f7fe fbb0 	bl	8001ec8 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800376a:	e00f      	b.n	800378c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800376c:	f7fe fbac 	bl	8001ec8 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d908      	bls.n	800378c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e146      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
 800377e:	bf00      	nop
 8003780:	40021000 	.word	0x40021000
 8003784:	42420000 	.word	0x42420000
 8003788:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800378c:	4b92      	ldr	r3, [pc, #584]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 800378e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1e9      	bne.n	800376c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80a6 	beq.w	80038f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037a6:	2300      	movs	r3, #0
 80037a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037aa:	4b8b      	ldr	r3, [pc, #556]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10d      	bne.n	80037d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b6:	4b88      	ldr	r3, [pc, #544]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	4a87      	ldr	r2, [pc, #540]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 80037bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037c0:	61d3      	str	r3, [r2, #28]
 80037c2:	4b85      	ldr	r3, [pc, #532]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ce:	2301      	movs	r3, #1
 80037d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d2:	4b82      	ldr	r3, [pc, #520]	@ (80039dc <HAL_RCC_OscConfig+0x4c8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d118      	bne.n	8003810 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037de:	4b7f      	ldr	r3, [pc, #508]	@ (80039dc <HAL_RCC_OscConfig+0x4c8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a7e      	ldr	r2, [pc, #504]	@ (80039dc <HAL_RCC_OscConfig+0x4c8>)
 80037e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ea:	f7fe fb6d 	bl	8001ec8 <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f2:	f7fe fb69 	bl	8001ec8 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b64      	cmp	r3, #100	@ 0x64
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e103      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003804:	4b75      	ldr	r3, [pc, #468]	@ (80039dc <HAL_RCC_OscConfig+0x4c8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0f0      	beq.n	80037f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d106      	bne.n	8003826 <HAL_RCC_OscConfig+0x312>
 8003818:	4b6f      	ldr	r3, [pc, #444]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	4a6e      	ldr	r2, [pc, #440]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 800381e:	f043 0301 	orr.w	r3, r3, #1
 8003822:	6213      	str	r3, [r2, #32]
 8003824:	e02d      	b.n	8003882 <HAL_RCC_OscConfig+0x36e>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10c      	bne.n	8003848 <HAL_RCC_OscConfig+0x334>
 800382e:	4b6a      	ldr	r3, [pc, #424]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	4a69      	ldr	r2, [pc, #420]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 8003834:	f023 0301 	bic.w	r3, r3, #1
 8003838:	6213      	str	r3, [r2, #32]
 800383a:	4b67      	ldr	r3, [pc, #412]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	4a66      	ldr	r2, [pc, #408]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 8003840:	f023 0304 	bic.w	r3, r3, #4
 8003844:	6213      	str	r3, [r2, #32]
 8003846:	e01c      	b.n	8003882 <HAL_RCC_OscConfig+0x36e>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	2b05      	cmp	r3, #5
 800384e:	d10c      	bne.n	800386a <HAL_RCC_OscConfig+0x356>
 8003850:	4b61      	ldr	r3, [pc, #388]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	4a60      	ldr	r2, [pc, #384]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 8003856:	f043 0304 	orr.w	r3, r3, #4
 800385a:	6213      	str	r3, [r2, #32]
 800385c:	4b5e      	ldr	r3, [pc, #376]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	4a5d      	ldr	r2, [pc, #372]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	6213      	str	r3, [r2, #32]
 8003868:	e00b      	b.n	8003882 <HAL_RCC_OscConfig+0x36e>
 800386a:	4b5b      	ldr	r3, [pc, #364]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	4a5a      	ldr	r2, [pc, #360]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 8003870:	f023 0301 	bic.w	r3, r3, #1
 8003874:	6213      	str	r3, [r2, #32]
 8003876:	4b58      	ldr	r3, [pc, #352]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	4a57      	ldr	r2, [pc, #348]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 800387c:	f023 0304 	bic.w	r3, r3, #4
 8003880:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d015      	beq.n	80038b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800388a:	f7fe fb1d 	bl	8001ec8 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003890:	e00a      	b.n	80038a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003892:	f7fe fb19 	bl	8001ec8 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e0b1      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a8:	4b4b      	ldr	r3, [pc, #300]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0ee      	beq.n	8003892 <HAL_RCC_OscConfig+0x37e>
 80038b4:	e014      	b.n	80038e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b6:	f7fe fb07 	bl	8001ec8 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038bc:	e00a      	b.n	80038d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038be:	f7fe fb03 	bl	8001ec8 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e09b      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d4:	4b40      	ldr	r3, [pc, #256]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1ee      	bne.n	80038be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038e0:	7dfb      	ldrb	r3, [r7, #23]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d105      	bne.n	80038f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e6:	4b3c      	ldr	r3, [pc, #240]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	4a3b      	ldr	r2, [pc, #236]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 80038ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 8087 	beq.w	8003a0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038fc:	4b36      	ldr	r3, [pc, #216]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 030c 	and.w	r3, r3, #12
 8003904:	2b08      	cmp	r3, #8
 8003906:	d061      	beq.n	80039cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	2b02      	cmp	r3, #2
 800390e:	d146      	bne.n	800399e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003910:	4b33      	ldr	r3, [pc, #204]	@ (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003916:	f7fe fad7 	bl	8001ec8 <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391e:	f7fe fad3 	bl	8001ec8 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e06d      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003930:	4b29      	ldr	r3, [pc, #164]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1f0      	bne.n	800391e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003944:	d108      	bne.n	8003958 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003946:	4b24      	ldr	r3, [pc, #144]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	4921      	ldr	r1, [pc, #132]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 8003954:	4313      	orrs	r3, r2
 8003956:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003958:	4b1f      	ldr	r3, [pc, #124]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a19      	ldr	r1, [r3, #32]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003968:	430b      	orrs	r3, r1
 800396a:	491b      	ldr	r1, [pc, #108]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 800396c:	4313      	orrs	r3, r2
 800396e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003970:	4b1b      	ldr	r3, [pc, #108]	@ (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 8003972:	2201      	movs	r2, #1
 8003974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003976:	f7fe faa7 	bl	8001ec8 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800397c:	e008      	b.n	8003990 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800397e:	f7fe faa3 	bl	8001ec8 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e03d      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003990:	4b11      	ldr	r3, [pc, #68]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0f0      	beq.n	800397e <HAL_RCC_OscConfig+0x46a>
 800399c:	e035      	b.n	8003a0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800399e:	4b10      	ldr	r3, [pc, #64]	@ (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a4:	f7fe fa90 	bl	8001ec8 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ac:	f7fe fa8c 	bl	8001ec8 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e026      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039be:	4b06      	ldr	r3, [pc, #24]	@ (80039d8 <HAL_RCC_OscConfig+0x4c4>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f0      	bne.n	80039ac <HAL_RCC_OscConfig+0x498>
 80039ca:	e01e      	b.n	8003a0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d107      	bne.n	80039e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e019      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40007000 	.word	0x40007000
 80039e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003a14 <HAL_RCC_OscConfig+0x500>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d106      	bne.n	8003a06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d001      	beq.n	8003a0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40021000 	.word	0x40021000

08003a18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0d0      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a2c:	4b6a      	ldr	r3, [pc, #424]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d910      	bls.n	8003a5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3a:	4b67      	ldr	r3, [pc, #412]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f023 0207 	bic.w	r2, r3, #7
 8003a42:	4965      	ldr	r1, [pc, #404]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4a:	4b63      	ldr	r3, [pc, #396]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0b8      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d020      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a74:	4b59      	ldr	r3, [pc, #356]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	4a58      	ldr	r2, [pc, #352]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003a7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a8c:	4b53      	ldr	r3, [pc, #332]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	4a52      	ldr	r2, [pc, #328]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003a92:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003a96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a98:	4b50      	ldr	r3, [pc, #320]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	494d      	ldr	r1, [pc, #308]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d040      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d107      	bne.n	8003ace <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003abe:	4b47      	ldr	r3, [pc, #284]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d115      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e07f      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d107      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad6:	4b41      	ldr	r3, [pc, #260]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d109      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e073      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae6:	4b3d      	ldr	r3, [pc, #244]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e06b      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003af6:	4b39      	ldr	r3, [pc, #228]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f023 0203 	bic.w	r2, r3, #3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	4936      	ldr	r1, [pc, #216]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b08:	f7fe f9de 	bl	8001ec8 <HAL_GetTick>
 8003b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0e:	e00a      	b.n	8003b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b10:	f7fe f9da 	bl	8001ec8 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e053      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b26:	4b2d      	ldr	r3, [pc, #180]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f003 020c 	and.w	r2, r3, #12
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d1eb      	bne.n	8003b10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b38:	4b27      	ldr	r3, [pc, #156]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d210      	bcs.n	8003b68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b46:	4b24      	ldr	r3, [pc, #144]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f023 0207 	bic.w	r2, r3, #7
 8003b4e:	4922      	ldr	r1, [pc, #136]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b56:	4b20      	ldr	r3, [pc, #128]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d001      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e032      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b74:	4b19      	ldr	r3, [pc, #100]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	4916      	ldr	r1, [pc, #88]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d009      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b92:	4b12      	ldr	r3, [pc, #72]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	490e      	ldr	r1, [pc, #56]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ba6:	f000 f821 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8003baa:	4602      	mov	r2, r0
 8003bac:	4b0b      	ldr	r3, [pc, #44]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	091b      	lsrs	r3, r3, #4
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	490a      	ldr	r1, [pc, #40]	@ (8003be0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb8:	5ccb      	ldrb	r3, [r1, r3]
 8003bba:	fa22 f303 	lsr.w	r3, r2, r3
 8003bbe:	4a09      	ldr	r2, [pc, #36]	@ (8003be4 <HAL_RCC_ClockConfig+0x1cc>)
 8003bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bc2:	4b09      	ldr	r3, [pc, #36]	@ (8003be8 <HAL_RCC_ClockConfig+0x1d0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fe f93c 	bl	8001e44 <HAL_InitTick>

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40022000 	.word	0x40022000
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	0800482c 	.word	0x0800482c
 8003be4:	20000000 	.word	0x20000000
 8003be8:	20000004 	.word	0x20000004

08003bec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60fb      	str	r3, [r7, #12]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c06:	4b1e      	ldr	r3, [pc, #120]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f003 030c 	and.w	r3, r3, #12
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d002      	beq.n	8003c1c <HAL_RCC_GetSysClockFreq+0x30>
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d003      	beq.n	8003c22 <HAL_RCC_GetSysClockFreq+0x36>
 8003c1a:	e027      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c1c:	4b19      	ldr	r3, [pc, #100]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c1e:	613b      	str	r3, [r7, #16]
      break;
 8003c20:	e027      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	0c9b      	lsrs	r3, r3, #18
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	4a17      	ldr	r2, [pc, #92]	@ (8003c88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c2c:	5cd3      	ldrb	r3, [r2, r3]
 8003c2e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d010      	beq.n	8003c5c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c3a:	4b11      	ldr	r3, [pc, #68]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	0c5b      	lsrs	r3, r3, #17
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	4a11      	ldr	r2, [pc, #68]	@ (8003c8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c46:	5cd3      	ldrb	r3, [r2, r3]
 8003c48:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c4e:	fb03 f202 	mul.w	r2, r3, r2
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	e004      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a0c      	ldr	r2, [pc, #48]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c60:	fb02 f303 	mul.w	r3, r2, r3
 8003c64:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	613b      	str	r3, [r7, #16]
      break;
 8003c6a:	e002      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c6c:	4b05      	ldr	r3, [pc, #20]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c6e:	613b      	str	r3, [r7, #16]
      break;
 8003c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c72:	693b      	ldr	r3, [r7, #16]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	371c      	adds	r7, #28
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40021000 	.word	0x40021000
 8003c84:	007a1200 	.word	0x007a1200
 8003c88:	08004844 	.word	0x08004844
 8003c8c:	08004854 	.word	0x08004854
 8003c90:	003d0900 	.word	0x003d0900

08003c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c98:	4b02      	ldr	r3, [pc, #8]	@ (8003ca4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr
 8003ca4:	20000000 	.word	0x20000000

08003ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cac:	f7ff fff2 	bl	8003c94 <HAL_RCC_GetHCLKFreq>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	4b05      	ldr	r3, [pc, #20]	@ (8003cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	0a1b      	lsrs	r3, r3, #8
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	4903      	ldr	r1, [pc, #12]	@ (8003ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cbe:	5ccb      	ldrb	r3, [r1, r3]
 8003cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	0800483c 	.word	0x0800483c

08003cd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8003d04 <RCC_Delay+0x34>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8003d08 <RCC_Delay+0x38>)
 8003cde:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce2:	0a5b      	lsrs	r3, r3, #9
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	fb02 f303 	mul.w	r3, r2, r3
 8003cea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cec:	bf00      	nop
  }
  while (Delay --);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	1e5a      	subs	r2, r3, #1
 8003cf2:	60fa      	str	r2, [r7, #12]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1f9      	bne.n	8003cec <RCC_Delay+0x1c>
}
 8003cf8:	bf00      	nop
 8003cfa:	bf00      	nop
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr
 8003d04:	20000000 	.word	0x20000000
 8003d08:	10624dd3 	.word	0x10624dd3

08003d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e041      	b.n	8003da2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fd ff84 	bl	8001c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3304      	adds	r3, #4
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	f000 fa06 	bl	800415c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e041      	b.n	8003e40 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d106      	bne.n	8003dd6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7fd ff53 	bl	8001c7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2202      	movs	r2, #2
 8003dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3304      	adds	r3, #4
 8003de6:	4619      	mov	r1, r3
 8003de8:	4610      	mov	r0, r2
 8003dea:	f000 f9b7 	bl	800415c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d101      	bne.n	8003e66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e62:	2302      	movs	r3, #2
 8003e64:	e0ae      	b.n	8003fc4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b0c      	cmp	r3, #12
 8003e72:	f200 809f 	bhi.w	8003fb4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e76:	a201      	add	r2, pc, #4	@ (adr r2, 8003e7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7c:	08003eb1 	.word	0x08003eb1
 8003e80:	08003fb5 	.word	0x08003fb5
 8003e84:	08003fb5 	.word	0x08003fb5
 8003e88:	08003fb5 	.word	0x08003fb5
 8003e8c:	08003ef1 	.word	0x08003ef1
 8003e90:	08003fb5 	.word	0x08003fb5
 8003e94:	08003fb5 	.word	0x08003fb5
 8003e98:	08003fb5 	.word	0x08003fb5
 8003e9c:	08003f33 	.word	0x08003f33
 8003ea0:	08003fb5 	.word	0x08003fb5
 8003ea4:	08003fb5 	.word	0x08003fb5
 8003ea8:	08003fb5 	.word	0x08003fb5
 8003eac:	08003f73 	.word	0x08003f73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68b9      	ldr	r1, [r7, #8]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 f9b2 	bl	8004220 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699a      	ldr	r2, [r3, #24]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0208 	orr.w	r2, r2, #8
 8003eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0204 	bic.w	r2, r2, #4
 8003eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6999      	ldr	r1, [r3, #24]
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	691a      	ldr	r2, [r3, #16]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	619a      	str	r2, [r3, #24]
      break;
 8003eee:	e064      	b.n	8003fba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68b9      	ldr	r1, [r7, #8]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 f9f8 	bl	80042ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699a      	ldr	r2, [r3, #24]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699a      	ldr	r2, [r3, #24]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6999      	ldr	r1, [r3, #24]
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	021a      	lsls	r2, r3, #8
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	619a      	str	r2, [r3, #24]
      break;
 8003f30:	e043      	b.n	8003fba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68b9      	ldr	r1, [r7, #8]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 fa41 	bl	80043c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69da      	ldr	r2, [r3, #28]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 0208 	orr.w	r2, r2, #8
 8003f4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69da      	ldr	r2, [r3, #28]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0204 	bic.w	r2, r2, #4
 8003f5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	69d9      	ldr	r1, [r3, #28]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	61da      	str	r2, [r3, #28]
      break;
 8003f70:	e023      	b.n	8003fba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68b9      	ldr	r1, [r7, #8]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 fa8b 	bl	8004494 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	69da      	ldr	r2, [r3, #28]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69da      	ldr	r2, [r3, #28]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	69d9      	ldr	r1, [r3, #28]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	021a      	lsls	r2, r3, #8
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	61da      	str	r2, [r3, #28]
      break;
 8003fb2:	e002      	b.n	8003fba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8003fb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_TIM_ConfigClockSource+0x1c>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e0b4      	b.n	8004152 <HAL_TIM_ConfigClockSource+0x186>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800400e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004020:	d03e      	beq.n	80040a0 <HAL_TIM_ConfigClockSource+0xd4>
 8004022:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004026:	f200 8087 	bhi.w	8004138 <HAL_TIM_ConfigClockSource+0x16c>
 800402a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800402e:	f000 8086 	beq.w	800413e <HAL_TIM_ConfigClockSource+0x172>
 8004032:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004036:	d87f      	bhi.n	8004138 <HAL_TIM_ConfigClockSource+0x16c>
 8004038:	2b70      	cmp	r3, #112	@ 0x70
 800403a:	d01a      	beq.n	8004072 <HAL_TIM_ConfigClockSource+0xa6>
 800403c:	2b70      	cmp	r3, #112	@ 0x70
 800403e:	d87b      	bhi.n	8004138 <HAL_TIM_ConfigClockSource+0x16c>
 8004040:	2b60      	cmp	r3, #96	@ 0x60
 8004042:	d050      	beq.n	80040e6 <HAL_TIM_ConfigClockSource+0x11a>
 8004044:	2b60      	cmp	r3, #96	@ 0x60
 8004046:	d877      	bhi.n	8004138 <HAL_TIM_ConfigClockSource+0x16c>
 8004048:	2b50      	cmp	r3, #80	@ 0x50
 800404a:	d03c      	beq.n	80040c6 <HAL_TIM_ConfigClockSource+0xfa>
 800404c:	2b50      	cmp	r3, #80	@ 0x50
 800404e:	d873      	bhi.n	8004138 <HAL_TIM_ConfigClockSource+0x16c>
 8004050:	2b40      	cmp	r3, #64	@ 0x40
 8004052:	d058      	beq.n	8004106 <HAL_TIM_ConfigClockSource+0x13a>
 8004054:	2b40      	cmp	r3, #64	@ 0x40
 8004056:	d86f      	bhi.n	8004138 <HAL_TIM_ConfigClockSource+0x16c>
 8004058:	2b30      	cmp	r3, #48	@ 0x30
 800405a:	d064      	beq.n	8004126 <HAL_TIM_ConfigClockSource+0x15a>
 800405c:	2b30      	cmp	r3, #48	@ 0x30
 800405e:	d86b      	bhi.n	8004138 <HAL_TIM_ConfigClockSource+0x16c>
 8004060:	2b20      	cmp	r3, #32
 8004062:	d060      	beq.n	8004126 <HAL_TIM_ConfigClockSource+0x15a>
 8004064:	2b20      	cmp	r3, #32
 8004066:	d867      	bhi.n	8004138 <HAL_TIM_ConfigClockSource+0x16c>
 8004068:	2b00      	cmp	r3, #0
 800406a:	d05c      	beq.n	8004126 <HAL_TIM_ConfigClockSource+0x15a>
 800406c:	2b10      	cmp	r3, #16
 800406e:	d05a      	beq.n	8004126 <HAL_TIM_ConfigClockSource+0x15a>
 8004070:	e062      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004082:	f000 facc 	bl	800461e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004094:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	609a      	str	r2, [r3, #8]
      break;
 800409e:	e04f      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040b0:	f000 fab5 	bl	800461e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689a      	ldr	r2, [r3, #8]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040c2:	609a      	str	r2, [r3, #8]
      break;
 80040c4:	e03c      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040d2:	461a      	mov	r2, r3
 80040d4:	f000 fa2c 	bl	8004530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2150      	movs	r1, #80	@ 0x50
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 fa83 	bl	80045ea <TIM_ITRx_SetConfig>
      break;
 80040e4:	e02c      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040f2:	461a      	mov	r2, r3
 80040f4:	f000 fa4a 	bl	800458c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2160      	movs	r1, #96	@ 0x60
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 fa73 	bl	80045ea <TIM_ITRx_SetConfig>
      break;
 8004104:	e01c      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004112:	461a      	mov	r2, r3
 8004114:	f000 fa0c 	bl	8004530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2140      	movs	r1, #64	@ 0x40
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fa63 	bl	80045ea <TIM_ITRx_SetConfig>
      break;
 8004124:	e00c      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4619      	mov	r1, r3
 8004130:	4610      	mov	r0, r2
 8004132:	f000 fa5a 	bl	80045ea <TIM_ITRx_SetConfig>
      break;
 8004136:	e003      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	73fb      	strb	r3, [r7, #15]
      break;
 800413c:	e000      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800413e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004150:	7bfb      	ldrb	r3, [r7, #15]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a29      	ldr	r2, [pc, #164]	@ (8004214 <TIM_Base_SetConfig+0xb8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d00b      	beq.n	800418c <TIM_Base_SetConfig+0x30>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800417a:	d007      	beq.n	800418c <TIM_Base_SetConfig+0x30>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a26      	ldr	r2, [pc, #152]	@ (8004218 <TIM_Base_SetConfig+0xbc>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d003      	beq.n	800418c <TIM_Base_SetConfig+0x30>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a25      	ldr	r2, [pc, #148]	@ (800421c <TIM_Base_SetConfig+0xc0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d108      	bne.n	800419e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004214 <TIM_Base_SetConfig+0xb8>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00b      	beq.n	80041be <TIM_Base_SetConfig+0x62>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ac:	d007      	beq.n	80041be <TIM_Base_SetConfig+0x62>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a19      	ldr	r2, [pc, #100]	@ (8004218 <TIM_Base_SetConfig+0xbc>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d003      	beq.n	80041be <TIM_Base_SetConfig+0x62>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a18      	ldr	r2, [pc, #96]	@ (800421c <TIM_Base_SetConfig+0xc0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d108      	bne.n	80041d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a07      	ldr	r2, [pc, #28]	@ (8004214 <TIM_Base_SetConfig+0xb8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d103      	bne.n	8004204 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	615a      	str	r2, [r3, #20]
}
 800420a:	bf00      	nop
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	bc80      	pop	{r7}
 8004212:	4770      	bx	lr
 8004214:	40012c00 	.word	0x40012c00
 8004218:	40000400 	.word	0x40000400
 800421c:	40000800 	.word	0x40000800

08004220 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	f023 0201 	bic.w	r2, r3, #1
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800424e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0303 	bic.w	r3, r3, #3
 8004256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	4313      	orrs	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f023 0302 	bic.w	r3, r3, #2
 8004268:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	4313      	orrs	r3, r2
 8004272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a1c      	ldr	r2, [pc, #112]	@ (80042e8 <TIM_OC1_SetConfig+0xc8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d10c      	bne.n	8004296 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f023 0308 	bic.w	r3, r3, #8
 8004282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	4313      	orrs	r3, r2
 800428c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f023 0304 	bic.w	r3, r3, #4
 8004294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a13      	ldr	r2, [pc, #76]	@ (80042e8 <TIM_OC1_SetConfig+0xc8>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d111      	bne.n	80042c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	621a      	str	r2, [r3, #32]
}
 80042dc:	bf00      	nop
 80042de:	371c      	adds	r7, #28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bc80      	pop	{r7}
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40012c00 	.word	0x40012c00

080042ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	f023 0210 	bic.w	r2, r3, #16
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800431a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	021b      	lsls	r3, r3, #8
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	4313      	orrs	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f023 0320 	bic.w	r3, r3, #32
 8004336:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	4313      	orrs	r3, r2
 8004342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a1d      	ldr	r2, [pc, #116]	@ (80043bc <TIM_OC2_SetConfig+0xd0>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d10d      	bne.n	8004368 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004352:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004366:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a14      	ldr	r2, [pc, #80]	@ (80043bc <TIM_OC2_SetConfig+0xd0>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d113      	bne.n	8004398 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004376:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800437e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	4313      	orrs	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	621a      	str	r2, [r3, #32]
}
 80043b2:	bf00      	nop
 80043b4:	371c      	adds	r7, #28
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr
 80043bc:	40012c00 	.word	0x40012c00

080043c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0303 	bic.w	r3, r3, #3
 80043f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	021b      	lsls	r3, r3, #8
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	4313      	orrs	r3, r2
 8004414:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a1d      	ldr	r2, [pc, #116]	@ (8004490 <TIM_OC3_SetConfig+0xd0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d10d      	bne.n	800443a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004424:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	021b      	lsls	r3, r3, #8
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	4313      	orrs	r3, r2
 8004430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a14      	ldr	r2, [pc, #80]	@ (8004490 <TIM_OC3_SetConfig+0xd0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d113      	bne.n	800446a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	621a      	str	r2, [r3, #32]
}
 8004484:	bf00      	nop
 8004486:	371c      	adds	r7, #28
 8004488:	46bd      	mov	sp, r7
 800448a:	bc80      	pop	{r7}
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	40012c00 	.word	0x40012c00

08004494 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	021b      	lsls	r3, r3, #8
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	031b      	lsls	r3, r3, #12
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a0f      	ldr	r2, [pc, #60]	@ (800452c <TIM_OC4_SetConfig+0x98>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d109      	bne.n	8004508 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	019b      	lsls	r3, r3, #6
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	621a      	str	r2, [r3, #32]
}
 8004522:	bf00      	nop
 8004524:	371c      	adds	r7, #28
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr
 800452c:	40012c00 	.word	0x40012c00

08004530 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	f023 0201 	bic.w	r2, r3, #1
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800455a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4313      	orrs	r3, r2
 8004564:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f023 030a 	bic.w	r3, r3, #10
 800456c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	4313      	orrs	r3, r2
 8004574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	621a      	str	r2, [r3, #32]
}
 8004582:	bf00      	nop
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr

0800458c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	f023 0210 	bic.w	r2, r3, #16
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	031b      	lsls	r3, r3, #12
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	621a      	str	r2, [r3, #32]
}
 80045e0:	bf00      	nop
 80045e2:	371c      	adds	r7, #28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bc80      	pop	{r7}
 80045e8:	4770      	bx	lr

080045ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b085      	sub	sp, #20
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004600:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4313      	orrs	r3, r2
 8004608:	f043 0307 	orr.w	r3, r3, #7
 800460c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	609a      	str	r2, [r3, #8]
}
 8004614:	bf00      	nop
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	bc80      	pop	{r7}
 800461c:	4770      	bx	lr

0800461e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800461e:	b480      	push	{r7}
 8004620:	b087      	sub	sp, #28
 8004622:	af00      	add	r7, sp, #0
 8004624:	60f8      	str	r0, [r7, #12]
 8004626:	60b9      	str	r1, [r7, #8]
 8004628:	607a      	str	r2, [r7, #4]
 800462a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004638:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	021a      	lsls	r2, r3, #8
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	431a      	orrs	r2, r3
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	4313      	orrs	r3, r2
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	609a      	str	r2, [r3, #8]
}
 8004652:	bf00      	nop
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr

0800465c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004670:	2302      	movs	r3, #2
 8004672:	e046      	b.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800469a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a16      	ldr	r2, [pc, #88]	@ (800470c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d00e      	beq.n	80046d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c0:	d009      	beq.n	80046d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a12      	ldr	r2, [pc, #72]	@ (8004710 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d004      	beq.n	80046d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a10      	ldr	r2, [pc, #64]	@ (8004714 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d10c      	bne.n	80046f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	bc80      	pop	{r7}
 800470a:	4770      	bx	lr
 800470c:	40012c00 	.word	0x40012c00
 8004710:	40000400 	.word	0x40000400
 8004714:	40000800 	.word	0x40000800

08004718 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800472c:	2b01      	cmp	r3, #1
 800472e:	d101      	bne.n	8004734 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004730:	2302      	movs	r3, #2
 8004732:	e03d      	b.n	80047b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	4313      	orrs	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4313      	orrs	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	4313      	orrs	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	4313      	orrs	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bc80      	pop	{r7}
 80047b8:	4770      	bx	lr

080047ba <memset>:
 80047ba:	4603      	mov	r3, r0
 80047bc:	4402      	add	r2, r0
 80047be:	4293      	cmp	r3, r2
 80047c0:	d100      	bne.n	80047c4 <memset+0xa>
 80047c2:	4770      	bx	lr
 80047c4:	f803 1b01 	strb.w	r1, [r3], #1
 80047c8:	e7f9      	b.n	80047be <memset+0x4>
	...

080047cc <__libc_init_array>:
 80047cc:	b570      	push	{r4, r5, r6, lr}
 80047ce:	2600      	movs	r6, #0
 80047d0:	4d0c      	ldr	r5, [pc, #48]	@ (8004804 <__libc_init_array+0x38>)
 80047d2:	4c0d      	ldr	r4, [pc, #52]	@ (8004808 <__libc_init_array+0x3c>)
 80047d4:	1b64      	subs	r4, r4, r5
 80047d6:	10a4      	asrs	r4, r4, #2
 80047d8:	42a6      	cmp	r6, r4
 80047da:	d109      	bne.n	80047f0 <__libc_init_array+0x24>
 80047dc:	f000 f81a 	bl	8004814 <_init>
 80047e0:	2600      	movs	r6, #0
 80047e2:	4d0a      	ldr	r5, [pc, #40]	@ (800480c <__libc_init_array+0x40>)
 80047e4:	4c0a      	ldr	r4, [pc, #40]	@ (8004810 <__libc_init_array+0x44>)
 80047e6:	1b64      	subs	r4, r4, r5
 80047e8:	10a4      	asrs	r4, r4, #2
 80047ea:	42a6      	cmp	r6, r4
 80047ec:	d105      	bne.n	80047fa <__libc_init_array+0x2e>
 80047ee:	bd70      	pop	{r4, r5, r6, pc}
 80047f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80047f4:	4798      	blx	r3
 80047f6:	3601      	adds	r6, #1
 80047f8:	e7ee      	b.n	80047d8 <__libc_init_array+0xc>
 80047fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80047fe:	4798      	blx	r3
 8004800:	3601      	adds	r6, #1
 8004802:	e7f2      	b.n	80047ea <__libc_init_array+0x1e>
 8004804:	08004860 	.word	0x08004860
 8004808:	08004860 	.word	0x08004860
 800480c:	08004860 	.word	0x08004860
 8004810:	08004864 	.word	0x08004864

08004814 <_init>:
 8004814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004816:	bf00      	nop
 8004818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800481a:	bc08      	pop	{r3}
 800481c:	469e      	mov	lr, r3
 800481e:	4770      	bx	lr

08004820 <_fini>:
 8004820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004822:	bf00      	nop
 8004824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004826:	bc08      	pop	{r3}
 8004828:	469e      	mov	lr, r3
 800482a:	4770      	bx	lr
